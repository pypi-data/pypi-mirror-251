# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_id': 'RimeUUID',
        'test_run_config': 'TestrunTestRunConfig',
        'frequency_cron_expr': 'str',
        'last_run_time': 'datetime',
        'agent_id': 'RimeUUID',
        'disabled': 'bool'
    }

    attribute_map = {
        'schedule_id': 'scheduleId',
        'test_run_config': 'testRunConfig',
        'frequency_cron_expr': 'frequencyCronExpr',
        'last_run_time': 'lastRunTime',
        'agent_id': 'agentId',
        'disabled': 'disabled'
    }

    def __init__(self, schedule_id=None, test_run_config=None, frequency_cron_expr=None, last_run_time=None, agent_id=None, disabled=None):  # noqa: E501
        """ProjectSchedule - a model defined in Swagger"""  # noqa: E501
        self._schedule_id = None
        self._test_run_config = None
        self._frequency_cron_expr = None
        self._last_run_time = None
        self._agent_id = None
        self._disabled = None
        self.discriminator = None
        if schedule_id is not None:
            self.schedule_id = schedule_id
        if test_run_config is not None:
            self.test_run_config = test_run_config
        if frequency_cron_expr is not None:
            self.frequency_cron_expr = frequency_cron_expr
        if last_run_time is not None:
            self.last_run_time = last_run_time
        if agent_id is not None:
            self.agent_id = agent_id
        if disabled is not None:
            self.disabled = disabled

    @property
    def schedule_id(self):
        """Gets the schedule_id of this ProjectSchedule.  # noqa: E501


        :return: The schedule_id of this ProjectSchedule.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this ProjectSchedule.


        :param schedule_id: The schedule_id of this ProjectSchedule.  # noqa: E501
        :type: RimeUUID
        """

        self._schedule_id = schedule_id

    @property
    def test_run_config(self):
        """Gets the test_run_config of this ProjectSchedule.  # noqa: E501


        :return: The test_run_config of this ProjectSchedule.  # noqa: E501
        :rtype: TestrunTestRunConfig
        """
        return self._test_run_config

    @test_run_config.setter
    def test_run_config(self, test_run_config):
        """Sets the test_run_config of this ProjectSchedule.


        :param test_run_config: The test_run_config of this ProjectSchedule.  # noqa: E501
        :type: TestrunTestRunConfig
        """

        self._test_run_config = test_run_config

    @property
    def frequency_cron_expr(self):
        """Gets the frequency_cron_expr of this ProjectSchedule.  # noqa: E501

        Cron expression used to determine how often to run the schedule.  # noqa: E501

        :return: The frequency_cron_expr of this ProjectSchedule.  # noqa: E501
        :rtype: str
        """
        return self._frequency_cron_expr

    @frequency_cron_expr.setter
    def frequency_cron_expr(self, frequency_cron_expr):
        """Sets the frequency_cron_expr of this ProjectSchedule.

        Cron expression used to determine how often to run the schedule.  # noqa: E501

        :param frequency_cron_expr: The frequency_cron_expr of this ProjectSchedule.  # noqa: E501
        :type: str
        """

        self._frequency_cron_expr = frequency_cron_expr

    @property
    def last_run_time(self):
        """Gets the last_run_time of this ProjectSchedule.  # noqa: E501

        Time when the schedule was most recently run.  # noqa: E501

        :return: The last_run_time of this ProjectSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run_time

    @last_run_time.setter
    def last_run_time(self, last_run_time):
        """Sets the last_run_time of this ProjectSchedule.

        Time when the schedule was most recently run.  # noqa: E501

        :param last_run_time: The last_run_time of this ProjectSchedule.  # noqa: E501
        :type: datetime
        """

        self._last_run_time = last_run_time

    @property
    def agent_id(self):
        """Gets the agent_id of this ProjectSchedule.  # noqa: E501


        :return: The agent_id of this ProjectSchedule.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this ProjectSchedule.


        :param agent_id: The agent_id of this ProjectSchedule.  # noqa: E501
        :type: RimeUUID
        """

        self._agent_id = agent_id

    @property
    def disabled(self):
        """Gets the disabled of this ProjectSchedule.  # noqa: E501

        Option for enabling/disabling scheduled tests. Default value is false. This enables users to suspend a schedule while preserving existing settings.  # noqa: E501

        :return: The disabled of this ProjectSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this ProjectSchedule.

        Option for enabling/disabling scheduled tests. Default value is false. This enables users to suspend a schedule while preserving existing settings.  # noqa: E501

        :param disabled: The disabled of this ProjectSchedule.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
