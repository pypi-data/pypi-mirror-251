Metadata-Version: 2.1
Name: traffic_weaver
Version: 1.1.0
Summary: Recreate time-series from averaged data
Author-email: "Piotr T. Lechowicz" <piotr.lechowicz@pwr.edu.pl>
Maintainer-email: "Piotr T. Lechowicz" <piotr.lechowicz@pwr.edu.pl>
License: MIT License
        
        Copyright (c) 2024 NetOpt
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/netopt/weaver
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: scipy >=1.11.4

# Traffic Weaver

Create semi-synthetic time-series based on averaged data.

## Description

Below figure presents general scope of Weaver. Based on provided original averaged data
(a), signal is *n*-times oversampled with predefined strategy how to approximate
intermediate points (b). Next, it is stretched to match integral of the original
function (c). Further, it can be smoothened with spline function (d).
Signal can be repeated several times (e) to apply certain long-term trend (f).
Finally, noise can be introduced to signal (g).

<img src="docs/source/_static/images/signal_processing.png" alt="Signal processing" width="600px" />

## Getting Started

### Dependencies

### Installing

### Development

`pip install pip-tools`

`pip-compile dev-requirements.in`

`pip-sync dev-requirements.txt`

### Executing program

## Help

## License

This project is licensed under the MIT License - see the LICENSE.md file for
details

## Acknowledgments

TBD
