{"version":3,"file":"lib_jupyterlab_index_js.e2625858868a58609b63.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACoJ;AACjB;AACnI,8BAA8B,mHAA2B,CAAC,4HAAqC;AAC/F;AACA,gDAAgD,wBAAwB,GAAG,oBAAoB,gCAAgC,GAAG,SAAS,iFAAiF,YAAY,OAAO,KAAK,YAAY,gCAAgC,wBAAwB,GAAG,oBAAoB,gCAAgC,GAAG,qBAAqB;AACvY;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;ACPvC;AACoJ;AACjB;AACW;AAC9I,8BAA8B,mHAA2B,CAAC,4HAAqC;AAC/F,0BAA0B,qHAAiC;AAC3D;AACA,mDAAmD,kEAAkE;AACrH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACT+C;AAC1C;AACmB;AACX;AACG;AACL;AACX;AACI;AACJ;AACvC;AACA,YAAY,oBAAoB,EAAE,0DAAQ;AAC1C;AACA,kCAAkC,+CAAQ;AAC1C,IAAI,gDAAS;AACb,QAAQ,+DAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,kGAAkG,OAAO;AACzG,SAAS;AACT,KAAK;AACL,YAAY,sDAAI,CAAC,uDAAS,IAAI,UAAU,sDAAI,CAAC,qDAAa,IAAI,UAAU,sDAAI,CAAC,qDAAU,IAAI,UAAU,uDAAK,CAAC,qDAAG,IAAI,WAAW,sDAAI,CAAC,qDAAG,IAAI,UAAU,uDAAK,CAAC,8DAAY,IAAI,oCAAoC,sDAAI,CAAC,mEAAiB,IAAI,qGAAqG,oBAAoB,cAAc,uBAAuB,GAAG,sDAAI,CAAC,mEAAiB,IAAI,8FAA8F,sDAAI,CAAC,8DAAa,IAAI,eAAe,oBAAoB,oBAAoB,cAAc,qBAAqB,IAAI,GAAG,GAAG,uDAAK,CAAC,qDAAG,IAAI,iCAAiC,sDAAI,CAAC,wDAAU,IAAI,mBAAmB,sDAAI,CAAC,uDAAQ,IAAI,kBAAkB,IAAI,IAAI,GAAG,GAAG,GAAG;AAClwB;AACA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;;;;ACxBiB;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClC0C;AACgB;AAC4B;AACvB;AACd;AACI;AACmB;AACjC;AACS;AACP;AACM;AACU;AAClB;AACR;AACxB,4BAA4B,oDAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,+DAAW;AAC3C,eAAe,yEAAgB,EAAE,2DAAS,EAAE,oEAAe;AAC3D;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA,4BAA4B,+DAAa;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,iDAAK;AAC5B,qBAAqB;AACrB,qBAAqB;AACrB,yBAAyB;AACzB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oCAAoC,0DAAoB;AACxD,mCAAmC,gEAAc,GAAG,SAAS;AAC7D;AACA,oCAAoC,6FAAI;AACxC;AACA;AACA;AACA,SAAS;AACT;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,QAAQ,qDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,kGAAkG,OAAO;AACzG,SAAS;AACT;AACA;AACA;AACA;AACA,iEAAe;AACf;AACA,IAAI,qDAAU;AACd,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;ACpGsD;AACR;AACL;AACpC;AACP,wBAAwB,WAAW;AACnC;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA,qDAAqD;AACrD,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,+EAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAe;AAC1C,0BAA0B,mEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,+DAAY;AAC5E;AACA;AACA;AACA;AACA,8BAA8B,+DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAsB,+DAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAY;AACjC;AACA;AACA,wBAAwB,mEAAgB;AACxC;AACA;AACA;AACA;AACA;AACA,+BAA+B,MAAM,EAAE,IAAI;AAC3C;AACA,+DAA+D,cAAc;AAC7E,kCAAkC,+DAAY;AAC9C;AACA;AACA;AACA,yDAAyD,UAAU,GAAG,IAAI;AAC1E,+BAA+B,KAAK,EAAE,IAAI;AAC1C;AACA,gCAAgC,UAAU,GAAG,IAAI;AACjD,yDAAyD,cAAc;AACvE,kCAAkC,+DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uCAAuC,mEAAgB,UAAU,iBAAiB;AAClF;AACA;AACA,wBAAwB,YAAY;AACpC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mEAAgB;AAClE;AACA,aAAa;AACb;AACA;AACA,wDAAwD,mEAAgB;AACxE;AACA,SAAS;AACT,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAe;AAC1C;AACA;AACA,wBAAwB,kEAAe;AACvC;AACA,6BAA6B,+CAA+C,QAAQ,IAAI;AACxF;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA,wBAAwB,+DAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+DAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mEAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mEAAgB;AAC7C;AACA;AACA,qEAAqE,cAAc;AACnF;AACA,kCAAkC,+DAAY,yBAAyB,+DAAY;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAM;AAC7B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvV+G;AACvC;AACT;AACO;AACa;AACzC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,gEAAW;AAC/C,eAAe,yEAAgB,EAAE,wEAAsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,oBAAoB;AACpC;AACA,0BAA0B,mDAAe;AACzC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,+DAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAU,UAAU,0EAAoB,wFAAwF,mEAAc;AAC1J;AACA,gDAAgD,+DAAa;AAC7D,0BAA0B,iEAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,gGAAgG,6DAAQ;AACxG;AACA;AACA,aAAa;AACb;AACA,iCAAiC,2EAAgB;AACjD;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,wCAAwC,0BAA0B;AAClE;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;ACrFiD;AACpB;AACa;AAC/B;AAC1B,mCAAmC,6DAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAI,CAAC,uDAAS,IAAI,UAAU,sDAAI,CAAC,gDAAO,IAAI,+DAA+D,iFAA2B,aAAa,GAAG;AACtK;AACA;;;;;;;;;;;;;;;;;;;;;;AClBkD;AACR;AACJ;AAC/B;AACP;AACA;AACA,QAAQ,wDAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,CAAC;AACM,sBAAsB,oDAAQ,IAAI,WAAW,MAAM,uDAAK,aAAa,iGAAiG;;;;;;;;;;;;;;;;;;;ACnB5I;AAC1B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,iBAAiB,+CAAM;AAC9B;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,0BAA0B,0CAA0C;AACpE,KAAK;AACL;AACA,CAAC;AACD,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;;;;;;;AC1B8D;AACrD;AACgC;AACN;AAC3D;AACA,YAAY,UAAU;AACtB,0BAA0B,+CAAQ;AAClC,YAAY,uDAAK,CAAC,uDAAS,IAAI,WAAW,uDAAK,CAAC,qDAAQ,IAAI,kEAAkE,sDAAI,CAAC,qDAAK,IAAI,MAAM,eAAe,qBAAqB,IAAI,GAAG,sDAAI,CAAC,qDAAG,IAAI,UAAU,sDAAI,CAAC,qDAAI,IAAI,0CAA0C,GAAG,GAAG,sDAAI,CAAC,qDAAG,IAAI,yBAAyB,sDAAI,UAAU,yHAAyH,iBAAiB,MAAM,sDAAI,CAAC,mEAAY,IAAI,wCAAwC,IAAI,GAAG,sDAAI,CAAC,qDAAG,IAAI,UAAU,sDAAI,CAAC,qDAAI,IAAI,4FAA4F,sDAAI,CAAC,qDAAI,IAAI,2DAA2D,GAAG,GAAG,GAAG,sDAAI,CAAC,qDAAG,IAAI,UAAU,sDAAI,CAAC,qDAAI,IAAI,kFAAkF,sDAAI,CAAC,qDAAI,IAAI,mCAAmC,GAAG,GAAG,IAAI;AACt5B;AACA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;;;;;;;ACT8D;AAC1C;AACF;AACc;AACL;AAC5C;AACP,wCAAwC,+CAAQ;AAChD,IAAI,gDAAS;AACb,QAAQ,+DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,kGAAkG,OAAO;AACzG,SAAS;AACT,KAAK;AACL,YAAY,sDAAI,CAAC,uDAAS,IAAI,UAAU,sDAAI,CAAC,qDAAG,IAAI,UAAU,uDAAK,CAAC,iEAAe,IAAI,WAAW,sDAAI,CAAC,6DAAW,IAAI,4DAA4D,GAAG,sDAAI,CAAC,gEAAc,IAAI,6EAA6E,GAAG,sDAAI,CAAC,2DAAS,IAAI;AAC9S;AACA;AACA;AACA,mDAAmD,sDAAI,CAAC,qDAAI,IAAI,4BAA4B;AAC5F,6BAA6B;AAC7B;AACA;AACA;AACA,mDAAmD,sDAAI,CAAC,qDAAI,IAAI,kBAAkB;AAClF,6BAA6B;AAC7B;AACA;AACA;AACA,mDAAmD,sDAAI,CAAC,qDAAI,IAAI,uBAAuB;AACvF,6BAA6B;AAC7B,2BAA2B,IAAI,GAAG,GAAG;AACrC;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;;ACxCwB;AAChB;AACM;AACjC;AACP,YAAY,sCAAsC,EAAE,0DAAQ;AAC5D,IAAI,gDAAS;AACb;AACA;AACA,SAAS;AACT,KAAK;AACL,YAAY,uDAAK,aAAa,8EAA8E;AAC5G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA,MAAyI;AACzI,MAA+H;AAC/H,MAAsI;AACtI,MAAyJ;AACzJ,MAAkJ;AAClJ,MAAkJ;AAClJ,MAA6I;AAC7I;AACA;;AAEA;;AAEA,4BAA4B,qIAAmB;AAC/C,wBAAwB,kJAAa;;AAErC,uBAAuB,uIAAa;AACpC;AACA,iBAAiB,+HAAM;AACvB,6BAA6B,sIAAkB;;AAE/C,aAAa,0IAAG,CAAC,sHAAO;;;;AAIuF;AAC/G,OAAO,iEAAe,sHAAO,IAAI,6HAAc,GAAG,6HAAc,YAAY,EAAC","sources":["webpack://@datalayer/jupyter-content/./style/base.css","webpack://@datalayer/jupyter-content/./style/index.css","webpack://@datalayer/jupyter-content/./lib/Content.js","webpack://@datalayer/jupyter-content/./lib/jupyterlab/handler.js","webpack://@datalayer/jupyter-content/./lib/jupyterlab/index.js","webpack://@datalayer/jupyter-content/./lib/jupyterlab/local-drive/drive.js","webpack://@datalayer/jupyter-content/./lib/jupyterlab/local-drive/index.js","webpack://@datalayer/jupyter-content/./lib/jupyterlab/widget.js","webpack://@datalayer/jupyter-content/./lib/state/mobx.js","webpack://@datalayer/jupyter-content/./lib/state/zustand.js","webpack://@datalayer/jupyter-content/./lib/tabs/AboutTab.js","webpack://@datalayer/jupyter-content/./lib/tabs/ContentTab.js","webpack://@datalayer/jupyter-content/./lib/timer/TimerView.js","webpack://@datalayer/jupyter-content/./style/index.css?bd75"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  overflow-y: visible;\\n}\\n\\n.dla-Container {\\n  overflow-y: auto !important;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/base.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,mBAAmB;AACrB;;AAEA;EACE,2BAA2B;AAC7B\",\"sourcesContent\":[\"body {\\n  overflow-y: visible;\\n}\\n\\n.dla-Container {\\n  overflow-y: auto !important;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/cjs.js!./base.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { ThemeProvider, BaseStyles, Box } from '@primer/react';\nimport { UnderlineNav } from '@primer/react/drafts';\nimport { BriefcaseIcon } from '@datalayer/icons-react';\nimport { requestAPI } from './jupyterlab/handler';\nimport useStore from './state/zustand';\nimport ContentTab from './tabs/ContentTab';\nimport AboutTab from './tabs/AboutTab';\nconst JupyterContent = (props) => {\n    const { setTab, getIntTab } = useStore();\n    const intTab = getIntTab();\n    const [version, setVersion] = useState('');\n    useEffect(() => {\n        requestAPI('config')\n            .then(data => {\n            setVersion(data.version);\n        })\n            .catch(reason => {\n            console.error(`Error while accessing the jupyter server jupyter_content extension.\\n${reason}`);\n        });\n    }, []);\n    return (_jsx(_Fragment, { children: _jsx(ThemeProvider, { children: _jsx(BaseStyles, { children: _jsxs(Box, { children: [_jsx(Box, { children: _jsxs(UnderlineNav, { \"aria-label\": \"content\", children: [_jsx(UnderlineNav.Item, { \"aria-label\": \"content-content\", \"aria-current\": intTab === 0 ? \"page\" : undefined, onSelect: e => { e.preventDefault(); setTab(0.0); }, children: \"Content\" }), _jsx(UnderlineNav.Item, { \"aria-label\": \"content-about\", \"aria-current\": intTab === 1 ? \"page\" : undefined, icon: () => _jsx(BriefcaseIcon, { colored: true }), onSelect: e => { e.preventDefault(); setTab(1.0); }, children: \"About\" })] }) }), _jsxs(Box, { m: 3, children: [intTab === 0 && _jsx(ContentTab, {}), intTab === 1 && _jsx(AboutTab, { version: version })] })] }) }) }) }));\n};\nexport default JupyterContent;\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyter_content', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { Token } from '@lumino/coreutils';\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { MainAreaWidget, ICommandPalette, WidgetTracker } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IJupyterIAM } from '@datalayer/jupyter-iam';\nimport icon from '@datalayer/icons-react/data2/BriefcaseIconJupyterLab';\nimport { requestAPI } from './handler';\nimport { JupyterContentWidget } from './widget';\nimport { Timer } from \"../state/zustand\";\nimport { TimerView } from \"../timer/TimerView\";\nimport { mobxTimer, MobxTimerView } from \"../state/mobx\";\nimport localDrive from './local-drive';\nimport '../../style/index.css';\nexport const IJupyterContent = new Token('@datalayer/jupyter-content:plugin');\n/**\n * The command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.create = 'create-jupyter-content-widget';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the @datalayer/jupyter-content extension.\n */\nconst contentPlugin = {\n    id: '@datalayer/jupyter-content:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, IJupyterIAM],\n    optional: [ISettingRegistry, ILauncher, ILayoutRestorer],\n    provides: IJupyterContent,\n    activate: (app, palette, jupyterIAM, settingRegistry, launcher, restorer) => {\n        const { commands } = app;\n        const command = CommandIDs.create;\n        const tracker = new WidgetTracker({\n            namespace: 'jupyter-content',\n        });\n        if (restorer) {\n            void restorer.restore(tracker, {\n                command,\n                name: () => 'jupyter-content',\n            });\n        }\n        const jupyterContent = {\n            timer: new Timer(),\n            TimerView,\n            mobxTimer,\n            MobxTimerView,\n        };\n        commands.addCommand(command, {\n            caption: 'Show Jupyter Content',\n            label: 'Jupyter Content',\n            icon,\n            execute: () => {\n                const content = new JupyterContentWidget(app, jupyterIAM, jupyterContent);\n                const widget = new MainAreaWidget({ content });\n                widget.title.label = 'Jupyter Content';\n                widget.title.icon = icon;\n                app.shell.add(widget, 'main');\n                tracker.add(widget);\n            }\n        });\n        const category = 'Datalayer';\n        palette.addItem({ command, category });\n        const settingsUpdated = (settings) => {\n            const showInLauncher = settings.get('showInLauncher').composite;\n            if (launcher && showInLauncher) {\n                launcher.add({\n                    command,\n                    category,\n                    rank: 5.1,\n                });\n            }\n        };\n        if (settingRegistry) {\n            settingRegistry\n                .load(contentPlugin.id)\n                .then(settings => {\n                console.log('@datalayer/jupyter-content settings loaded:', settings.composite);\n                settingsUpdated(settings);\n                settings.changed.connect(settingsUpdated);\n            })\n                .catch(reason => {\n                console.error('Failed to load settings for @datalayer/jupyter-content.', reason);\n            });\n        }\n        requestAPI('config')\n            .then(data => {\n            console.log(data);\n        })\n            .catch(reason => {\n            console.error(`Error while accessing the jupyter server jupyter_content extension.\\n${reason}`);\n        });\n        console.log('JupyterLab plugin @datalayer/jupyter-content:plugin is activated.');\n        return jupyterContent;\n    }\n};\nexport default [\n    contentPlugin,\n    localDrive,\n];\n","import { ServerConnection } from '@jupyterlab/services';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { Signal } from '@lumino/signaling';\nexport const DRIVE_NAME = 'FileSystem';\nconst DRIVE_PREFIX = `${DRIVE_NAME}:`;\nfunction arrayBufferToBase64(buffer) {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n}\nfunction base64DecodeAsBlob(text, type = 'text/plain;charset=UTF-8') {\n    return fetch(`data:${type};base64,` + text).then(response => response.blob());\n}\nasync function toArray(asyncIterator) {\n    const arr = [];\n    for await (const i of asyncIterator) {\n        arr.push(i);\n    }\n    return arr;\n}\nexport class FileSystemDrive {\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    get name() {\n        return DRIVE_NAME;\n    }\n    get serverSettings() {\n        return ServerConnection.makeSettings();\n    }\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    get rootHandle() {\n        return this._rootHandle;\n    }\n    set rootHandle(handle) {\n        this._rootHandle = handle;\n    }\n    async get(path, options) {\n        path = this.cleanPath(path);\n        const root = this._rootHandle;\n        if (!root) {\n            return {\n                name: '',\n                path: '',\n                created: new Date().toISOString(),\n                last_modified: new Date().toISOString(),\n                format: null,\n                mimetype: '',\n                content: null,\n                writable: true,\n                type: 'directory'\n            };\n        }\n        const parentHandle = await this.getParentHandle(path);\n        const parentPath = PathExt.dirname(path);\n        const localPath = PathExt.basename(path);\n        let localHandle;\n        if (localPath) {\n            localHandle = await this.getHandle(parentHandle, localPath);\n        }\n        else {\n            localHandle = parentHandle;\n        }\n        if (localHandle.kind === 'file') {\n            return this.getFileModel(localHandle, parentPath, true);\n        }\n        else {\n            const content = [];\n            for await (const value of localHandle.values()) {\n                if (value.kind === 'file') {\n                    content.push(await this.getFileModel(value, PathExt.join(parentPath, localPath)));\n                }\n                else {\n                    content.push({\n                        name: value.name,\n                        path: PathExt.join(parentPath, localPath, value.name),\n                        created: '',\n                        last_modified: '',\n                        format: null,\n                        mimetype: '',\n                        content: null,\n                        writable: true,\n                        type: 'directory'\n                    });\n                }\n            }\n            return {\n                name: localPath,\n                path: PathExt.join(parentPath, localPath),\n                last_modified: '',\n                created: '',\n                format: null,\n                mimetype: '',\n                content,\n                size: undefined,\n                writable: true,\n                type: 'directory'\n            };\n        }\n    }\n    async getDownloadUrl(path) {\n        throw new Error('Method not implemented.');\n    }\n    async newUntitled(options) {\n        let parentPath = '';\n        if (options && options.path) {\n            parentPath = this.cleanPath(options.path);\n        }\n        const type = options?.type || 'directory';\n        const path = PathExt.join(parentPath, type === 'directory' ? 'Untitled Folder' : 'untitled');\n        const ext = options?.ext || 'txt';\n        const parentHandle = await this.getParentHandle(path);\n        let localPath = PathExt.basename(path);\n        const name = localPath;\n        let data;\n        if (type === 'directory') {\n            let i = 1;\n            while (await this.hasHandle(parentHandle, localPath)) {\n                localPath = `${name} ${i++}`;\n            }\n            await parentHandle.getDirectoryHandle(localPath, { create: true });\n            data = await this.get(PathExt.join(parentPath, localPath));\n        }\n        else {\n            let i = 1;\n            while (await this.hasHandle(parentHandle, `${localPath}.${ext}`)) {\n                localPath = `${name}${i++}`;\n            }\n            const filename = `${localPath}.${ext}`;\n            await parentHandle.getFileHandle(filename, { create: true });\n            data = await this.get(PathExt.join(parentPath, filename));\n        }\n        this._fileChanged.emit({\n            type: 'new',\n            oldValue: null,\n            newValue: data\n        });\n        return data;\n    }\n    async delete(path) {\n        path = this.cleanPath(path);\n        const parentHandle = await this.getParentHandle(path);\n        await parentHandle.removeEntry(PathExt.basename(path), { recursive: true });\n        this._fileChanged.emit({\n            type: 'delete',\n            oldValue: { path: path },\n            newValue: null\n        });\n    }\n    async rename(oldPath, newPath) {\n        // Best effort, we are lacking proper APIs for renaming\n        oldPath = this.cleanPath(oldPath);\n        newPath = this.cleanPath(newPath);\n        await this.doCopy(oldPath, newPath);\n        await this.delete(oldPath);\n        const data = this.get(newPath);\n        data.then(model => {\n            this._fileChanged.emit({\n                type: 'rename',\n                oldValue: { path: oldPath },\n                newValue: model\n            });\n        });\n        return data;\n    }\n    async save(path, options) {\n        path = this.cleanPath(path);\n        const parentHandle = await this.getParentHandle(path);\n        if (options?.type === 'directory') {\n            await parentHandle.getDirectoryHandle(PathExt.basename(path), {\n                create: true\n            });\n            return this.get(path);\n        }\n        const handle = await parentHandle.getFileHandle(PathExt.basename(path), {\n            create: true\n        });\n        const writable = await handle.createWritable({});\n        const format = options?.format;\n        const content = options?.content;\n        if (format === 'json') {\n            const data = JSON.stringify(content, null, 2);\n            await writable.write(data);\n        }\n        else if (format === 'base64') {\n            const contentBlob = await base64DecodeAsBlob(content);\n            await writable.write(contentBlob);\n        }\n        else {\n            await writable.write(content);\n        }\n        await writable.close();\n        return this.get(path);\n    }\n    async copy(path, toLocalDir) {\n        // Best effort, we are lacking proper APIs for copying\n        path = this.cleanPath(path);\n        const toCopy = await this.get(path);\n        const parentPath = PathExt.dirname(path);\n        let newName = toCopy.name;\n        if (parentPath === toLocalDir) {\n            const ext = PathExt.extname(toCopy.name);\n            if (ext) {\n                newName = `${newName.slice(0, newName.length - ext.length)} (Copy)${ext}`;\n            }\n            else {\n                newName = `${newName} (Copy)`;\n            }\n        }\n        const newPath = PathExt.join(toLocalDir, newName);\n        await this.doCopy(path, newPath);\n        return this.get(newPath);\n    }\n    async createCheckpoint(path) {\n        return {\n            id: 'test',\n            last_modified: new Date().toISOString()\n        };\n    }\n    async listCheckpoints(path) {\n        return [\n            {\n                id: 'test',\n                last_modified: new Date().toISOString()\n            }\n        ];\n    }\n    restoreCheckpoint(path, checkpointID) {\n        return Promise.resolve(void 0);\n    }\n    deleteCheckpoint(path, checkpointID) {\n        return Promise.resolve(void 0);\n    }\n    async getParentHandle(path) {\n        const root = this._rootHandle;\n        if (!root) {\n            throw new Error('No root file handle');\n        }\n        let parentHandle = root;\n        for (const subPath of path.split('/').slice(0, -1)) {\n            parentHandle = await parentHandle.getDirectoryHandle(subPath);\n        }\n        return parentHandle;\n    }\n    async getHandle(parentHandle, localPath) {\n        const content = await toArray(parentHandle.values());\n        const matches = content.filter(element => element.name === localPath);\n        if (matches.length) {\n            return matches[0];\n        }\n        throw new Error(`${localPath} does not exist.`);\n    }\n    async hasHandle(parentHandle, localPath) {\n        const content = await toArray(parentHandle.values());\n        const matches = content.filter(element => element.name === localPath);\n        return Boolean(matches.length);\n    }\n    async getFileModel(handle, path, content) {\n        const file = await handle.getFile();\n        let format;\n        let fileContent = null;\n        // We assume here image, audio and video mimetypes are all and only binary files we'll encounter\n        if (file.type &&\n            file.type.split('/') &&\n            ['image', 'audio', 'video'].includes(file.type.split('/')[0])) {\n            format = 'base64';\n        }\n        else {\n            format = 'text';\n        }\n        if (content) {\n            if (format === 'base64') {\n                fileContent = arrayBufferToBase64(await file.arrayBuffer());\n            }\n            else {\n                fileContent = await file.text();\n            }\n        }\n        return {\n            name: file.name,\n            path: PathExt.join(path, file.name),\n            created: new Date(file.lastModified).toISOString(),\n            last_modified: new Date(file.lastModified).toISOString(),\n            format,\n            content: fileContent,\n            writable: true,\n            type: 'file',\n            mimetype: file.type\n        };\n    }\n    async doCopy(oldPath, newPath) {\n        // Best effort, we are lacking proper APIs for copying\n        const oldParentHandle = await this.getParentHandle(oldPath);\n        const oldLocalPath = PathExt.basename(oldPath);\n        let oldHandle;\n        if (oldLocalPath) {\n            oldHandle = await this.getHandle(oldParentHandle, oldLocalPath);\n        }\n        else {\n            oldHandle = oldParentHandle;\n        }\n        const newParentHandle = await this.getParentHandle(newPath);\n        const newLocalPath = PathExt.basename(newPath);\n        if (oldHandle.kind === 'directory') {\n            // If it's a directory, create directory, then doCopy for the directory content\n            await newParentHandle.getDirectoryHandle(newLocalPath, { create: true });\n            for await (const content of oldHandle.values()) {\n                await this.doCopy(PathExt.join(oldPath, content.name), PathExt.join(newPath, content.name));\n            }\n        }\n        else {\n            // If it's a file, copy the file content\n            const newFileHandle = await newParentHandle.getFileHandle(newLocalPath, {\n                create: true\n            });\n            const writable = await newFileHandle.createWritable({});\n            const file = await oldHandle.getFile();\n            const data = await file.arrayBuffer();\n            writable.write(data);\n            await writable.close();\n        }\n    }\n    cleanPath(path) {\n        if (path.includes(DRIVE_PREFIX)) {\n            return path.replace(DRIVE_PREFIX, '');\n        }\n        return path;\n    }\n    _isDisposed = false;\n    _fileChanged = new Signal(this);\n    _rootHandle = null;\n}\n","import { createToolbarFactory, setToolbar, IToolbarWidgetRegistry, ToolbarButton } from '@jupyterlab/apputils';\nimport { IFileBrowserFactory, Uploader } from '@jupyterlab/filebrowser';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { listIcon, folderIcon, FilenameSearcher } from '@jupyterlab/ui-components';\nimport { FileSystemDrive } from './drive';\n/**\n * The file system access factory\n */\nconst FILE_SYSTEM_ACCESS_FACTORY = 'FileSystemAccess';\n/**\n * The class name added to the filebrowser filterbox node.\n */\nconst FILTERBOX_CLASS = 'jp-FileBrowser-filterBox';\n/**\n * Initialization data for the jupyterlab-filesystem-access extension.\n */\nconst plugin = {\n    id: '@datalayer/jupyter-kernels:local-drive',\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [ISettingRegistry, IToolbarWidgetRegistry],\n    autoStart: true,\n    activate: (app, browser, translator, settingRegistry, toolbarRegistry) => {\n        const showDirectoryPicker = window.showDirectoryPicker;\n        if (!showDirectoryPicker) {\n            // bail if the browser does not support the File System API\n            console.warn('The File System Access APII is not supported in this browser.');\n            return;\n        }\n        const { serviceManager } = app;\n        const { createFileBrowser } = browser;\n        const trans = translator.load('jupyterlab-filesystem-access');\n        const drive = new FileSystemDrive();\n        serviceManager.contents.addDrive(drive);\n        const widget = createFileBrowser('jp-filesystem-browser', {\n            driveName: drive.name,\n            // We don't want to restore old state, we don't have a drive handle ready\n            restore: false\n        });\n        widget.title.caption = trans.__('Local File System');\n        widget.title.icon = listIcon;\n        // set some defaults for now\n        widget.showFileCheckboxes = false;\n        const toolbar = widget.toolbar;\n        toolbar.id = 'jp-filesystem-toolbar';\n        if (toolbarRegistry && settingRegistry) {\n            // Set toolbar\n            setToolbar(toolbar, createToolbarFactory(toolbarRegistry, settingRegistry, FILE_SYSTEM_ACCESS_FACTORY, plugin.id, translator ?? nullTranslator), toolbar);\n            toolbarRegistry.addFactory(FILE_SYSTEM_ACCESS_FACTORY, 'open-folder', (browser) => {\n                const openDirectoryButton = new ToolbarButton({\n                    icon: folderIcon,\n                    onClick: async () => {\n                        const directoryHandle = await showDirectoryPicker();\n                        if (directoryHandle) {\n                            drive.rootHandle = directoryHandle;\n                            // Go to root directory\n                            widget.model.cd('/');\n                        }\n                    },\n                    tooltip: trans.__('Open a new folder')\n                });\n                return openDirectoryButton;\n            });\n            toolbarRegistry.addFactory(FILE_SYSTEM_ACCESS_FACTORY, 'uploader', (browser) => new Uploader({\n                model: widget.model,\n                translator\n            }));\n            toolbarRegistry.addFactory(FILE_SYSTEM_ACCESS_FACTORY, 'filename-searcher', (browser) => {\n                const searcher = FilenameSearcher({\n                    updateFilter: (filterFn, query) => {\n                        widget.model.setFilter(value => {\n                            return filterFn(value.name.toLowerCase());\n                        });\n                    },\n                    useFuzzyFilter: true,\n                    placeholder: trans.__('Filter files by name'),\n                    forceRefresh: false\n                });\n                searcher.addClass(FILTERBOX_CLASS);\n                return searcher;\n            });\n        }\n        app.shell.add(widget, 'left', { type: 'FileSystemAccess' });\n    }\n};\nexport default plugin;\n","import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { JupyterLabAppAdapter } from '@datalayer/jupyter-react';\nimport Content from '../Content';\nexport class JupyterContentWidget extends ReactWidget {\n    _app;\n    _jupyterIAM;\n    _jupyterContent;\n    constructor(app, jupyterIAM, jupyterContent) {\n        super();\n        this._app = app;\n        this._jupyterIAM = jupyterIAM;\n        this._jupyterContent = jupyterContent;\n        this.addClass('dla-Container');\n    }\n    render() {\n        return (_jsx(_Fragment, { children: _jsx(Content, { iam: this._jupyterIAM, content: this._jupyterContent, adapter: JupyterLabAppAdapter.create(this._app) }) }));\n    }\n}\n","import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { makeAutoObservable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nexport class MobxTimer {\n    secondsPassed = 0;\n    constructor() {\n        makeAutoObservable(this);\n    }\n    reset() {\n        this.secondsPassed = 0;\n    }\n    increaseTimer() {\n        this.secondsPassed += 1;\n    }\n}\nexport const mobxTimer = new MobxTimer();\nsetInterval(() => {\n    mobxTimer.increaseTimer();\n}, 1000);\nexport const MobxTimerView = observer(({ mobxTimer }) => (_jsxs(\"button\", { onClick: () => mobxTimer.reset(), children: [\"Jupyter Content Mobx: \", mobxTimer.secondsPassed] })));\n","import { create } from 'zustand';\nexport class Timer {\n    _secondsPassed = 0;\n    constructor() {\n    }\n    reset() {\n        this._secondsPassed = 0;\n    }\n    increaseTimer() {\n        this._secondsPassed += 1;\n    }\n    get secondsPassed() {\n        return this._secondsPassed;\n    }\n}\nexport const useStore = create((set, get) => ({\n    tab: 0.0,\n    getIntTab: () => Math.floor(get().tab),\n    setTab: (tab) => set((state) => ({ tab })),\n    timer: new Timer(),\n    increaseTimer: () => {\n        get().timer.increaseTimer();\n        set((state) => ({ secondsPassed: get().timer.secondsPassed }));\n    },\n    secondsPassed: 0,\n}));\nexport default useStore;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Pagehead, Label, Text, Link, Box } from '@primer/react';\nimport { ECharlesIcon } from '@datalayer/icons-react/eggs';\nconst AboutTab = (props) => {\n    const { version } = props;\n    const [egg, setEgg] = useState(false);\n    return (_jsxs(_Fragment, { children: [_jsxs(Pagehead, { as: \"h2\", children: [\"\\uD83E\\uDE90 \\uD83D\\uDCBC Jupyter Content\", _jsx(Label, { sx: { marginLeft: 1 }, children: version })] }), _jsx(Box, { children: _jsx(Text, { children: \"Manage Content from Jupyter.\" }) }), _jsx(Box, { mt: 3, children: !egg ? (_jsx(\"img\", { src: \"https://assets.datalayer.tech/releases/datalayer-0.3.0-black-snake_1024.png\", onClick: e => setEgg(true), style: { width: '100%' } })) : (_jsx(ECharlesIcon, { size: 300, onClick: e => setEgg(false) })) }), _jsx(Box, { children: _jsx(Link, { href: \"https://datalayer.tech/docs/releases/0.3.0-black-snake\", target: \"_blank\", children: _jsx(Text, { as: \"h4\", children: \"Datalayer 0.3.0 Black Snake Release\" }) }) }), _jsx(Box, { children: _jsx(Link, { href: \"https://github.com/datalayer/jupyter-content\", target: \"_blank\", children: _jsx(Text, { as: \"h4\", children: \"Source code\" }) }) })] }));\n};\nexport default AboutTab;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { Box, Text } from '@primer/react';\nimport { Table, DataTable } from '@primer/react/drafts';\nimport { requestAPI } from '../jupyterlab/handler';\nexport const ContentTab = () => {\n    const [containers, setContainers] = useState(new Array());\n    useEffect(() => {\n        requestAPI('containers')\n            .then(data => {\n            const containers = data.containers.map((container, id) => {\n                return {\n                    id,\n                    ...container,\n                };\n            });\n            setContainers(containers);\n        })\n            .catch(reason => {\n            console.error(`Error while accessing the jupyter server jupyter_content extension.\\n${reason}`);\n        });\n    }, []);\n    return (_jsx(_Fragment, { children: _jsx(Box, { children: _jsxs(Table.Container, { children: [_jsx(Table.Title, { as: \"h2\", id: \"containers\", children: \"Content containers\" }), _jsx(Table.Subtitle, { as: \"p\", id: \"containers-subtitle\", children: \"List of Content containers.\" }), _jsx(DataTable, { \"aria-labelledby\": \"containers\", \"aria-describedby\": \"containers-subtitle\", data: containers, columns: [\n                            {\n                                header: 'Image',\n                                field: 'Config.Image',\n                                renderCell: row => _jsx(Text, { children: row.Config.Image })\n                            },\n                            {\n                                header: 'Id',\n                                field: 'Id',\n                                renderCell: row => _jsx(Text, { children: row.Id })\n                            },\n                            {\n                                header: 'Created',\n                                field: 'Created',\n                                renderCell: row => _jsx(Text, { children: row.Created })\n                            },\n                        ] })] }) }) }));\n};\nexport default ContentTab;\n","import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport useStore from '../state/zustand';\nexport const TimerView = () => {\n    const { timer, increaseTimer, secondsPassed } = useStore();\n    useEffect(() => {\n        setInterval(() => {\n            increaseTimer();\n        }, 1000);\n    }, []);\n    return (_jsxs(\"button\", { onClick: () => timer.reset(), children: [\"Jupyter Content: \", secondsPassed] }));\n};\n","\n      import API from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/cjs.js!./index.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/cjs.js!./index.css\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":[],"sourceRoot":""}