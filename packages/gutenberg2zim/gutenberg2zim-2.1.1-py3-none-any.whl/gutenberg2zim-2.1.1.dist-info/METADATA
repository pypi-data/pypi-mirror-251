Metadata-Version: 2.1
Name: gutenberg2zim
Version: 2.1.1
Summary: Make ZIM file from Gutenberg books
Project-URL: Homepage, https://github.com/openzim/kolibri
Project-URL: Donate, https://www.kiwix.org/en/support-us/
Author-email: Kiwix <dev@kiwix.org>
License: GPL-3.0-or-later
License-File: LICENSE
Keywords: gutenberg,kiwix,offline,zim
Classifier: License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Requires-Python: <3.12,>=3.11
Requires-Dist: apsw==3.40.0.0
Requires-Dist: babel==2.11.0
Requires-Dist: backoff==2.2.1
Requires-Dist: beautifulsoup4==4.9.3
Requires-Dist: chardet==5.1.0
Requires-Dist: docopt==0.6.2
Requires-Dist: jinja2==3.1.2
Requires-Dist: kiwixstorage==0.8.3
Requires-Dist: lxml==4.9.2
Requires-Dist: path-py==12.5.0
Requires-Dist: peewee==3.15.4
Requires-Dist: pif==0.8.2
Requires-Dist: requests==2.31.0
Requires-Dist: schedule==1.1.0
Requires-Dist: zimscraperlib==2.1.0
Provides-Extra: check
Requires-Dist: pyright==1.1.323; extra == 'check'
Provides-Extra: dev
Requires-Dist: debugpy==1.6.7; extra == 'dev'
Requires-Dist: gutenberg2zim[check]; extra == 'dev'
Requires-Dist: gutenberg2zim[lint]; extra == 'dev'
Requires-Dist: gutenberg2zim[scripts]; extra == 'dev'
Requires-Dist: gutenberg2zim[test]; extra == 'dev'
Requires-Dist: hatchling==1.18.0; extra == 'dev'
Requires-Dist: ipdb==0.13.13; extra == 'dev'
Requires-Dist: ipython==8.14.0; extra == 'dev'
Requires-Dist: pre-commit==3.3.3; extra == 'dev'
Provides-Extra: lint
Requires-Dist: black==23.7.0; extra == 'lint'
Requires-Dist: ruff==0.0.280; extra == 'lint'
Provides-Extra: scripts
Requires-Dist: invoke==2.2.0; extra == 'scripts'
Provides-Extra: test
Requires-Dist: coverage==7.3.0; extra == 'test'
Requires-Dist: pytest==7.4.0; extra == 'test'
Description-Content-Type: text/x-rst

=============
gutenberg2zim
=============

A scraper that downloads the whole repository of [Project Gutenberg]
(http://www.gutenberg.org) and puts it into a locally browsable
directory and then in a ZIM file (http://www.openzim.org), a clean and
user friendly format for storing content for offline usage.

------------
Dependencies
------------

Ubuntu/debian
-------------

.. code-block:: sh

    python-pip python-dev libxml2-dev libxslt-dev advancecomp jpegoptim pngquant p7zip-full gifsicle


macOS
-----

.. code-block:: sh

    brew install advancecomp jpegoptim pngquant p7zip gifsicle

------
Usage
------

.. code-block:: sh

	gutenberg2zim

By default (no argument), it runs all the steps: download, parse, export and zim.


.. code-block:: sh
    
	-h --help                       Display this help message
	-y --wipe-db                    Do not wipe the DB during parse stage
	-F --force                      Redo step even if target already exist

	-l --languages=<list>           Comma-separated list of lang codes to filter export to (preferably ISO 639-1, else ISO 639-3)
	-f --formats=<list>             Comma-separated list of formats to filter export to (epub, html, pdf, all)

	-m --mirror=<url>               Use URL as base for all downloads.
	-r --rdf-folder=<folder>        Don't download rdf-files.tar.bz2 and use extracted folder instead
	-e --static-folder=<folder>     Use-as/Write-to this folder static HTML
	-z --zim-file=<file>            Write ZIM into this file path
	-t --zim-title=<title>          Set ZIM title
	-n --zim-desc=<description>     Set ZIM description
	-d --dl-folder=<folder>         Folder to use/write-to downloaded ebooks
	-u --rdf-url=<url>              Alternative rdf-files.tar.bz2 URL
	-b --books=<ids>                Execute the processes for specific books, separated by commas, or dashes for intervals
	-c --concurrency=<nb>           Number of concurrent process for download and parsing tasks

	-x --zim-title=<title>          Custom title for the ZIM file
	-q --zim-desc=<desc>            Custom description for the ZIM file

	--check                         Check dependencies
	--prepare                       Download & extract rdf-files.tar.bz2
	--parse                         Parse all RDF files and fill-up the DB
	--download                      Download ebooks based on filters
	--export                        Export downloaded content to zim-friendly static HTML
	--dev                           Exports *just* Home+JS+CSS files (overwritten by --zim step)
	--zim                           Create a ZIM file
