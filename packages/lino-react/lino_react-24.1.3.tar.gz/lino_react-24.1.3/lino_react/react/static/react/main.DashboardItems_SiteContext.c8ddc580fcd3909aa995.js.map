{"version":3,"file":"main.DashboardItems_SiteContext.c8ddc580fcd3909aa995.js","mappings":"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","sources":["webpack://lino_react/./lino_react/react/components/DataProvider.jsx","webpack://lino_react/./lino_react/react/components/DashboardItems.jsx"],"sourcesContent":["export const name = \"DataProvider\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as constants from './constants';\nimport { RegisterImportPool, Component } from \"./Base\";\n\nlet ex; const exModulePromises = ex = {\n    queryString: import(/* webpackChunkName: \"queryString_DataProvider\" */\"query-string\"),\n    AbortController: import(/* webpackChunkName: \"AbortController_DataProvider\" */\"abort-controller\"),\n    whatwgFetch: import(/* webpackChunkName: \"whatwgFetch_DataProvider\" */\"whatwg-fetch\"),\n    prProgressSpinner: import(/* webpackChunkName: \"prProgressSpinner_DataProvider\" */\"primereact/progressspinner\"),\n    lm: import(/* webpackChunkName: \"LoadingMask_DataProvider\" */\"./LoadingMask\"),\n}\nRegisterImportPool(ex);\n\n\nexport class DataProvider extends Component {\n    static requiredModules = [\n        'queryString', \"AbortController\", \"whatwgFetch\", \"prProgressSpinner\",\n        \"lm\"]\n\n    static iPool = ex;\n\n    static propTypes = {\n        endpoint: PropTypes.string.isRequired,\n        render: PropTypes.func.isRequired,\n        post_data: PropTypes.func,\n        hideLoading: PropTypes.bool,\n        useEverLoaded: PropTypes.bool,\n\n    };\n    static defaultProps = {\n        post_data: (data) => (data),\n        hideLoading: false,\n        useEverLoaded: false,\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            ...this.state,\n            data: [],\n            loaded: false,\n            placeholder: \"Loading...\"\n        };\n        this.reloadData = this.reloadData.bind(this);\n        this.reload = this.reloadData;\n    }\n\n    onReady() {\n        this.controller = new this.ex.AbortController.default();\n        this.reloadData();\n    }\n\n    componentWillUnmount() {\n        this.controller.abort();\n    }\n\n    reloadData() {\n        this.setState({loaded: false});\n        let query = {fmt: \"json\"}\n        window.App.add_su(query);\n        query[constants.URL_PARAM_LINO_VERSION] = window.App.state.site_data.revision_number;\n        query[constants.URL_PARAM_USER_LANGUAGE] = window.App.data.selectedLanguage || window.App.state.user_settings.lang;\n        this.ex.whatwgFetch.fetch(this.props.endpoint + `?${this.ex.queryString.default.stringify(query)}`, {\n            signal: this.controller.signal})\n            .then(response => {\n                if (response.status !== 200) {\n                    this.setState({placeholder: \"Something went wrong\"});\n                    return {status:response.status$} //\n                }\n                return response.json();\n            })\n            .then(data => {\n                this.props.post_data(data);\n                this.setState({data: data, loaded: true, everloaded: true});\n            }).catch(function(ex) {\n              if (ex.name === 'AbortError') {\n                console.log('request aborted', ex)\n              }\n            })\n    };\n\n    render() {\n        if (!this.state.ready) return null;\n        const {data, loaded, placeholder, everloaded} = this.state;\n        const {render} = this.props;\n        // const Comp = \"Table\";\n        // return loaded ? this.props.render(data, Comp) : <p>{placeholder}</p>;\n        if (everloaded && !loaded) {\n            // is loading with data, use loading mask\n            return <this.ex.lm.LoadingMask mask={true}>\n                {render(data)}\n            </this.ex.lm.LoadingMask>\n        }\n        else {\n            return <this.ex.lm.LoadingMask mask={false}>\n                {loaded || everloaded && this.props.useEverLoaded\n                    ? render(data) : this.props.hideLoading ? <div/> : <this.ex.prProgressSpinner.ProgressSpinner/>}\n            </this.ex.lm.LoadingMask>\n        }\n    }\n}\n","export const name = \"DashboardItems\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { RegisterImportPool, Component } from \"./Base\";\n\nimport { DataProvider } from \"./DataProvider\";\n\nlet ex; const exModulePromises = ex = {\n    prButton: import(/* webpackChunkName: \"prButton_DashboardItems\" */\"primereact/button\"),\n    lm: import(/* webpackChunkName: \"LoadingMask_DashboardItems\" */\"./LoadingMask\"),\n}\nRegisterImportPool(ex);\n\n\nexport class DashboardItems extends Component {\n    static requiredModules = [\"prButton\", \"lm\"];\n    static iPool = ex;\n    static propTypes = {\n        // dashboard_items: PropTypes.number.\n        user: PropTypes.string\n    };\n    static defaultProps = {\n        P: 0\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            ...this.state,\n            stamp: Date(),\n            unloaded: true,\n        };\n        // this.method = this.method.bind(this);\n        this.reloadData = this.reload;\n        this.onDataGet = this.onDataGet.bind(this)\n    }\n\n    // method() {return this.props.}\n\n    reload() {\n        // this.setState({ // Set new stamp forcing reloading of each DP\n        //     stamp:Date()\n        // });\n        Object.keys(window.App.rps).filter(k => k.includes(\"dashboard\")).forEach(d => {\n            window.App.rps[d].reload();\n        })\n    }\n\n    onDataGet(d) {\n        this.setState({\n            unloaded: false\n        })\n    }\n\n    renderDashboard(showReloadButton, rp) {\n        return (data) => {\n            if (data.version_mismatch && rp === \"dashboard-0\") {\n                window.App.reset(null, true);\n                return\n            }\n            if (data.html) {\n                return <div>\n                    {showReloadButton && <this.ex.prButton.Button icon={\"pi pi-refresh\"} style={{float:\"right\"}} onClick={() => {\n                        let dp = window.App.rps[rp];\n                        dp && dp.reload();\n                    }\n                    }/>}\n                    <div dangerouslySetInnerHTML={{__html: data.html}}></div>\n                </div>\n            }\n        }\n    }\n\n    render() {\n        if (!this.state.ready) return null;\n        const S = this.state;\n        const P = this.props;\n        let len = P.dashboard_items;\n        if (len === undefined) {\n            len = 0\n        }\n        // const Comp = \"Table\";\n        // return loaded ? this.props.render(data, Comp) : <p>{placeholder}</p>;\n        return <this.ex.lm.LoadingMask mask={S.unloaded} fillHeight={true} backgroundColor={\"\"}>\n            <DataProvider\n                ref={(el) => {\n                    window.App.setRpRef(el, `dashboard-main`)\n                }}\n                key={`${P.user}-${S.stamp}`}\n                endpoint={\"api/main_html\"}\n                useEverLoaded={true}\n                hideLoading={true}\n                post_data={this.onDataGet}\n                render={this.renderDashboard(false, `dashboard-main`)}\n            />\n            {[...Array(len).keys()].map(i =>\n                <DataProvider\n                    key={`${P.user}-${i}-${S.stamp}`}\n                    ref={(el) => {\n                        window.App.setRpRef(el, `dashboard-${i}`)\n                    }}\n                    endpoint={`dashboard/${i}`}\n                    post_data={this.onDataGet}\n                    hideLoading={true}\n                    render={this.renderDashboard(true, `dashboard-${i}`)}\n                />)\n            }\n        </this.ex.lm.LoadingMask>\n    }\n}\n"],"names":["ex","queryString","AbortController","whatwgFetch","prProgressSpinner","lm","RegisterImportPool","DataProvider","Component","constructor","super","this","state","data","loaded","placeholder","reloadData","bind","reload","onReady","controller","default","componentWillUnmount","abort","setState","query","fmt","window","App","add_su","constants","URL_PARAM_LINO_VERSION","site_data","revision_number","URL_PARAM_USER_LANGUAGE","selectedLanguage","user_settings","lang","fetch","props","endpoint","stringify","signal","then","response","status","status$","json","post_data","everloaded","catch","name","console","log","render","ready","_jsx","LoadingMask","mask","children","useEverLoaded","hideLoading","ProgressSpinner","requiredModules","iPool","propTypes","PropTypes","isRequired","defaultProps","prButton","DashboardItems","stamp","Date","unloaded","onDataGet","Object","keys","rps","filter","k","includes","forEach","d","renderDashboard","showReloadButton","rp","version_mismatch","html","_jsxs","Button","icon","style","float","onClick","dp","dangerouslySetInnerHTML","__html","reset","S","P","len","dashboard_items","undefined","fillHeight","backgroundColor","ref","el","setRpRef","user","Array","map","i"],"sourceRoot":""}