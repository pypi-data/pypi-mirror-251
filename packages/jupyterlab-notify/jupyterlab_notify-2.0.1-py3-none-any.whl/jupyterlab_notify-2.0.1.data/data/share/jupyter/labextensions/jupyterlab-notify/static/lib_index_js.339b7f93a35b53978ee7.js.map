{"version":3,"file":"lib_index_js.339b7f93a35b53978ee7.js","mappings":";;;;;;;;;;;;;;;AAIyC;AAEzC;;GAEG;AACH,MAAM,SAAS,GAAG,iCAAiC,CAAC;AACpD,MAAM,aAAa,GAAG,aAAa,CAAC;AACpC,mDAAmD;AACnD,MAAM,oBAAoB,GAAG;IAC3B,IAAI,EAAE,8BAA8B;CACrC,CAAC;AASF;;GAEG;AACH,MAAM,YAAa,SAAQ,mDAAM;IAC/B,YAAY,OAAqC;QAC/C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC;IACpC,CAAC;IAED,WAAW,CAAC,KAA6B;QACvC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAA+B,CAAC;QAE1E,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAqB,CAAC;QAE/C,6DAA6D;QAC7D,sEAAsE;QACtE,IAAI,QAAQ,CAAC,aAAa,CAAC,EAAE;YAC3B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QAED,6EAA6E;QAC7E,IACE,CAAC,QAAQ,CAAC,IAAI,KAAK,MAAM,IAAI,YAAY,CAAC,UAAU,KAAK,SAAS,CAAC;YACnE,YAAY,CAAC,UAAU,KAAK,SAAS,EACrC;YACA,yEAAyE;YACzE,kCAAkC;YAClC,YAAY,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBAC3C,KAAK,CACH,uBAAuB,GAAG,0DAA0D,CACrF,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,QAAQ,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC9B,2FAA2F;YAC3F,IAAI,YAAY,CAAC,UAAU,KAAK,SAAS,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;gBACrE,IAAI,YAAY,CAAC,OAAO,CAAC,KAAe,EAAE,oBAAoB,CAAC,CAAC;aACjE;iBAAM;gBACL,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,YAAY,QAAQ,CAAC,EAAE,kHAAkH,CAAC;aACjK;SACF;QAED,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;YAC5B,qHAAqH;YACrH,MAAM,YAAY,GAA2B,IAAI,CAAC,KAAK,CACrD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CACtB,CAAC;YACF,MAAM,eAAe,GAAG,YAAY,CAAC,IAAI,CACvC,IAAI,CAAC,SAAS,CACe,CAAC;YAChC,eAAe,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC;YACtC,yEAAyE;YACzE,qEAAqE;YACrE,8BAA8B;YAC9B,EAAE;YACF,uEAAuE;YACvE,4EAA4E;YAC5E,gEAAgE;YAChE,UAAU,CAAC,GAAG,EAAE;gBACd,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC9B,CAAC,EAAE,CAAC,CAAC,CAAC;SACP;QAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CAGF;AAED;;GAEG;AACH,MAAM,eAAe,GAAiC;IACpD,IAAI,EAAE,IAAI;IACV,SAAS,EAAE,CAAC,SAAS,CAAC;IACtB,cAAc,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,YAAY,CAAC,OAAO,CAAC;CACrD,CAAC;AAEF;;GAEG;AACH,MAAM,SAAS,GAA2B;IACxC,EAAE,EAAE,uBAAuB;IAC3B,eAAe;IACf,IAAI,EAAE,CAAC;IACP,QAAQ,EAAE,MAAM;CACjB,CAAC;AAEF,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;AAElD,iEAAe,SAAS,EAAC","sources":["webpack://jupyterlab-notify/./src/index.ts"],"sourcesContent":["import { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport { JSONObject } from '@lumino/coreutils';\n\nimport { Widget } from '@lumino/widgets';\n\n/**\n * The default mime type for the extension.\n */\nconst MIME_TYPE = 'application/desktop-notify+json';\nconst PROCESSED_KEY = 'isProcessed';\n// The below can be used to customize notifications\nconst NOTIFICATION_OPTIONS = {\n  icon: '/static/favicons/favicon.ico',\n};\n\ninterface INotifyMimeData {\n  type: 'INIT' | 'NOTIFY';\n  payload: Record<string, unknown>;\n  isProcessed: boolean;\n  id: string;\n}\n\n/**\n * A widget for rendering desktop-notify.\n */\nclass OutputWidget extends Widget implements IRenderMime.IRenderer {\n  constructor(options: IRenderMime.IRendererOptions) {\n    super();\n    this._mimeType = options.mimeType;\n  }\n\n  renderModel(model: IRenderMime.IMimeModel): Promise<void> {\n    const mimeData = model.data[this._mimeType] as unknown as INotifyMimeData;\n\n    const payload = mimeData.payload as JSONObject;\n\n    // If the PROCESSED_KEY is available - do not take any action\n    // This is done so that notifications are not repeated on page refresh\n    if (mimeData[PROCESSED_KEY]) {\n      return Promise.resolve();\n    }\n\n    // For first-time users, check for necessary permissions and prompt if needed\n    if (\n      (mimeData.type === 'INIT' && Notification.permission === 'default') ||\n      Notification.permission !== 'granted'\n    ) {\n      // We do not have any actions to perform upon acquiring permission and so\n      // handle only the errors (if any)\n      Notification.requestPermission().catch(err => {\n        alert(\n          `Encountered error - ${err} while requesting permissions for notebook notifications`,\n        );\n      });\n    }\n\n    if (mimeData.type === 'NOTIFY') {\n      // Notify only if there's sufficient permissions and this has not been processed previously\n      if (Notification.permission === 'granted' && !mimeData[PROCESSED_KEY]) {\n        new Notification(payload.title as string, NOTIFICATION_OPTIONS);\n      } else {\n        this.node.innerHTML = `<div id=\"${mimeData.id}\">Missing permissions - update \"Notifications\" preferences under browser settings to receive notifications</div>`;\n      }\n    }\n\n    if (!mimeData[PROCESSED_KEY]) {\n      // Add isProcessed property to each notification message so that we can avoid repeating notifications on page reloads\n      const updatedModel: IRenderMime.IMimeModel = JSON.parse(\n        JSON.stringify(model),\n      );\n      const updatedMimeData = updatedModel.data[\n        this._mimeType\n      ] as unknown as INotifyMimeData;\n      updatedMimeData[PROCESSED_KEY] = true;\n      // The below model update is done inside a separate function and added to\n      // the event queue - this is done so to avoid re-rendering before the\n      // initial render is complete.\n      //\n      // Without the setTimeout, calling model.setData triggers the callbacks\n      // registered on model-updates that re-renders the widget and it again tries\n      // to update the model which again causes a re-render and so on.\n      setTimeout(() => {\n        model.setData(updatedModel);\n      }, 0);\n    }\n\n    return Promise.resolve();\n  }\n\n  private _mimeType: string;\n}\n\n/**\n * A mime renderer factory for desktop-notify data.\n */\nconst rendererFactory: IRenderMime.IRendererFactory = {\n  safe: true,\n  mimeTypes: [MIME_TYPE],\n  createRenderer: options => new OutputWidget(options),\n};\n\n/**\n * Extension definition.\n */\nconst extension: IRenderMime.IExtension = {\n  id: 'desktop-notify:plugin',\n  rendererFactory,\n  rank: 0,\n  dataType: 'json',\n};\n\nconsole.log('jupyterlab-notify render activated');\n\nexport default extension;\n"],"names":[],"sourceRoot":""}