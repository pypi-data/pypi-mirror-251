"use strict";(self.webpackChunk_datalayer_jupyter_kernels=self.webpackChunk_datalayer_jupyter_kernels||[]).push([[8776],{78776:(e,t,r)=>{r.r(t),r.d(t,{MIME_TYPE:()=>d,RenderedJSON:()=>l,default:()=>c,rendererFactory:()=>p});var o=r(80017),n=r(18168),s=r(92279),a=r(56769),i=r(60800);const d="application/json";class l extends s.$L{constructor(e){super(),this._rootDOM=null,this.addClass("jp-RenderedJSON"),this.addClass("CodeMirror"),this._mimeType=e.mimeType,this.translator=e.translator||n.Sr}[o.x.symbol](){return()=>o.x.printWidget(this)}async renderModel(e){const{Component:t}=await r.e(6341).then(r.bind(r,66341)),o=e.data[this._mimeType]||{},n=e.metadata[this._mimeType]||{};return null===this._rootDOM&&(this._rootDOM=(0,i.s)(this.node)),new Promise(((e,r)=>{this._rootDOM.render(a.createElement(t,{data:o,metadata:n,translator:this.translator,forwardedRef:()=>e()}))}))}onBeforeDetach(e){this._rootDOM&&(this._rootDOM.unmount(),this._rootDOM=null)}}const p={safe:!0,mimeTypes:[d],createRenderer:e=>new l(e)},c=[{id:"@jupyterlab/json-extension:factory",description:"Adds renderer for JSON content.",rendererFactory:p,rank:0,dataType:"json",documentWidgetFactoryOptions:{name:"JSON",primaryFileType:"json",fileTypes:["json","notebook","geojson"],defaultFor:["json"]}}]}}]);