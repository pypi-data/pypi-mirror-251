# coding: utf-8

"""
    BeeKeeperAI EscrowAI Enclave API

    Described below is the EscrowAI Enclave API that provides functionality inside a BeeKeeperAI environment. Included are data engineering endpoints and reporting endpoints.

    The version of the OpenAPI document: 1.5.1
    Contact: engineering@beekeeperai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
from unittest.mock import MagicMock
import datetime
import json

import BeeEnclave
from BeeEnclave.models.algorithm_status import AlgorithmStatus  # noqa: E501
from BeeEnclave.rest import ApiException
from BeeEnclave.api_client import ApiClient

class TestAlgorithmStatus(unittest.TestCase):
    """AlgorithmStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AlgorithmStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AlgorithmStatus`
        """
        model = BeeEnclave.models.algorithm_status.AlgorithmStatus()  # noqa: E501
        if include_optional :
            return AlgorithmStatus(
                run_id = '', 
                status = 'starting', 
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else :
            return AlgorithmStatus(
                run_id = '',
                status = 'starting',
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testAlgorithmStatus(self):
        """Test AlgorithmStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

        algorithm_status_json = None

        if algorithm_status_json is None:
            return

        response_mock = MagicMock()
        response_mock.data = json.dumps(algorithm_status_json)

        deserialized = ApiClient().deserialize(response_mock, AlgorithmStatus)

        assert deserialized is not None
        assert deserialized.run_id == algorithm_status_json.get("run_id")
        assert deserialized.status == algorithm_status_json.get("status")
        assert deserialized.timestamp == algorithm_status_json.get("timestamp")

if __name__ == '__main__':
    unittest.main()
