# coding: utf-8

"""
    BeeKeeperAI EscrowAI Enclave API

    Described below is the EscrowAI Enclave API that provides functionality inside a BeeKeeperAI environment. Included are data engineering endpoints and reporting endpoints.

    The version of the OpenAPI document: 1.5.0
    Contact: engineering@beekeeperai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class GetAvailableFiles200ResponseFilesInner(BaseModel):
    """
    GetAvailableFiles200ResponseFilesInner
    """
    id: Optional[StrictStr] = Field(None, description="Unique identifier for the file")
    name: Optional[StrictStr] = Field(None, description="Name of the file")
    size: Optional[StrictInt] = Field(None, description="Size of the file in bytes")
    upload_date: Optional[datetime] = Field(None, alias="uploadDate", description="Date and time the file was uploaded")
    __properties = ["id", "name", "size", "uploadDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetAvailableFiles200ResponseFilesInner:
        """Create an instance of GetAvailableFiles200ResponseFilesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAvailableFiles200ResponseFilesInner:
        """Create an instance of GetAvailableFiles200ResponseFilesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetAvailableFiles200ResponseFilesInner.parse_obj(obj)

        _obj = GetAvailableFiles200ResponseFilesInner.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "size": obj.get("size"),
            "upload_date": obj.get("uploadDate")
        })
        return _obj


