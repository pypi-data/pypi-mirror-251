# coding: utf-8

"""
    BeeKeeperAI EscrowAI Enclave API

    Described below is the EscrowAI Enclave API that provides functionality inside a BeeKeeperAI environment. Included are data engineering endpoints and reporting endpoints.

    The version of the OpenAPI document: 1.5.0
    Contact: engineering@beekeeperai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from BeeKeeperRuntimeSDK.models.get_available_files200_response_files_inner import GetAvailableFiles200ResponseFilesInner

class GetAvailableFiles200Response(BaseModel):
    """
    GetAvailableFiles200Response
    """
    files: Optional[conlist(GetAvailableFiles200ResponseFilesInner)] = None
    total_files: Optional[StrictInt] = Field(None, alias="totalFiles", description="Total number of available files")
    __properties = ["files", "totalFiles"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetAvailableFiles200Response:
        """Create an instance of GetAvailableFiles200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAvailableFiles200Response:
        """Create an instance of GetAvailableFiles200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetAvailableFiles200Response.parse_obj(obj)

        _obj = GetAvailableFiles200Response.parse_obj({
            "files": [GetAvailableFiles200ResponseFilesInner.from_dict(_item) for _item in obj.get("files")] if obj.get("files") is not None else None,
            "total_files": obj.get("totalFiles")
        })
        return _obj


