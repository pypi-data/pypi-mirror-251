# coding: utf-8

"""
    University Student API

    This API exposes identity information about university students. The purpose of this API is to give access to basic identity information about university students for use by downstream systems, therefore the data exposed is limited to basic information about who a student is and which institutions they are affiliated with.  This API uses the following identifiers to link people to person-records held within different systems:  * `person.v1.student-records.university.identifiers.cam.ac.uk` - the university student (ust) identifier of this person -   also referred to as USN  Additionally this API uses the following identifiers to link people to institutions or entities which a person may have an affiliation to:  * `institution.v1.student-records.university.identifiers.cam.ac.uk` - the university student (ust) institution identifier.     This encompasses colleges, departments and faculties. The     [CamSIS Coding Manual](https://www.camsis.cam.ac.uk/technical/camsis-coding-manual)     lists the available values for this affiliation (under A01 and M01). * `academic-plan.v1.student-records.university.identifiers.cam.ac.uk` - the university student (ust) academic plan     identifier. The     [CamSIS Coding Manual](https://www.camsis.cam.ac.uk/technical/camsis-coding-manual)     lists the available values for this affiliation (under D07).  Both affiliations provide a `status` field which indicate a student's status within an affiliated entity. This `status` field is the short representation of the academic career field held in CamSIS. The [CamSIS Coding Manual](https://www.camsis.cam.ac.uk/technical/camsis-coding-manual) lists the available values for the `status` field (under D05).  This API is currently backed by data from CamSIS, exposing a view of data that is refreshed nightly.  

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from identitylib.student_client.models.affiliation import Affiliation
from identitylib.student_client.models.identifier import Identifier

class Student(BaseModel):
    """
    A representation of a student - exposing the bare minimum information to identify a student and link them to affiliated institutions and programmes within the University.
    """
    affiliations: conlist(Affiliation) = Field(..., description="The list of entities that this student is affiliated with. Currently this includes college and department affiliations (under the scheme `institution.v1.student-records.university.identifiers.cam.ac.uk`) and any active academic plan (under the scheme `institution.v1.student-records.university.identifiers.cam.ac.uk`).")
    date_of_birth: Optional[date] = Field(None, alias="dateOfBirth", description="The date of birth of this student. There are a minority of cases where this is not known.")
    forenames: StrictStr = Field(..., description="The forenames of this student, split by a single space.")
    identifiers: conlist(Identifier) = Field(..., description="The identifiers attached to this student record. Currently only identifiers of the scheme person.v1.student-records.university.identifiers.cam.ac.uk (USN) are included, but additional identifier types may be added in future.")
    name_prefixes: StrictStr = Field(..., alias="namePrefixes", description="The name prefixes of this student, split by a single space.")
    surname: StrictStr = Field(..., description="The surname of this student.")
    __properties = ["affiliations", "dateOfBirth", "forenames", "identifiers", "namePrefixes", "surname"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Student:
        """Create an instance of Student from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in affiliations (list)
        _items = []
        if self.affiliations:
            for _item in self.affiliations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['affiliations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in identifiers (list)
        _items = []
        if self.identifiers:
            for _item in self.identifiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['identifiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Student:
        """Create an instance of Student from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Student.parse_obj(obj)

        _obj = Student.parse_obj({
            "affiliations": [Affiliation.from_dict(_item) for _item in obj.get("affiliations")] if obj.get("affiliations") is not None else None,
            "date_of_birth": obj.get("dateOfBirth"),
            "forenames": obj.get("forenames"),
            "identifiers": [Identifier.from_dict(_item) for _item in obj.get("identifiers")] if obj.get("identifiers") is not None else None,
            "name_prefixes": obj.get("namePrefixes"),
            "surname": obj.get("surname")
        })
        return _obj


