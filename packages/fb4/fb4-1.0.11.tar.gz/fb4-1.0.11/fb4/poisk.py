from .ekz_data import Tasks
from fuzzywuzzy import fuzz, process
import pyperclip


data = Tasks.data
datalst = []
for Q, nums in data.items():
    for num, v in nums.items():
        datalst.append(f"{Q} {num};; {v[0]};; {v[1]}")


def raw_find(q=1, number=1, answer=True):
    '''
    q:int - номер раздела Q
    number:int - номер по порядку
    answer:bool - если True, то вывести ответ'''
    res = Tasks.data[f'Q{q}'][number][int(answer)]
    pyperclip.copy(res)


def info(arg='Q4'):
    '''
    q:int - номер раздела Q'''
    if arg == 'Q1':
        print('''
        1: гамма распределение
        2: хи2 распределение
        3: распределение стьдента
        4: распределение фишера
        5: процентные точки и квантили
        6: случайная выборка из конечной генеральной совокупности
        7: случайная выборка из распределения
        8: повторная (бесповторная) выборка
        9: выборочная функция распределения
        10: k-ая порядковая статистика
        11: точечная статистическая оценка
        12: достаточное условие состоятельности оценки
        13: среднеквадратичная ошибка оценки
        14: критерий оптимальности оценки (Рао-Крамер)
        15: информация Фишера
        16: Рао-Крамера для распределения Бернулли
        17: несмещенность, сост и эффективность выборочного среднего
        18: Рао-Крамера для распределения Пуассона
        19: Рао-Крамера для Биномиального распределения
        20: информация по Фишеру, нормальный закон
        21: смысл метода максимального правдоподобия
        22: смысл метода моментов
        23: доверительная оценка
        24: доверит интервал для μ когда Var известен
        25: доверит интервал для Var когда μ известен
        26: доверит интервал для μ когда Var неизвестен
        27: доверит интервал для Var когда μ неизвестен
        28: теорема Фишера
        29: доверит интервал для предсказания когда Var и μ неизвестны
        30: доверит интервал для ρ(rho)
        31: доверит интервал для вероятности
        32: доверит интервал для μ через остаточную дисперсию
        33: дисперсионное тождество
        34: факторная дисперсия
        ''')
    if arg == 'Q2':
        print('''
        1: общая схема проверки статистических гипотез
        2: вероятностная интерпретация ошибок 1 и 2 рода
        3: несмещенность и состоятельность критерия
        4: лемма Неймана-Пирсона
        5: H1 μ>μ0 когда Var известна
        6: H1 μ<μ0 когда Var известна
        7: H1 μ!=μ0 когда Var известна
        8: H1 μ>μ0 когда Var неизвестна
        9: H1 μ<μ0 когда Var неизвестна
        10: H1 μ!=μ0 когда Var неизвестна
        11: H1 Var>Var0 когда μ известно
        12: H1 Var<Var0 когда μ известно
        13: H1 Var!=Var0 когда μ известно
        14: H1 Var>Var0 когда μ неизвестно
        15: H1 Var<Var0 когда μ неизвестно
        16: H1 Var!=Var0 когда μ неизвестно
        17: H1 μ_X>μ_Y когда VarX VarY известны
        18: H1 μ_X!=μ_Y когда VarX VarY известны
        19: H1 μ_X>μ_Y когда Var неизвестны, но равны
        20: H1 μ_X!=μ_Y когда Var неизвестны, но равны
        21: H1 μ_X>μ_Y когда Var неизвестны и НЕ равны
        22: H1 VarX>VarY ничего неизвестно
        23: H1 VarX!=VarY ничего неизвестно
        24: H1 μ_X!=μ_Y когда Var неизвестны ЧЕРЕЗ F
        ''')
    if arg == 'Q3':
        print('''
        1: выборочная функция распределения
        2: экстремальные статистики
        3: две оценки
        4: формула для дельта
        5: оценка с наименьшей среднеквадратической ошибкой
        6: оценки через моменты
        7: найти c чтобы оценки были несмещёнными
        8: найти оптимальную оценку
        9: найти состоятельную оценку
        10: найти оптимальную оценку(k-ые статистики)
        11: как и 10
        12: эффективная в рассматриваемом классе
        13: корень из оценки(нер-во Йенсена)
        14: несмещённость для beta
        15: как и 14
        16: фондовая биржа, Пуассон, метод моментов
        17: метод моментов равномерное распределение
        18: метод моментов равномерное распределение, a и b 
        19: срок службы изделия, λ и тау
        20: возвраты по кредитам, x^beta
        21: метод максим правдоподобия, Пуассон
        22: метод максим правдоподобия, показательное распр
        23: метод максим правдоподобия, равномерное a b распр
        24: метод максим правдоподобия, параметризованные вероятности
        25: df степени свободы
        26: связь Фишера и Стьюдента
        27: колебаниям котировок, равенство вероятностей по Пирсону
        28: pi и e равенство вероятностей через Пирсона
        29: числа не превосходящие, равновероятность Пирсона
        30: параметризованные вероятности, критерий Фишера
        31: частный случай формулы Пирсона
        32: pi и e ОДНОРОДНОСТЬ через Пирсона
        33: интервал i однородность через Колмогорова(т.е. непрерывный случай)
        34: pi и e ОДНОРОДНОСТЬ через Колмогорова-Смирнова
        35: переключение телевизора ОДНОРОДНОСТЬ через Пирсона
        ''')
    if arg == 'Q4':
        print('''
        Q4
        1-3: монеты
        4: пожар
        5: ущерб
        6: для случайной цены
        7: кость и монета 
        8: оценки студентов(среднее геом и т.д.)
        9: акции компании АВС, Глеб
        10: ковариация оценок
        11: дисперсия в объединённой выборке = межгрупповая + средняя групповая дисперсии
        12 - 18: повторные, бесповторные выборки
        19: Глеб и Анна, лекарство АВС
        20: доверительный интервал для ρ
        21: ищем μ, Var знаем
        22: ищем μ, Var НЕ знаем
        23: ищем Var, μ знаем
        24: ищем Var, ничего не знаем
        25: μ_x=μ_y, Varы знаем
        26: три закона, F критерий
        27: ρ в двумерном законе
        ''')


def find(s, number=0, clip=True, find_all=False, limit=5):
    '''
    s:str - строка для поиска
    number:int - номер по порядку для вывода ответа
    clip:bool - буфер
    find_all:bool - вопрос + ответ
    limit:int - кол-во результатов в поиске'''
    ans = process.extract(s, datalst, scorer=fuzz.partial_ratio, limit=limit)
    ans = sorted(ans, key=lambda x: x[1], reverse=True)
    answer = ans[number][0]
    if find_all:
        answer = answer[:answer.find(';;')] + ') ' + answer[answer.find(';;') + 3:].replace(';;', '''

**Ответ**
<br>
''')
    else:
        answer = answer[answer.rfind(';;') + 3:]

    if clip:
        pyperclip.copy(answer)

    return type("TempClass", (), {"__doc__": answer})()
