Metadata-Version: 2.1
Name: smart_answer_junyang168
Version: 0.0.7
Summary: Smart Answer project
Author-email: Jun Yang <junyang168@gmail.com>
Maintainer-email: Jun Yang <maintainer@example.com>
Project-URL: Homepage, https://github.com/junyang168/smart-answer
Project-URL: Bug Reports, https://github.com/pypa/sampleproject/issues
Project-URL: Funding, https://donate.pypi.org
Project-URL: Say Thanks!, http://saythanks.io/to/example
Project-URL: Source, https://github.com/junyang168/smart-answer/
Keywords: smart answer,setuptools,development
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: openai
Requires-Dist: langchain
Requires-Dist: python-dotenv
Requires-Dist: psycopg2-binary
Provides-Extra: dev
Requires-Dist: check-manifest ; extra == 'dev'
Provides-Extra: test
Requires-Dist: coverage ; extra == 'test'

# Smart Answer
 A Hybrid Search Feature Powered by Generative AI

# Overview
"Smart Answers" is a groundbreaking hybrid search feature that utilizes the power of Generative AI to actively generate detailed answers to user queries, setting itself apart from traditional search engines that simply retrieve relevant results from existing data. Generative AI, a branch of artificial intelligence, excels in producing new text, translating languages, creating diverse content, and providing answers that are not only accurate but also enriched with insightful information.

The key advantage of Generative AI over conventional search methods lies in its ability to deliver more nuanced and comprehensive answers. When a question is posed to Smart Answers, it meticulously crafts a response that is not only tailored to the specific question but also incorporates the most recent and relevant information from a vast knowledge base.

A particularly remarkable aspect of Generative AI is its ability to formulate answers to questions that aren't explicitly addressed in a single document by employing its reasoning capabilities and parametric knowledge. If Smart Answers is asked about a topic that lacks direct documentation, it has the ability to synthesize a response by integrating information from various sources, related topics, and concurrent trends, thus providing a thorough and reasoned answer even in the absence of a direct knowledge match.

# Features
- Generates detailed and informative answers to user queries
- Utilizes Generative AI to provide more nuanced and comprehensive responses
- Employs reasoning capabilities to answer questions that aren't explicitly addressed in existing documents
- Continuously learns and improves

# Architecture
Smart Answers leverages a Large Language Model (LLM) to generate answers to questions. The LLM is a type of Generative AI that has been trained on a massive dataset of text and code. This allows the LLM to generate text that is fluent, informative, and relevant to the topic at hand.

Smart Answers also employs a dynamic context layer that is generated for each question asked. This context layer is tailored specifically to the knowledge domain and includes information about the latest documentation, product lifecycle, compatibility tools, software interoperability, and upgrade paths. This allows Smart Answers to provide more up-to-date, accurate, and relevant answers to user queries.

# Use cases
- Knowledge Q & A : Generate Answers based on Questions (implemented as Smart Answer)
- Generate Knowledge: Create KB articles by soliciting input in a guided flow from a support agent (Implemented as Ghost Writer)
- Generate Q & A: Create a path of questions and answers for supporting research based on a given context (Not Implemented)
   
# Beta Disclaimer
Smart Answers is currently in beta, and some answers may be inaccurate. Please verify details before relying on the information provided. Your feedback is crucial to improve the system's accuracy. If you encounter any inaccurate responses, please provide feedback to help refine the system.

# Usage
To use Smart Answers, simply enter your question in the search bar and press Enter. Smart Answers will generate a detailed answer to your query.

# Contributing
We welcome contributions to Smart Answers. If you are interested in contributing, please contact us for more information.

# License
Smart Answers is licensed under the MIT License: https://opensource.org/licenses/MIT.

# Folders and Files
## ingestion
This folder contains scripts and tools for ingesting data into the Smart Answers system.

## templates
This folder contains templates for generating different types of responses, such as summaries, explanations, and code snippets.

## test_data
This folder contains test data used for evaluating the performance of Smart Answers.

## tools
This folder contains various tools used for developing and maintaining Smart Answers.

## LICENSE
This file contains the MIT License under which Smart Answers is distributed.

## chat_agent.py
This file contains the code for the chat agent that interacts with users and generates responses to their queries.

## chat_memory.py
This file contains the code for managing the chat history and context of conversations.

## ghost_writer.py
This file contains the code for generating different types of creative text formats, such as poems, code, scripts, musical pieces, email, and letters.

## logger.py
This file contains the code for logging events and messages generated by Smart Answers.

## semantic_search_api.py
This file contains the code for the semantic search API that allows users to search for information using natural language queries.

## semantic_search_bulk_test.py
This file contains a script for testing the performance of the semantic search API.

## smart_answer.py
This file contains the code for generating detailed and informative answers to user queries.

## test.py
This file contains unit tests for the Smart Answers system.

## tool_selector.py
This file contains the code for selecting the appropriate tool based on the user's query.

## vLLM.py
This file contains the code for the virtual Large Language Model (vLLM) that powers Smart Answers.
