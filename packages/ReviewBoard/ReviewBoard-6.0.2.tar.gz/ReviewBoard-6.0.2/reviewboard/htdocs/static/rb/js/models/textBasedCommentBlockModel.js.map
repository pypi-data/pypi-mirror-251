{"version":3,"file":"textBasedCommentBlockModel.js","names":["RB","TextCommentBlock","FileAttachmentCommentBlock","extend","defaults","_","beginLineNum","endLineNum","viewMode","$beginRow","$endRow","prototype","serializedFields","parse","fields","parseInt"],"sources":["../../../../../static/rb/js/models/textBasedCommentBlockModel.es6.js"],"sourcesContent":["/**\n * Represents the comments on an element in a text-based file attachment.\n *\n * TextCommentBlock deals with creating and representing comments\n * that exist on a specific element of some content.\n *\n * Model Attributes:\n *     viewMode (string):\n *         The mode of text that the comment is made upon. This is one of:\n *\n *         ``'source'``:\n *             The raw contents of the file.\n *\n *         ``'rendered'``:\n *             The rendered contents of the file, such as for Markdown, etc.\n *\n *     beginLineNum (number):\n *         The first line number in the file that this comment is on.\n *\n *     endLineNUm (number):\n *         The last line number in the file that this comment is on.\n *\n *     $beginRow (jQuery):\n *         The first row in the diffviewer that this comment is on.\n *\n *     $endRow (jQuery):\n *         The last row in the diffviewer that this comment is on.\n *\n * See Also:\n *     :js:class:`RB.FileAttachmentCommentBlock`:\n *         For the attributes defined by the base model.\n *\n *     :js:class:`RB.AbstractCommentBlock`:\n *         For the attributes defined on all comment block.\n */\nRB.TextCommentBlock = RB.FileAttachmentCommentBlock.extend({\n    defaults: _.defaults({\n        beginLineNum: null,\n        endLineNum: null,\n        viewMode: false,\n        $beginRow: null,\n        $endRow: null,\n    }, RB.FileAttachmentCommentBlock.prototype.defaults),\n\n    serializedFields: ['beginLineNum', 'endLineNum', 'viewMode'],\n\n    /**\n     * Parse the incoming attributes for the comment block.\n     *\n     * The fields are stored server-side as strings, so we need to convert\n     * them back to integers where appropriate.\n     *\n     * Args:\n     *     fields (object):\n     *         The attributes for the comment, as returned by the server.\n     *\n     * Returns:\n     *     object:\n     *     The parsed data.\n     */\n    parse(fields) {\n        fields.beginLineNum = parseInt(fields.beginLineNum, 10);\n        fields.endLineNum = parseInt(fields.endLineNum, 10);\n\n        return fields;\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,gBAAgB,GAAGD,EAAE,CAACE,0BAA0B,CAACC,MAAM,CAAC;EACvDC,QAAQ,EAAEC,CAAC,CAACD,QAAQ,CAAC;IACjBE,YAAY,EAAE,IAAI;IAClBC,UAAU,EAAE,IAAI;IAChBC,QAAQ,EAAE,KAAK;IACfC,SAAS,EAAE,IAAI;IACfC,OAAO,EAAE;EACb,CAAC,EAAEV,EAAE,CAACE,0BAA0B,CAACS,SAAS,CAACP,QAAQ,CAAC;EAEpDQ,gBAAgB,EAAE,CAAC,cAAc,EAAE,YAAY,EAAE,UAAU,CAAC;EAE5D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,KAAK,CAACC,MAAM,EAAE;IACVA,MAAM,CAACR,YAAY,GAAGS,QAAQ,CAACD,MAAM,CAACR,YAAY,EAAE,EAAE,CAAC;IACvDQ,MAAM,CAACP,UAAU,GAAGQ,QAAQ,CAACD,MAAM,CAACP,UAAU,EAAE,EAAE,CAAC;IAEnD,OAAOO,MAAM;EACjB;AACJ,CAAC,CAAC"}