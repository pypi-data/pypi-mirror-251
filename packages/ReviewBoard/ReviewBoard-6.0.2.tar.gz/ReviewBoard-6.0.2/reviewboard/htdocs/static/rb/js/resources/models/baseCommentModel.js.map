{"version":3,"file":"baseCommentModel.js","names":["RB","BaseComment","BaseResource","extend","defaults","_","forceTextType","includeTextTypes","issueOpened","issueStatus","markdownTextFields","rawTextFields","richText","text","prototype","extraQueryArgs","textTypes","UserSession","instance","get","supportsExtraData","attrToJsonMap","serializedAttrs","deserializedAttrs","serializers","JSONSerializers","onlyIfValue","textType","value","parentObject","undefined","destroyIfEmpty","destroy","apply","arguments","parseResourceData","rsp","raw_text_fields","data","call","text_type","markdown_text_fields","html_text_fields","html","validate","attrs","has","strings","UNSET_PARENT_OBJECT","STATE_DROPPED","STATE_OPEN","STATE_RESOLVED","STATE_VERIFYING_DROPPED","STATE_VERIFYING_RESOLVED","INVALID_ISSUE_STATUS","requiresVerification","extraData","require_verification","getAuthorUsername","review","user","title","isStateOpen","state"],"sources":["../../../../../../static/rb/js/resources/models/baseCommentModel.es6.js"],"sourcesContent":["/**\n * The base model for a comment.\n *\n * This provides all the common properties, serialization, deserialization,\n * validation, and other functionality of comments. It's meant to be\n * subclassed by more specific implementations.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text format type to request for text in all responses.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in the payload when\n *         syncing the model.\n *\n *     issueOpened (boolean):\n *         Whether or not an issue is opened.\n *\n *     issueStatus (string):\n *         The current state of the issue. This must be one of\n *         ``STATE_DROPPED``, ``STATE_OPEN``, ``STATE_RESOLVED``,\n *         ``STATE_VERIFYING_DROPPED`` or ``STATE_VERIFYING_RESOLVED``.\n *\n *     markdownTextFields (object):\n *         The source contents of any Markdown text fields, if forceTextType is\n *         used and the caller fetches or posts with includeTextTypes=markdown.\n *         The keys in this object are the field names, and the values are the\n *         Markdown source of those fields.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if forceTextType is used and\n *         the caller fetches or posts with includeTextTypes=raw. The keys in this\n *         object are the field names, and the values are the raw versions of\n *         those attributes.\n *\n *     richText (boolean):\n *         Whether the comment is saved in rich-text (Markdown) format.\n *\n *     text (string):\n *         The text for the comment.\n */\nRB.BaseComment = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            includeTextTypes: null,\n            issueOpened: null,\n            issueStatus: null,\n            markdownTextFields: {},\n            rawTextFields: {},\n            richText: null,\n            text: '',\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    extraQueryArgs() {\n        let textTypes = 'raw';\n\n        if (RB.UserSession.instance.get('defaultUseRichText')) {\n            textTypes += ',markdown';\n        }\n\n        return {\n            'force-text-type': 'html',\n            'include-text-types': textTypes\n        };\n    },\n\n    supportsExtraData: true,\n\n    attrToJsonMap: {\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types',\n        issueOpened: 'issue_opened',\n        issueStatus: 'issue_status',\n        richText: 'text_type'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'issueOpened',\n        'issueStatus',\n        'richText',\n        'text'\n    ],\n\n    deserializedAttrs: [\n        'issueOpened',\n        'issueStatus',\n        'text',\n        'html'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        richText: RB.JSONSerializers.textType,\n        issueStatus: function(value) {\n            if (this.get('loaded')) {\n                const parentObject = this.get('parentObject');\n\n                if (parentObject.get('public')) {\n                    return value;\n                }\n            }\n\n            return undefined;\n        }\n    },\n\n    /**\n     * Destroy the comment if and only if the text is empty.\n     *\n     * This works just like destroy(), and will in fact call destroy()\n     * with all provided arguments, but only if there's some actual\n     * text in the comment.\n     */\n    destroyIfEmpty() {\n        if (!this.get('text')) {\n            this.destroy.apply(this, arguments);\n        }\n    },\n\n    /**\n     * Deserialize comment data from an API payload.\n     *\n     * This must be overloaded by subclasses, and the parent version called.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.richText = (rawTextFields.text_type === 'markdown');\n\n        if (rsp.raw_text_fields) {\n            data.rawTextFields = {\n                text: rsp.raw_text_fields.text\n            };\n        }\n\n        if (rsp.markdown_text_fields) {\n            data.markdownTextFields = {\n                text: rsp.markdown_text_fields.text\n            };\n        }\n\n        if (rsp.html_text_fields) {\n            data.html = rsp.html_text_fields.text;\n        }\n\n        return data;\n    },\n\n    /**\n     * Perform validation on the attributes of the model.\n     *\n     * By default, this validates the issueStatus field. It can be\n     * overridden to provide additional validation, but the parent\n     * function must be called.\n     *\n     * Args:\n     *     attrs (object):\n     *         Attribute values to validate.\n     *\n     * Returns:\n     *     string:\n     *     An error string, if appropriate.\n     */\n    validate(attrs) {\n        if (_.has(attrs, 'parentObject') && !attrs.parentObject) {\n            return RB.BaseResource.strings.UNSET_PARENT_OBJECT;\n        }\n\n        if (attrs.issueStatus &&\n            attrs.issueStatus !== RB.BaseComment.STATE_DROPPED &&\n            attrs.issueStatus !== RB.BaseComment.STATE_OPEN &&\n            attrs.issueStatus !== RB.BaseComment.STATE_RESOLVED &&\n            attrs.issueStatus !== RB.BaseComment.STATE_VERIFYING_DROPPED &&\n            attrs.issueStatus !== RB.BaseComment.STATE_VERIFYING_RESOLVED) {\n            return RB.BaseComment.strings.INVALID_ISSUE_STATUS;\n        }\n\n        return RB.BaseResource.prototype.validate.apply(this, arguments);\n    },\n\n    /**\n     * Return whether this comment issue requires verification before closing.\n     *\n     * Returns:\n     *     boolean:\n     *     True if the issue is marked to require verification.\n     */\n    requiresVerification() {\n        const extraData = this.get('extraData');\n        return extraData && extraData.require_verification === true;\n    },\n\n    /**\n     * Return the username of the author of the comment.\n     *\n     * Returns:\n     *     boolean:\n     *     True if the current user is the author.\n     */\n    getAuthorUsername() {\n        const review = this.get('parentObject');\n        return review.get('links').user.title;\n    },\n}, {\n    STATE_DROPPED: 'dropped',\n    STATE_OPEN: 'open',\n    STATE_RESOLVED: 'resolved',\n    STATE_VERIFYING_DROPPED: 'verifying-dropped',\n    STATE_VERIFYING_RESOLVED: 'verifying-resolved',\n\n    /**\n     * Return whether the given state should be considered open or closed.\n     *\n     * Args:\n     *     state (string):\n     *         The state to check.\n     *\n     * Returns:\n     *     boolean:\n     *     true if the given state is open.\n     */\n    isStateOpen(state) {\n        return (state === RB.BaseComment.STATE_OPEN ||\n                state === RB.BaseComment.STATE_VERIFYING_DROPPED ||\n                state === RB.BaseComment.STATE_VERIFYING_RESOLVED);\n    },\n\n    strings: {\n        INVALID_ISSUE_STATUS: 'issueStatus must be one of STATE_DROPPED, ' +\n                              'STATE_OPEN, STATE_RESOLVED, ' +\n                              'STATE_VERIFYING_DROPPED, or ' +\n                              'STATE_VERIFYING_RESOLVED',\n    },\n});\n"],"mappings":"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"}