{"version":3,"file":"reviewView.js","names":["RB","ReviewRequestPage","ReviewView","Backbone","View","extend","initialize","options","entryModel","reviewRequestEditorView","_bannerView","_draftBannerShown","_openIssueCount","_reviewReply","_replyEditors","_replyEditorViews","_replyDraftsCount","_diffFragmentViews","_$reviewComments","_$bodyTop","_$bodyBottom","model","set","_setupNewReply","listenTo","get","forEach","view","hideControls","render","reviewRequestEditor","$","$comment","find","on","hasDraft","EnabledFeatures","unifiedBanner","banner","UnifiedBannerView","getInstance","updateReplyDraftState","_showReplyDraftBanner","_hideReplyDraftBanner","_","each","el","$issueState","length","issueStatus","data","BaseComment","isStateOpen","issueBar","CommentIssueBarView","reviewID","id","canVerify","commentID","commentType","interactive","oldStatus","newStatus","oldOpen","newOpen","trigger","$el","editor","ReviewReplyEditor","anchorPrefix","contextID","contextType","review","reviewReply","ReviewReplyEditorView","push","addReviewReplyEditorView","page","PageManager","getPage","diffCommentsData","i","diffCommentData","queueLoadDiff","reviewRequest","bugTrackerURL","formatText","_onBodyTopChanged","_onBodyBottomChanged","_onBodyTopRichTextChanged","_onBodyBottomRichTextChanged","html","bodyTop","addClass","removeClass","bodyBottom","closest","toggle","hasOpenIssues","getOpenIssueCount","getReviewReplyEditorView","undefined","getReviewReply","createReply","stopListening","ReviewReplyDraftStaticBannerView","ReviewReplyDraftBannerView","$floatContainer","$bannerFloatContainer","noFloatContainerClass","bannerNoFloatContainerClass","appendTo","$bannerParent","remove"],"sources":["../../../../../../static/rb/js/reviewRequestPage/views/reviewView.es6.js"],"sourcesContent":["/**\n * Handles interaction for a review on the review request page. These can be\n * contained within the main review entries, but also for status updates in\n * change description entries or the initial status updates entry.\n */\nRB.ReviewRequestPage.ReviewView = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     entryModel (RB.ReviewRequestPage.Entry):\n     *         The entry model.\n     *\n     *     reviewRequestEditorView (RB.ReviewRequestEditorView):\n     *         The review request editor view.\n     */\n    initialize(options) {\n        this.options = options;\n        this.entryModel = options.entryModel;\n        this.reviewRequestEditorView = options.reviewRequestEditorView;\n\n        this._bannerView = null;\n        this._draftBannerShown = false;\n        this._openIssueCount = 0;\n        this._reviewReply = null;\n        this._replyEditors = [];\n        this._replyEditorViews = [];\n        this._replyDraftsCount = 0;\n        this._diffFragmentViews = [];\n\n        this._$reviewComments = null;\n        this._$bodyTop = null;\n        this._$bodyBottom = null;\n\n        this.model.set('includeTextTypes', 'html,raw,markdown');\n\n        this._setupNewReply();\n\n        this.listenTo(this.entryModel, 'change:collapsed', () => {\n            if (!this.entryModel.get('collapsed')) {\n                this._diffFragmentViews.forEach(\n                    view => view.hideControls(false));\n            }\n        });\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewView:\n     *     This object, for chaining.\n     */\n    render() {\n        const reviewRequestEditor = this.entryModel.get('reviewRequestEditor');\n\n        this._$reviewComments = this.$('.review-comments');\n\n        const $comment = this._$reviewComments.find(\n            '.review-comment-details .review-comment');\n        this._$bodyTop = $comment.find('.body_top');\n        this._$bodyBottom = $comment.find('.body_bottom');\n\n        this._replyDraftsCount = 0;\n\n        this.on('hasDraftChanged', hasDraft => {\n            if (RB.EnabledFeatures.unifiedBanner) {\n                const banner = RB.UnifiedBannerView.getInstance(false);\n\n                /*\n                 * We make this conditional to make unit tests easier to write.\n                 */\n                if (banner) {\n                    banner.model.updateReplyDraftState(\n                        this._reviewReply, hasDraft);\n                }\n            }\n\n            if (hasDraft) {\n                this._showReplyDraftBanner();\n            } else {\n                this._hideReplyDraftBanner();\n            }\n        });\n\n        _.each(this._$reviewComments.find('.issue-indicator'), el => {\n            const $issueState = $('.issue-state', el);\n\n            /*\n             * Not all issue-indicator divs have an issue-state div for the\n             * issue bar.\n             */\n            if ($issueState.length > 0) {\n                const issueStatus = $issueState.data('issue-status');\n\n                if (RB.BaseComment.isStateOpen(issueStatus)) {\n                    this._openIssueCount++;\n                }\n\n                const issueBar = new RB.CommentIssueBarView({\n                    el: el,\n                    reviewID: this.model.id,\n                    canVerify: $issueState.data('can-verify'),\n                    commentID: $issueState.data('comment-id'),\n                    commentType: $issueState.data('comment-type'),\n                    interactive: $issueState.data('interactive'),\n                    issueStatus: issueStatus,\n                });\n\n                issueBar.render();\n\n                this.listenTo(issueBar, 'statusChanged',\n                              (oldStatus, newStatus) => {\n                    const oldOpen = RB.BaseComment.isStateOpen(oldStatus);\n                    const newOpen = RB.BaseComment.isStateOpen(newStatus);\n\n                    if (oldOpen !== newOpen) {\n                        if (newOpen) {\n                            this._openIssueCount++;\n                        } else {\n                            this._openIssueCount--;\n                        }\n                    }\n\n                    this.trigger('openIssuesChanged');\n                });\n            }\n        });\n\n        _.each(this.$('.comment-section'), el => {\n            const $el = $(el);\n            const editor = new RB.ReviewRequestPage.ReviewReplyEditor({\n                anchorPrefix: $el.data('reply-anchor-prefix'),\n                contextID: $el.data('context-id'),\n                contextType: $el.data('context-type'),\n                review: this.model,\n                reviewReply: this._reviewReply,\n            });\n\n            const view = new RB.ReviewRequestPage.ReviewReplyEditorView({\n                el: el,\n                model: editor,\n                reviewRequestEditor: reviewRequestEditor,\n            });\n            view.render();\n\n            this.listenTo(editor, 'change:hasDraft', (model, hasDraft) => {\n                if (hasDraft) {\n                    this._replyDraftsCount++;\n                    this.trigger('hasDraftChanged', true);\n                } else {\n                    this._replyDraftsCount--;\n\n                    if (this._replyDraftsCount === 0) {\n                        this.trigger('hasDraftChanged', false);\n                    }\n                }\n            });\n\n            this._replyEditors.push(editor);\n            this._replyEditorViews.push(view);\n\n            if (this.reviewRequestEditorView) {\n                this.reviewRequestEditorView.addReviewReplyEditorView(view);\n            }\n\n            if (editor.get('hasDraft')) {\n                this._replyDraftsCount++;\n            }\n        });\n\n        this.trigger('hasDraftChanged', this._replyDraftsCount > 0);\n\n        /*\n         * Load any diff fragments for comments made on this review. Each\n         * will be queued up and loaded when the page is rendered.\n         */\n        this._diffFragmentViews = [];\n\n        const page = RB.PageManager.getPage();\n        const diffCommentsData = this.entryModel.get('diffCommentsData');\n\n        for (let i = 0; i < diffCommentsData.length; i++) {\n            const diffCommentData = diffCommentsData[i];\n\n            page.queueLoadDiff(diffCommentData[0], diffCommentData[1],\n                               view => this._diffFragmentViews.push(view));\n        }\n\n        /*\n         * Do this last, after ReviewReplyEditorView has already set up the\n         * inline editors.\n         */\n        const reviewRequest = this.model.get('parentObject');\n        const bugTrackerURL = reviewRequest.get('bugTrackerURL');\n        _.each(this.$('pre.reviewtext'), el => {\n            RB.formatText($(el), { bugTrackerURL: bugTrackerURL });\n        });\n\n        this.listenTo(this.model, 'change:bodyTop',\n                      this._onBodyTopChanged);\n        this.listenTo(this.model, 'change:bodyBottom',\n                      this._onBodyBottomChanged);\n        this.listenTo(this.model, 'change:bodyTopRichText',\n                      this._onBodyTopRichTextChanged);\n        this.listenTo(this.model, 'change:bodyBottomRichText',\n                      this._onBodyBottomRichTextChanged);\n\n        return this;\n    },\n\n    /**\n     * Handler for when the Body Top field of a review changes.\n     *\n     * Updates the HTML for the field to show the new content.\n     */\n    _onBodyTopChanged() {\n        this._$bodyTop.html(this.model.get('htmlTextFields').bodyTop);\n    },\n\n    /**\n     * Handler for when the Body Top's Rich Text field of a review changes.\n     *\n     * Updates the class on the field to reflect the Rich Text state.\n     */\n    _onBodyTopRichTextChanged() {\n        if (this.model.get('bodyTopRichText')) {\n            this._$bodyTop.addClass('rich-text');\n        } else {\n            this._$bodyTop.removeClass('rich-text');\n        }\n    },\n\n    /**\n     * Handler for when the Body Bottom field of a review changes.\n     *\n     * Updates the HTML for the field to show the new content. The visibility\n     * of the body section will also be dependent on whether there is any\n     * content (mimicking the logic used when rendering the page).\n     */\n    _onBodyBottomChanged() {\n        const html = this.model.get('htmlTextFields').bodyBottom;\n\n        this._$bodyBottom\n            .html(html)\n            .closest('li').toggle(html && html.length > 0);\n    },\n\n    /**\n     * Handler for when the Body Bottom's Rich Text field of a review changes.\n     *\n     * Updates the class on the field to reflect the Rich Text state.\n     */\n    _onBodyBottomRichTextChanged() {\n        if (this.model.get('bodyBottomRichText')) {\n            this._$bodyBottom.addClass('rich-text');\n        } else {\n            this._$bodyBottom.removeClass('rich-text');\n        }\n    },\n\n    /**\n     * Return whether there are any open issues in the review.\n     *\n     * Returns:\n     *     boolean:\n     *     true if there are any open issues.\n     */\n    hasOpenIssues() {\n        return this._openIssueCount > 0;\n    },\n\n    /**\n     * Return the number of open issues in the review.\n     *\n     * Returns:\n     *     number:\n     *     The number of open issues.\n     */\n    getOpenIssueCount() {\n        return this._openIssueCount;\n    },\n\n    /**\n     * Return the ReviewReplyEditorView with the given context type and ID.\n     *\n     * Args:\n     *     contextType (string):\n     *         The type of object being replied to (such as ``body_top`` or\n     *         ``diff_comments``)\n     *\n     *     contextID (number, optional):\n     *         The ID of the comment being replied to, if appropriate.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewReplyEditorView:\n     *     The matching editor view.\n     */\n    getReviewReplyEditorView(contextType, contextID) {\n        if (contextID === undefined) {\n            contextID = null;\n        }\n\n        return _.find(this._replyEditorViews, view => {\n            const editor = view.model;\n            return editor.get('contextID') === contextID &&\n                   editor.get('contextType') === contextType;\n        });\n    },\n\n    /**\n     * Return the active reply.\n     *\n     * Returns:\n     *     RB.ReviewReply:\n     *     The active draft reply, or null if none exists.\n     */\n    getReviewReply() {\n        return this._reviewReply;\n    },\n\n    /**\n     * Set up a new ReviewReply for the editors.\n     *\n     * The new ReviewReply will be used for any new comments made on this\n     * review.\n     *\n     * A ReviewReply is set until it's either destroyed or published, at\n     * which point a new one is set.\n     *\n     * Args:\n     *     reviewReply (RB.ReviewReply, optional):\n     *         The reply object. If this is ``null``, a new ``RB.ReviewReply``\n     *         will be created. Note that this argument is only expected to be\n     *         used for unit testing.\n     */\n    _setupNewReply(reviewReply) {\n        if (!reviewReply) {\n            reviewReply = this.model.createReply();\n        }\n\n        if (this._reviewReply !== null) {\n            this.stopListening(this._reviewReply);\n\n            // Update all the existing editors to point to the new object.\n            this._replyEditors.forEach(\n                editor => editor.set('reviewReply', reviewReply));\n\n            this.trigger('hasDraftChanged', false);\n        }\n\n        this.listenTo(reviewReply, 'destroyed published',\n                      () => this._setupNewReply());\n\n        this._reviewReply = reviewReply;\n    },\n\n    /**\n     * Show the reply draft banner.\n     *\n     * This will be called in response to any new replies made on a review,\n     * or if there are pending replies that already exist on the review.\n     */\n    _showReplyDraftBanner() {\n        if (!this._draftBannerShown) {\n            if (RB.EnabledFeatures.unifiedBanner) {\n                this._bannerView =\n                    new RB.ReviewRequestPage.ReviewReplyDraftStaticBannerView({\n                        model: this._reviewReply,\n                    });\n            } else {\n                this._bannerView =\n                    new RB.ReviewRequestPage.ReviewReplyDraftBannerView({\n                        model: this._reviewReply,\n                        $floatContainer: this.options.$bannerFloatContainer,\n                        noFloatContainerClass:\n                            this.options.bannerNoFloatContainerClass,\n                        reviewRequestEditor: this.entryModel.get(\n                            'reviewRequestEditor'),\n                    });\n            }\n\n            this._bannerView.render();\n            this._bannerView.$el.appendTo(this.options.$bannerParent);\n            this._draftBannerShown = true;\n        }\n    },\n\n    /**\n     * Hide the reply draft banner.\n     */\n    _hideReplyDraftBanner() {\n        if (this._draftBannerShown) {\n            this._bannerView.remove();\n            this._bannerView = null;\n            this._draftBannerShown = false;\n        }\n    },\n});\n"],"mappings":"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"}