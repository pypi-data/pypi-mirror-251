{"version":3,"file":"centeredElementManager.js","names":["RB","CenteredElementManager","Backbone","View","extend","initialize","options","_$window","$","window","_updatePositionThrottled","requestAnimationFrame","updatePosition","setElements","elements","Map","remove","prototype","call","$window","_elements","size","on","off","viewportTop","contentViewport","get","viewportBottom","windowTop","scrollY","windowHeight","innerHeight","windowBottom","forEach","containers","el","$el","$topContainer","$top","$parentContainer","$parent","$bottomContainer","$bottom","containerTop","offset","top","containerBottom","height","topOffset","elStyle","getComputedStyle","elHeight","offsetHeight","posType","position","newCSS","newTop","left","right","transform","Math","max","bottom","min","availHeight","relTop","css","round","parseInt","style"],"sources":["../../../../../../static/rb/js/ui/views/centeredElementManager.es6.js"],"sourcesContent":["/**\n * A view which ensures that the specified elements are vertically centered.\n */\nRB.CenteredElementManager = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options passed to this view.\n     *\n     * Option Args:\n     *     elements (Array, optional):\n     *         An initial array of elements to center.\n     */\n    initialize(options={}) {\n        this._$window = $(window);\n\n        this._updatePositionThrottled = () => {\n            requestAnimationFrame(() => this.updatePosition());\n        };\n\n        this.setElements(options.elements || new Map());\n    },\n\n    /**\n     * Remove the CenteredElementManager.\n     *\n     * This will result in the event handlers being removed.\n     */\n    remove() {\n        Backbone.View.prototype.remove.call(this);\n\n        this.setElements(new Map());\n    },\n\n    /**\n     * Set the elements and their containers.\n     *\n     * Args:\n     *     elements (Map<Element, Element or jQuery>):\n     *         The elements to center within their respective containers.\n     */\n    setElements(elements) {\n        const $window = this._$window;\n\n        this._elements = elements;\n\n        if (elements.size > 0) {\n            $window.on('resize scroll', this._updatePositionThrottled);\n        } else {\n            $window.off('resize scroll', this._updatePositionThrottled);\n        }\n    },\n\n    /**\n     * Update the position of the elements.\n     *\n     * This should only be done when the set of elements changed, as the view\n     * will handle updating on window resizing and scrolling.\n     */\n    updatePosition() {\n        if (this._elements.size === 0) {\n            return;\n        }\n\n        const viewportTop = RB.contentViewport.get('top');\n        const viewportBottom = RB.contentViewport.get('bottom');\n        let windowTop = window.scrollY;\n        const windowHeight = window.innerHeight;\n        const windowBottom = windowTop + windowHeight - viewportBottom;\n\n        windowTop += viewportTop;\n\n        this._elements.forEach((containers, el) => {\n            const $el = $(el);\n            const $topContainer = containers.$top;\n            const $parentContainer = containers.$parent || $topContainer;\n            const $bottomContainer = containers.$bottom || $parentContainer;\n            const containerTop = $topContainer.offset().top;\n            const containerBottom =\n                $bottomContainer.height() +\n                ($bottomContainer === $topContainer\n                 ? containerTop\n                 : $bottomContainer.offset().top);\n\n            /*\n             * If the top container is above the element's parent container,\n             * we'll need to offset the position later.\n             */\n            const topOffset =\n                $parentContainer === $topContainer\n                ? 0\n                : $parentContainer.offset().top - containerTop;\n\n            /*\n             * We don't have to vertically center the element when its\n             * container is not on screen.\n             */\n            if (containerTop >= windowBottom && containerBottom <= windowTop) {\n                return;\n            }\n\n            const elStyle = getComputedStyle(el);\n            const elHeight = el.offsetHeight;\n            const posType = elStyle.position;\n            let newCSS = null;\n            let newTop = null;\n\n            /*\n             * When a container takes up the entire viewport, we can switch\n             * the CSS to use position: fixed. This way, we do not have to\n             * re-compute its position.\n             */\n            if (windowTop >= containerTop &&\n                windowBottom <= containerBottom) {\n                newTop =\n                    viewportTop +\n                    (windowHeight - viewportTop - viewportBottom -\n                     elHeight) / 2;\n\n                if (posType !== 'fixed') {\n                    newCSS = {\n                        left: $el.offset().left,\n\n                        /* Ensure we're in control of placement. */\n                        position: 'fixed',\n                        right: 'auto',\n                        transform: 'none',\n                    };\n                }\n            } else {\n                const top = Math.max(windowTop, containerTop);\n                const bottom = Math.min(windowBottom, containerBottom);\n                const availHeight = bottom - top - elHeight;\n                const relTop = top - containerTop;\n\n                /*\n                 * Make sure the top and bottom never exceeds the\n                 * calculated boundaries.\n                 *\n                 * We'll always position at least at 0, the top of the\n                 * boundary.\n                 *\n                 * We'll cap at availHeight, the bottom of the boundary\n                 * minus the element height.\n                 *\n                 * Optimistically, we'll position half-way through the\n                 * boundary.\n                 */\n                newTop =\n                    Math.max(\n                        0,\n                        relTop + Math.min(availHeight, availHeight / 2)) -\n                    topOffset;\n\n                if (posType === 'fixed') {\n                    newCSS = {\n                        position: 'absolute',\n\n                        /* Clear these settings to restore defaults. */\n                        left: '',\n                        right: '',\n                        transform: '',\n                    };\n                }\n            }\n\n            if (newCSS) {\n                $el.css(newCSS);\n            }\n\n            if (Math.round(parseInt(elStyle.top)) !== Math.round(newTop)) {\n                el.style.top = newTop + 'px';\n            }\n        });\n    },\n});\n"],"mappings":"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"}