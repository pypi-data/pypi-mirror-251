{"version":3,"file":"dashboardView.js","names":["DashboardActionsView","Backbone","View","extend","template","_","events","render","show_archived","model","get","$el","html","close_discarded_text","close_submitted_text","archive_text","mute_text","read_only","RB","UserSession","instance","unarchive_text","unmute_text","$summary","$","listenTo","count","text","interpolate","_onCloseDiscardedClicked","ev","stopPropagation","preventDefault","_closeReviewRequests","ReviewRequest","CLOSE_DISCARDED","_onCloseCompletedClicked","CLOSE_SUBMITTED","closeType","confirmed","_confirmClose","results","closeReviewRequests","_showCloseResults","successes","failures","err","alert","$dlg","append","modalBox","title","buttons","val","on","Promise","resolve","reject","$dialog","click","_onArchiveClicked","updateVisibility","_onUnarchiveClicked","_onMuteClicked","_onUnmuteClicked","DashboardView","DatagridPageView","actionsViewType"],"sources":["../../../../../../static/rb/js/pages/views/dashboardView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * Displays and invokes actions for one or more review requests.\n *\n * This presents available actions to the user that can be performed\n * across one or more selected review requests in the dashboard.\n * The actions will appear in a layer above the sidebar.\n */\nconst DashboardActionsView = Backbone.View.extend({\n    template: _.template(dedent`\n        <p class=\"rb-c-drawer__summary\"></p>\n        <% if (!read_only) { %>\n         <div class=\"rb-c-drawer__actions\">\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-discard\">\n            <%= close_discarded_text %>\n           </li>\n           <li class=\"rb-c-drawer__action js-action-submit\">\n            <%= close_submitted_text %>\n           </li>\n          </ul>\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-archive\">\n            <%= archive_text %>\n           </li>\n           <% if (show_archived) { %>\n            <li class=\"rb-c-drawer__action\n                       js-action-unarchive\">\n             <%= unarchive_text %>\n            </li>\n           <% } %>\n          </ul>\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-mute\">\n            <%= mute_text %></a></li>\n           </li>\n           <% if (show_archived) { %>\n            <li class=\"rb-c-drawer__action js-action-unmute\">\n             <%= unmute_text %>\n            </li>\n           <% } %>\n          </ul>\n         </div>\n        <% } %>\n    `),\n\n    events: {\n        'click .js-action-discard': '_onCloseDiscardedClicked',\n        'click .js-action-submit': '_onCloseCompletedClicked',\n        'click .js-action-archive': '_onArchiveClicked',\n        'click .js-action-unarchive': '_onUnarchiveClicked',\n        'click .js-action-mute': '_onMuteClicked',\n        'click .js-action-unmute': '_onUnmuteClicked',\n    },\n\n    /**\n     * Render the actions pane.\n     *\n     * Returns:\n     *     DashboardActionsView:\n     *     This object, for chaining.\n     */\n    render() {\n        const show_archived = (this.model.get('data') || {}).show_archived;\n\n        this.$el\n            .html(this.template({\n                close_discarded_text: gettext('<b>Close</b> Discarded'),\n                close_submitted_text: gettext('<b>Close</b> Completed'),\n                archive_text: gettext('<b>Archive</b>'),\n                mute_text: gettext('<b>Mute</b>'),\n                read_only: RB.UserSession.instance.get('readOnly'),\n                unarchive_text: gettext('<b>Unarchive</b>'),\n                unmute_text: gettext('<b>Unmute</b>'),\n                show_archived: show_archived,\n            }));\n\n        const $summary = this.$('.rb-c-drawer__summary');\n\n        this.listenTo(this.model, 'change:count', (model, count) => {\n            $summary.text(interpolate(\n                ngettext('%s review request selected',\n                         '%s review requests selected',\n                         count),\n                [count]));\n        });\n\n        return this;\n    },\n\n    /**\n     * Handler for when the Close Discarded action is clicked.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onCloseDiscardedClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this._closeReviewRequests(RB.ReviewRequest.CLOSE_DISCARDED);\n    },\n\n    /**\n     * Handler for when the Close Completed action is clicked.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onCloseCompletedClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this._closeReviewRequests(RB.ReviewRequest.CLOSE_SUBMITTED);\n    },\n\n    /**\n     * Common code for confirming and closing review requests.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     closeType (string):\n     *         The close type to use.\n     */\n    async _closeReviewRequests(closeType) {\n        try {\n            const confirmed = await this._confirmClose();\n\n            if (confirmed) {\n                const results = await this.model.closeReviewRequests({\n                    closeType: closeType,\n                });\n                this._showCloseResults(results.successes, results.failures);\n            }\n        } catch (err) {\n            alert(_`An error occurred when attempting to close review requests: ${err}`);\n        }\n    },\n\n    /**\n     * Shows the results of the close operation in a dialog.\n     *\n     * This will say how many review requests have been closed successfully,\n     * and will also list the number that have failed (due to access\n     * permissions or other errors).\n     *\n     * Args:\n     *     successes (int):\n     *         Number of successfully closed review requests.\n     *\n     *     failures (int):\n     *         Number of unsuccessfully closed review requests.\n     */\n    _showCloseResults(successes, failures) {\n        const $dlg = $('<div>')\n            .append($('<p>')\n                .text(interpolate(\n                    ngettext('%s review request has been closed.',\n                             '%s review requests have been closed.',\n                             successes),\n                    [successes])));\n\n        if (failures > 0) {\n            $dlg\n                .append($('<p>').text(\n                    interpolate(\n                        ngettext('%s review request could not be closed.',\n                                 '%s review requests could not be closed.',\n                                 failures),\n                        [failures])))\n                .append($('<p>').text(\n                    _`You may not have permission to close them.`));\n        }\n\n        $dlg\n            .modalBox({\n                title: _`Close review requests`,\n                buttons: [\n                    $('<input type=\"button\">').val(_`Close`),\n                ],\n            })\n            .on('close', () => $dlg.modalBox('destroy'));\n    },\n\n    /**\n     * Prompt the user for confirmation before closing review requests.\n     *\n     * If the user confirms, the review requests will be closed.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves to true if the close was confirmed, or\n     *     false if the close was cancelled.\n     */\n    _confirmClose: function() {\n        return new Promise((resolve, reject) => {\n            const $dialog = $('<div>')\n                .append($('<p>')\n                    .text(_`If these review requests have unpublished drafts, they will be discarded.`))\n                .append($('<p>')\n                    .text(_`Are you sure you want to close these review requests?`))\n                .modalBox({\n                    title: _`Close review requests`,\n                    buttons: [\n                        $('<input type=\"button\">')\n                            .val(_`Cancel`)\n                            .click(() => resolve(false)),\n\n                        $('<input type=\"button\">')\n                            .val(_`Close Review Requests`)\n                            .click(() => resolve(true)),\n                    ],\n                })\n                .on('close', () => {\n                    $dialog.modalBox('destroy');\n                    resolve(false);\n                });\n        });\n    },\n\n    /**\n     * Handler for when the Archive action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onArchiveClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this.model.updateVisibility('archive');\n    },\n\n    /**\n     * Handler for when the Unarchive action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onUnarchiveClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this.model.updateVisibility('unarchive');\n    },\n\n    /**\n     * Handler for when the Mute action is clicked.\n     *\n     * This will confirm that the user wants to mute the selected review\n     * requests. Once they confirm, the review requests will be archived.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onMuteClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const $dialog = $('<div>')\n            .append($('<p>')\n                .text(_`Are you sure you want to mute these review requests?`))\n            .modalBox({\n                title: _`Mute review requests`,\n                buttons: [\n                    $('<input type=\"button\">')\n                        .val(_`Cancel`),\n\n                    $('<input type=\"button\">')\n                        .val(_`Mute Review Requests`)\n                        .click(() => this.model.updateVisibility('mute')),\n                ],\n            })\n            .on('close', () => $dialog.modalBox('destroy'));\n    },\n\n    /**\n     * Handler for when the Unmute action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onUnmuteClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this.model.updateVisibility('unarchive');\n    },\n});\n\n\n/**\n * Manages the UI for the dashboard.\n *\n * This renders the dashboard, handles events, and allows for multi-row\n * actions (like closing review requests).\n */\nRB.DashboardView = RB.DatagridPageView.extend({\n    actionsViewType: DashboardActionsView,\n});\n\n\n})();\n"],"mappings":"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"}