{"version":3,"file":"textCommentRowSelector.js","names":["RB","TextCommentRowSelector","Backbone","View","extend","ghostCommentFlagTemplate","events","initialize","options","_$begin","_$end","_beginLineNum","_endLineNum","_lastSeenIndex","_selectionClass","_supportsSetClipboard","window","getSelection","undefined","Range","prototype","cloneContents","_newlineChar","_$ghostCommentFlag","_$ghostCommentFlagCell","remove","call","render","$","on","mousedown","_","bind","_onMouseDown","mouseup","_onMouseUp","mouseover","_onMouseOver","mouseout","_onMouseOut","hide","appendTo","createComment","beginLineNum","endLineNum","beginNode","endNode","_getActualLineNumCell","parent","_isLineNumCell","_end","_reset","getRowsForRange","minRowIndex","beginRowEl","findLineNumRow","rowIndex","endRowEl","lineNum","startRow","endRow","table","el","rowOffset","row","rows","length","getLineNum","low","high","Math","min","i","round","value","found","j","guessRowNum","guessRow","oldHigh","oldLow","_begin","$row","addClass","$el","disableSelection","$commentFlag","find","click","reviewableView","createAndEditCommentBlock","$beginRow","$endRow","_addRow","max","_highlightRow","$lineNumCell","cells","css","offset","top","show","removeClass","_removeOldRows","destRowIndex","_removeSelectionClasses","enableSelection","startRowIndex","endRowIndex","cell","tagName","parentNode","getAttribute","$node","hasClass","_onCopy","e","clipboardData","originalEvent","_copySelectionToClipboard","preventDefault","stopPropagation","_findPreTags","result","parentEl","tdClass","excludeTBodyClass","children","node","nodeType","Node","ELEMENT_NODE","push","navigator","appVersion","includes","_selectedCellIndex","sel","textParts","rangeCount","range","getRangeAt","collapsed","nodes","doc","textContent","text","setData","join","target","parentsUntil","cellIndex","stopImmediatePropagation","relTarget","relatedTarget","_onTouchStart","firstTouch","targetTouches","_onTouchEnd","changedTouches","document","elementFromPoint","clientX","clientY","_onTouchMove","_onTouchCancel","parseInt"],"sources":["../../../../../static/rb/js/views/textCommentRowSelector.es6.js"],"sourcesContent":["/*\n * Provides multi-line commenting capabilities for a diff.\n *\n * This tacks on commenting capabilities onto a DiffReviewableView's\n * element. It listens for mouse events that begin/end the creation of\n * a new comment.\n */\nRB.TextCommentRowSelector = Backbone.View.extend({\n    ghostCommentFlagTemplate: dedent`\n        <span class=\"commentflag ghost-commentflag\">\n         <span class=\"commentflag-shadow\"></span>\n         <span class=\"commentflag-inner\"></span>\n        </span>\n    `,\n\n    events: {\n        'copy': '_onCopy',\n        'mousedown': '_onMouseDown',\n        'mouseup': '_onMouseUp',\n        'mouseover': '_onMouseOver',\n        'mouseout': '_onMouseOut',\n        'touchstart': '_onTouchStart',\n        'touchend': '_onTouchEnd',\n        'touchmove': '_onTouchMove',\n        'touchcancel': '_onTouchCancel',\n    },\n\n    /**\n     * Initialize the commenting selector.\n     *\n     * Args:\n     *     options (object):\n     *         Options for initializing the view.\n     *\n     * Option Args:\n     *     reviewableView (RB.AbstractReviewableView):\n     *         The view that will create the comment based on the selection we\n     *         provide.\n     */\n    initialize(options) {\n        this.options = options;\n        this._$begin = null;\n        this._$end = null;\n        this._beginLineNum = 0;\n        this._endLineNum = 0;\n        this._lastSeenIndex = 0;\n        this._selectionClass = null;\n\n        /*\n         * Support setting the clipboard only if we have the necessary\n         * functions. This may still be turned off later if we can't\n         * actually set the data.\n         */\n        this._supportsSetClipboard = (\n            window.getSelection !== undefined &&\n            window.Range !== undefined &&\n            window.Range.prototype.cloneContents !== undefined);\n\n        this._newlineChar = null;\n\n        this._$ghostCommentFlag = null;\n        this._$ghostCommentFlagCell = null;\n    },\n\n    /**\n     * Remove the selector from the DOM.\n     */\n    remove() {\n        Backbone.View.prototype.remove.call(this);\n\n        this._$ghostCommentFlag.remove();\n    },\n\n    /**\n     * Render the selector.\n     *\n     * Returns:\n     *     RB.TextCommentRowSelector:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$ghostCommentFlag = $(this.ghostCommentFlagTemplate)\n            .on({\n                mousedown: _.bind(this._onMouseDown, this),\n                mouseup: _.bind(this._onMouseUp, this),\n                mouseover: _.bind(this._onMouseOver, this),\n                mouseout: _.bind(this._onMouseOut, this)\n            })\n            .hide()\n            .appendTo('body');\n\n        return this;\n    },\n\n   /**\n    * Create a comment for a chunk of a diff.\n    *\n    * Args:\n    *     beginLineNum (number):\n    *         The first line number of the range being commented upon.\n    *\n    *     endLineNum (number):\n    *         The last line number of the range being commented upon.\n    *\n    *     beginNode (Element):\n    *         The element for the first row of the range being commented on.\n    *\n    *     endNode (Element):\n    *         The element of the last row of the range being commented on.\n    */\n    createComment(beginLineNum, endLineNum, beginNode, endNode) {\n        this._beginLineNum = beginLineNum;\n        this._endLineNum = endLineNum;\n        this._$begin = this._getActualLineNumCell($(beginNode)).parent();\n        this._$end = this._getActualLineNumCell($(endNode)).parent();\n\n        if (this._isLineNumCell(endNode)) {\n            this._end(this._getActualLineNumCell($(endNode)).parent());\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Return the beginning and end rows for a given line number range.\n     *\n     * Args:\n     *      beginLineNum (number):\n     *         The first line number of the range.\n     *\n     *      endLineNum (number):\n     *         The last line number of the range.\n     *\n     *      minRowIndex (number):\n     *         A minimum row index to constrain the search to.\n     *\n     *         No rows with indices less than this will be searched.\n     *\n     * Returns:\n     *     array of Element:\n     *     If the row corresponding to ``beginLineNum`` cannot be found, the\n     *     return value with be ``null``.\n     *\n     *     Otherwise, this will be a 2 element array containing:\n     *\n     *     * The :js:class:`Element` for the row corresponding to\n     *       ``beginLineNum``.\n     *     * The :js:class:`Element` for the row corresponding to\n     *       ``endLineNum``, or ``null`` if it cannot be found.\n     */\n    getRowsForRange(beginLineNum, endLineNum, minRowIndex) {\n        const beginRowEl = this.findLineNumRow(beginLineNum, minRowIndex);\n\n        if (beginRowEl) {\n            const rowIndex = beginRowEl.rowIndex;\n            const endRowEl = (\n                endLineNum === beginLineNum\n                ? beginRowEl\n                : this.findLineNumRow(\n                    endLineNum,\n                    rowIndex,\n                    rowIndex + endLineNum - beginLineNum)\n            );\n\n            return [beginRowEl, endRowEl];\n        } else {\n            return null;\n        }\n    },\n\n    /**\n     * Find the row in a table matching the specified line number.\n     *\n     * This will perform a binary search of the lines trying to find\n     * the matching line number. It will then return the row element,\n     * if found.\n     *\n     * Args:\n     *     lineNum (number):\n     *         The line number to find.\n     *\n     *     startRow (number):\n     *         The index of the row to start the search at.\n     *\n     *     endRow (number):\n     *         The index of the row to end the sarch at.\n     */\n    findLineNumRow(lineNum, startRow, endRow) {\n        const table = this.el;\n        const rowOffset = 1; // Get past the headers.\n        let row = null;\n\n        if (table.rows.length - rowOffset > lineNum) {\n            row = table.rows[rowOffset + lineNum];\n\n            // Account for the \"x lines hidden\" row.\n            if (row && this.getLineNum(row) === lineNum) {\n                return row;\n            }\n        }\n\n        if (startRow) {\n            // startRow already includes the offset, so we need to remove it.\n            startRow -= rowOffset;\n        }\n\n        let low = startRow || 0;\n        let high = Math.min(endRow || table.rows.length, table.rows.length);\n\n        if (endRow !== undefined && endRow < table.rows.length) {\n            // See if we got lucky and found it in the last row.\n            if (this.getLineNum(table.rows[endRow]) === lineNum) {\n                return table.rows[endRow];\n            }\n        } else if (row !== null) {\n            /*\n             * We collapsed the rows (unless someone mucked with the DB),\n             * so the desired row is less than the row number retrieved.\n             */\n            high = Math.min(high, rowOffset + lineNum);\n        }\n\n        // Binary search for this cell.\n        for (let i = Math.round((low + high) / 2); low < high - 1;) {\n            row = table.rows[rowOffset + i];\n\n            if (!row) {\n                // This should not happen, unless we miscomputed high.\n                high--;\n\n                /*\n                 * This won't do much if low + high is odd, but we'll catch\n                 * up on the next iteration.\n                 */\n                i = Math.round((low + high) / 2);\n                continue;\n            }\n\n            let value = this.getLineNum(row);\n\n            if (!value) {\n                /*\n                 * Bad luck, let's look around.\n                 *\n                 * We'd expect to find a value on the first try, but the\n                 * following makes sure we explore all rows.\n                 */\n                let found = false;\n\n                for (let j = 1; j <= (high - low) / 2; j++) {\n                    row = table.rows[rowOffset + i + j];\n\n                    if (row && this.getLineNum(row)) {\n                        i = i + j;\n                        found = true;\n                        break;\n                    } else {\n                        row = table.rows[rowOffset + i - j];\n\n                        if (row && this.getLineNum(row)) {\n                            i = i - j;\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (found) {\n                    value = this.getLineNum(row);\n                } else {\n                    return null;\n                }\n            }\n\n            // See if we can use simple math to find the row quickly.\n            const guessRowNum = lineNum - value + rowOffset + i;\n\n            if (guessRowNum >= 0 && guessRowNum < table.rows.length) {\n                const guessRow = table.rows[guessRowNum];\n\n                if (guessRow && this.getLineNum(guessRow) === lineNum) {\n                    // We found it using maths!\n                    return guessRow;\n                }\n            }\n\n            const oldHigh = high;\n            const oldLow = low;\n\n            if (value > lineNum) {\n                high = i;\n            } else if (value < lineNum) {\n                low = i;\n            } else {\n                return row;\n            }\n\n            /*\n             * Make sure we don't get stuck in an infinite loop. This can happen\n             * when a comment is placed in a line that isn't being shown.\n             */\n            if (oldHigh === high && oldLow === low) {\n                break;\n            }\n\n            i = Math.round((low + high) / 2);\n        }\n\n        // Well.. damn. Ignore this then.\n        return null;\n    },\n\n    /**\n     * Begin the selection of line numbers.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The selected row.\n     */\n    _begin($row) {\n        const lineNum = this.getLineNum($row[0]);\n\n        this._$begin = $row;\n        this._$end = $row;\n        this._beginLineNum = lineNum;\n        this._endLineNum = lineNum;\n        this._lastSeenIndex = $row[0].rowIndex;\n\n        $row.addClass('selected');\n        this.$el.disableSelection();\n    },\n\n    /**\n     * Finalize the selection and pop up a comment dialog.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The selected row.\n     */\n    _end($row) {\n        if (this._beginLineNum === this._endLineNum) {\n            /* See if we have a comment flag on the selected row. */\n            const $commentFlag = $row.find('.commentflag');\n\n            if ($commentFlag.length === 1) {\n                $commentFlag.click();\n                return;\n            }\n        }\n\n        /*\n         * Selection was finalized. Create the comment block\n         * and show the comment dialog.\n         */\n        this.options.reviewableView.createAndEditCommentBlock({\n            beginLineNum: this._beginLineNum,\n            endLineNum: this._endLineNum,\n            $beginRow: this._$begin,\n            $endRow: this._$end\n        });\n    },\n\n    /**\n     * Add a row to the selection.\n     *\n     * This will update the selection range and mark the rows as selected.\n     *\n     * This row is assumed to be the most recently selected row, and\n     * will mark the new beginning or end of the selection.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The row to add to the selection.\n     */\n    _addRow($row) {\n        /* We have an active selection. */\n        const lineNum = this.getLineNum($row[0]);\n\n        if (lineNum < this._beginLineNum) {\n            this._$begin = $row;\n            this._beginLineNum = lineNum;\n        } else if (lineNum > this._beginLineNum) {\n            this._$end = $row;\n            this._endLineNum = lineNum;\n        }\n\n        const min = Math.min(this._lastSeenIndex, $row[0].rowIndex);\n        const max = Math.max(this._lastSeenIndex, $row[0].rowIndex);\n\n        for (let i = min; i <= max; i++) {\n            $(this.el.rows[i]).addClass('selected');\n        }\n\n        this._lastSeenIndex = $row[0].rowIndex;\n    },\n\n    /**\n     * Highlight a row.\n     *\n     * This will highlight a row and show a ghost comment flag. This is done\n     * when the mouse hovers over the row.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The row to highlight.\n     */\n    _highlightRow($row) {\n        const $lineNumCell = $($row[0].cells[0]);\n\n        /* See if we have a comment flag in here. */\n        if ($lineNumCell.find('.commentflag').length === 0) {\n            this._$ghostCommentFlag\n                .css('top', $row.offset().top - 1)\n                .show()\n                .parent()\n                    .removeClass('selected');\n            this._$ghostCommentFlagCell = $lineNumCell;\n        }\n\n        $row.addClass('selected');\n    },\n\n    /**\n     * Remove old rows from the selection based on the most recent selection.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The most recent row selection.\n     */\n    _removeOldRows($row) {\n        const destRowIndex = $row[0].rowIndex;\n\n        if (destRowIndex >= this._$begin[0].rowIndex) {\n            if (this._lastSeenIndex !== this._$end[0].rowIndex &&\n                this._lastSeenIndex < destRowIndex) {\n                /*\n                 * We're removing from the top of the range. The beginning\n                 * location will need to be moved.\n                 */\n                this._removeSelectionClasses(this._lastSeenIndex, destRowIndex);\n                this._$begin = $row;\n                this._beginLineNum = this.getLineNum($row[0]);\n            } else {\n                /*\n                 * We're removing from the bottom of the selection. The end\n                 * location will need to be moved.\n                 */\n                this._removeSelectionClasses(destRowIndex,\n                                             this._lastSeenIndex);\n\n                this._$end = $row;\n                this._endLineNum = this.getLineNum($row[0]);\n            }\n\n            this._lastSeenIndex = destRowIndex;\n        }\n    },\n\n    /**\n     * Reset the selection information.\n     */\n    _reset() {\n        if (this._$begin) {\n            /* Reset the selection. */\n            this._removeSelectionClasses(this._$begin[0].rowIndex,\n                                         this._$end[0].rowIndex);\n\n            this._$begin = null;\n            this._$end = null;\n            this._beginLineNum = 0;\n            this._endLineNum = 0;\n            this._lastSeenIndex = 0;\n        }\n\n        this._$ghostCommentFlagCell = null;\n\n        /* Re-enable text selection on IE */\n        this.$el.enableSelection();\n    },\n\n    /**\n     * Remove the selection classes on a range of rows.\n     *\n     * Args:\n     *     startRowIndex (number):\n     *         The row index to start removing selection classes at.\n     *\n     *     endRowIndex (number):\n     *         The row index to stop removing selection classes at.\n     */\n    _removeSelectionClasses(startRowIndex, endRowIndex) {\n        for (let i = startRowIndex; i <= endRowIndex; i++) {\n            $(this.el.rows[i]).removeClass('selected');\n        }\n    },\n\n    /**\n     * Return whether a particular cell is a line number cell.\n     *\n     * Args:\n     *     cell (Element):\n     *         The cell to inspect.\n     */\n    _isLineNumCell(cell) {\n        return cell.tagName === 'TH' &&\n               cell.parentNode.getAttribute('line');\n    },\n\n    /**\n     * Return the actual cell node in the table.\n     *\n     * If the node specified is the ghost flag, this will return the\n     * cell the ghost flag represents.\n     *\n     * If this is a comment flag inside a cell, this will return the\n     * comment flag's parent cell.\n     *\n     * If this is a code warning indicator, this will return its parent cell.\n     *\n     * Returns:\n     *     jQuery:\n     *     The row.\n     */\n    _getActualLineNumCell($node) {\n        if ($node.hasClass('commentflag')) {\n            if ($node[0] === this._$ghostCommentFlag[0]) {\n                return this._$ghostCommentFlagCell;\n            } else {\n                return $node.parent();\n            }\n        } else if ($node.hasClass('fa-warning')) {\n            return $node.parent();\n        }\n\n        return $node;\n    },\n\n    /**\n     * Handler for when the user copies text in a column.\n     *\n     * This will begin the process of capturing any selected text in\n     * a column to the clipboard in a cross-browser way.\n     */\n    _onCopy(e) {\n        const clipboardData = e.originalEvent.clipboardData ||\n                              window.clipboardData;\n\n        if (clipboardData && this._supportsSetClipboard &&\n            this._copySelectionToClipboard(clipboardData)) {\n            /*\n             * Prevent the default copy action from occurring.\n             */\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    },\n\n    /**\n     * Find the pre tags and push them into the result array.\n     *\n     * Args:\n     *     result (array):\n     *         The array for which all matching ``<pre>`` elements will be\n     *         pushed into.\n     *\n     *     parentEl (Element):\n     *         The parent element to search under.\n     *\n     *     tdClass (string):\n     *         The class of ``<td>`` elements to search.\n     *\n     *     excludeTBodyClass (string):\n     *         The class of the ``<tbody>`` to exclude.\n     */\n    _findPreTags(result, parentEl, tdClass, excludeTBodyClass) {\n        for (let i = 0; i < parentEl.children.length; i++) {\n            const node = parentEl.children[i];\n\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                if (node.tagName === 'PRE') {\n                    result.push(node);\n                } else if ((node.tagName !== 'TD' ||\n                            $(node).hasClass(tdClass)) &&\n                           (node.tagName !== 'TBODY' ||\n                            !$(node).hasClass(excludeTBodyClass))) {\n                    this._findPreTags(result, node, tdClass,\n                                      excludeTBodyClass);\n                }\n            }\n        }\n    },\n\n    /**\n     * Copy the current selection to the clipboard.\n     *\n     * This will locate the desired text to copy, based on the selection\n     * range within the column where selection started. It will then\n     * extract the code from the ``<pre>`` tags and build a string to set in\n     * the clipboard.\n     *\n     * This requires support in the browser for setting clipboard contents\n     * on copy. If the browser does not support this, the default behavior\n     * will be used.\n     *\n     * Args:\n     *     clipboardData (DataTransfer):\n     *         The clipboard data from the copy event.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not we successfully set the clipboard data.\n     */\n    _copySelectionToClipboard(clipboardData) {\n        let excludeTBodyClass;\n        let tdClass;\n\n        if (this._newlineChar === null) {\n            /*\n             * Figure out what newline character should be used on this\n             * platform. Ideally, we'd determine this from some browser\n             * behavior, but it doesn't seem that can be consistently\n             * determined.\n             */\n            if (navigator.appVersion.includes('Win')) {\n                this._newlineChar = '\\r\\n';\n            } else {\n                this._newlineChar = '\\n';\n            }\n        }\n\n        if (this._selectedCellIndex === 3 || this.$el.hasClass('newfile')) {\n            tdClass = 'r';\n            excludeTBodyClass = 'delete';\n        } else {\n            tdClass = 'l';\n            excludeTBodyClass = 'insert';\n        }\n\n        const sel = window.getSelection();\n        const textParts = [];\n\n        for (let i = 0; i < sel.rangeCount; i++) {\n            const range = sel.getRangeAt(i);\n\n            if (range.collapsed) {\n                continue;\n            }\n\n            const nodes = [];\n            const doc = range.cloneContents();\n            this._findPreTags(nodes, doc, tdClass, excludeTBodyClass);\n\n            if (nodes.length > 0) {\n                /*\n                 * The selection spans multiple rows. Find the blocks of text\n                 * in the column we want, and copy those to the clipboard.\n                 */\n                for (let j = 0; j < nodes.length; j++) {\n                    textParts.push(nodes[j].textContent);\n                }\n            } else {\n                /*\n                 * If we're here, then we selected a subset of a single\n                 * cell. There was only one Range, and no <pre> tags as\n                 * part of it. We can just grab the text of the document.\n                 *\n                 * (We don't really need to break here, but we're going to\n                 * in order to be clear that we're completely done.)\n                 */\n                textParts.push($(doc).text());\n                break;\n            }\n        }\n\n        try {\n            clipboardData.setData('text', textParts.join(this._newlineChar));\n        } catch (e) {\n            /* Let the native behavior take over. */\n            this._supportsSetClipboard = false;\n            return false;\n        }\n\n        return true;\n    },\n\n    /**\n     * Handle the mouse down event, which begins selection for comments.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mousedown`` event.\n     */\n    _onMouseDown(e) {\n        if (this._selectionClass) {\n            this.$el.removeClass(this._selectionClass);\n        }\n\n        const node = this._$ghostCommentFlagCell\n                   ? this._$ghostCommentFlagCell[0]\n                   : e.target;\n\n        if (this._isLineNumCell(node)) {\n            this._begin($(node.parentNode));\n        } else {\n            const $node = node.tagName === 'TD'\n                      ? $(node)\n                      : $(node).parentsUntil('tr', 'td');\n\n            if ($node.length > 0) {\n                this._selectionClass = 'selecting-col-' + $node[0].cellIndex;\n                this._selectedCellIndex = $node[0].cellIndex;\n                this.$el.addClass(this._selectionClass);\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse up event.\n     *\n     * This will finalize the selection of a range of lines, creating a new\n     * comment block and displaying the dialog.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseup`` event.\n     */\n    _onMouseUp(e) {\n        const node = this._$ghostCommentFlagCell\n                   ? this._$ghostCommentFlagCell[0]\n                   : e.target;\n\n        if (this._isLineNumCell(node)) {\n            this._end(this._getActualLineNumCell($(node)).parent());\n            e.stopImmediatePropagation();\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Handle the mouse over event.\n     *\n     * This will update the selection, if there is one, to include this row\n     * in the range, and set the \"selected\" class on the new row.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseover`` event.\n     */\n    _onMouseOver(e) {\n        const $node = this._getActualLineNumCell($(e.target));\n        const $row = $node.parent();\n\n        if (this._isLineNumCell($node[0])) {\n            if (this._$begin) {\n                this._addRow($row);\n            } else {\n                this._highlightRow($row);\n            }\n        } else if (this._$ghostCommentFlagCell &&\n                   $node[0] !== this._$ghostCommentFlagCell[0]) {\n            $row.removeClass('selected');\n        }\n    },\n\n    /**\n     * Handle the mouse out event.\n     *\n     * This will remove any lines outside the new range from the selection.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseout`` event.\n     */\n    _onMouseOut(e) {\n        const relTarget = e.relatedTarget;\n\n        if (relTarget !== this._$ghostCommentFlag[0]) {\n            this._$ghostCommentFlag.hide();\n            this._$ghostCommentFlagCell = null;\n        }\n\n        const $node = this._getActualLineNumCell($(e.target));\n\n        if (this._$begin) {\n            if (relTarget && this._isLineNumCell(relTarget)) {\n                this._removeOldRows($(relTarget.parentNode));\n            }\n        } else if ($node && this._isLineNumCell($node[0])) {\n            /*\n             * Opera seems to generate lots of spurious mouse-out\n             * events, which would cause us to get all sorts of\n             * errors in here unless we check the target above.\n             */\n            $node.parent().removeClass('selected');\n        }\n    },\n\n    /**\n     * Handle the beginning of a touch event.\n     *\n     * If the user is touching a line number, then this will begin tracking\n     * a new comment selection state, allowing them to either open an existing\n     * comment or create a new one.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchstart`` event.\n     */\n    _onTouchStart(e) {\n        const firstTouch = e.originalEvent.targetTouches[0];\n        const $node = this._getActualLineNumCell($(firstTouch.target));\n\n        if ($node !== null && this._isLineNumCell($node[0])) {\n            e.preventDefault();\n            this._begin($node.parent());\n        }\n    },\n\n    /**\n     * Handle the end of a touch event.\n     *\n     * If the user ended on a line number, then this will either open an\n     * existing comment (if the result was a single-line selection on the\n     * line of an existing comment) or create a new comment spanning all\n     * selected lines.\n     *\n     * If they ended outside of the line numbers column, then this will\n     * simply reset the selection.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchend`` event.\n     */\n    _onTouchEnd(e) {\n        const firstTouch = e.originalEvent.changedTouches[0];\n        const target = document.elementFromPoint(firstTouch.clientX,\n                                                 firstTouch.clientY);\n        const $node = this._getActualLineNumCell($(target));\n\n        if ($node !== null && this._isLineNumCell($node[0])) {\n            e.preventDefault();\n            this._end($node.parent());\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Handle touch movement events.\n     *\n     * If selecting up or down line numbers, this will update the selection\n     * to span all rows from the original line number first touched and the\n     * line number currently being touched.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchmove`` event.\n     */\n    _onTouchMove(e) {\n        const firstTouch = e.originalEvent.targetTouches[0];\n        const target = document.elementFromPoint(firstTouch.clientX,\n                                                 firstTouch.clientY);\n        const $node = this._getActualLineNumCell($(target));\n\n        if ($node !== null) {\n            const $row = $node.parent();\n\n            if (this._lastSeenIndex !== $row[0].rowIndex &&\n                this._isLineNumCell($node[0])) {\n                e.preventDefault();\n\n                this._removeOldRows($row);\n                this._addRow($row);\n            }\n        }\n    },\n\n    /**\n     * Handle touch cancellation events.\n     *\n     * This resets the line number selection. The user will need to begin the\n     * selection again.\n     */\n    _onTouchCancel() {\n        this._reset();\n    },\n\n    /**\n     * Return the line number for a row.\n     *\n     * Args:\n     *     row (Element):\n     *         The element to get the line number for.\n     *\n     * Returns:\n     *     number:\n     *     The line number.\n     */\n    getLineNum(row) {\n        return parseInt(row.getAttribute('line'), 10);\n    },\n});\n"],"mappings":"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"}