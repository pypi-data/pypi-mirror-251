{"version":3,"file":"screenshotThumbnailView.js","names":["RB","ScreenshotThumbnail","Backbone","View","extend","events","render","listenTo","model","$el","fadeOut","remove","$caption","find","inlineEditor","editIconClass","showButtons","on","beginEdit","trigger","cancel","complete","e","value","ready","set","save","_onDeleteClicked","preventDefault","stopPropagation","destroy"],"sources":["../../../../../static/rb/js/views/screenshotThumbnailView.es6.js"],"sourcesContent":["/**\n * Displays a thumbnail for a screenshot.\n *\n * Screenshot thumbnails allow the caption to be edited and the screenshot\n * to be deleted.\n *\n * This expects to take an existing element for the thumbnail contents, and\n * will attach handlers for interaction.\n *\n * The following signals are provided, on top of the standard Backbone.View\n * signals:\n *\n *     * beginEdit\n *       - Editing of the screenshot (caption) has begun.\n *\n *     * endEdit\n *       - Editing of the screenshot (caption) has finished.\n */\nRB.ScreenshotThumbnail = Backbone.View.extend({\n    events: {\n        'click a.delete': '_onDeleteClicked',\n    },\n\n    /**\n     * Render the thumbnail.\n     *\n     * This will listen for events on the screenshot and for events on the\n     * thumbnail itself (to allow for caption editing).\n     *\n     * Returns:\n     *     RB.ScreenshotThumbnail:\n     *     This object, for chaining.\n     */\n    render() {\n        this.listenTo(this.model, 'destroy', () => {\n            this.$el.fadeOut(() => this.remove());\n        });\n\n        this.$caption = this.$el.find('a.edit')\n            .inlineEditor({\n                editIconClass: 'rb-icon rb-icon-edit',\n                showButtons: false,\n            })\n            .on({\n                'beginEdit': () => this.trigger('beginEdit'),\n                'cancel': () => this.trigger('endEdit'),\n                'complete': async (e, value) => {\n                    /*\n                     * We want to set the caption after ready() finishes,\n                     * it case it loads state and overwrites.\n                     */\n                    await this.model.ready();\n                    this.model.set('caption', value);\n                    this.trigger('endEdit');\n                    await this.model.save();\n                }\n            });\n\n        return this;\n    },\n\n    /**\n     * Delete the screenshot.\n     *\n     * Once the screenshot has been deleted, the view will be removed.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the delete.\n     */\n    _onDeleteClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.model.destroy();\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,mBAAmB,GAAGC,QAAQ,CAACC,IAAI,CAACC,MAAM,CAAC;EAC1CC,MAAM,EAAE;IACJ,gBAAgB,EAAE;EACtB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACC,KAAK,EAAE,SAAS,EAAE,MAAM;MACvC,IAAI,CAACC,GAAG,CAACC,OAAO,CAAC,MAAM,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACH,GAAG,CAACI,IAAI,CAAC,QAAQ,CAAC,CAClCC,YAAY,CAAC;MACVC,aAAa,EAAE,sBAAsB;MACrCC,WAAW,EAAE;IACjB,CAAC,CAAC,CACDC,EAAE,CAAC;MACA,WAAW,EAAEC,CAAA,KAAM,IAAI,CAACC,OAAO,CAAC,WAAW,CAAC;MAC5C,QAAQ,EAAEC,CAAA,KAAM,IAAI,CAACD,OAAO,CAAC,SAAS,CAAC;MACvC,UAAU,EAAE,MAAAE,CAAOC,CAAC,EAAEC,KAAK,KAAK;QAC5B;AACpB;AACA;AACA;QACoB,MAAM,IAAI,CAACf,KAAK,CAACgB,KAAK,CAAC,CAAC;QACxB,IAAI,CAAChB,KAAK,CAACiB,GAAG,CAAC,SAAS,EAAEF,KAAK,CAAC;QAChC,IAAI,CAACJ,OAAO,CAAC,SAAS,CAAC;QACvB,MAAM,IAAI,CAACX,KAAK,CAACkB,IAAI,CAAC,CAAC;MAC3B;IACJ,CAAC,CAAC;IAEN,OAAO,IAAI;EACf,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,gBAAgBA,CAACL,CAAC,EAAE;IAChBA,CAAC,CAACM,cAAc,CAAC,CAAC;IAClBN,CAAC,CAACO,eAAe,CAAC,CAAC;IAEnB,IAAI,CAACrB,KAAK,CAACsB,OAAO,CAAC,CAAC;EACxB;AACJ,CAAC,CAAC"}