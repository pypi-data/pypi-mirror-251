{"version":3,"file":"textEditorView.js","names":["CodeMirror","defineSimpleMode","start","regex","token","next","defineMIME","CodeMirrorWrapper","Backbone","View","extend","initialize","options","codeMirrorOptions","mode","highlightFormatting","name","tokenTypeOverrides","code","list1","list2","list3","theme","lineWrapping","electricChars","styleSelectedText","extraKeys","autoSize","viewportMargin","Infinity","_codeMirror","parentEl","setElement","getWrapperElement","minHeight","undefined","$el","css","on","triggerHandler","trigger","isDirty","initialValue","getText","setText","text","setValue","getValue","insertLine","position","hasFocus","cursor","getCursor","line","getLine","Pos","length","endsWith","lastLine","replaceRange","getClientHeight","getScrollInfo","clientHeight","setSize","width","height","refresh","focus","TextAreaWrapper","tagName","autoSizeTextArea","appendTo","value","el","is","selectionEnd","endOfLine","indexOf","slice","innerWidth","innerHeight","RB","TextEditorView","className","defaultOptions","events","_files","_editor","_prevClientHeight","_","defaults","richText","_dropTarget","_value","_richTextDirty","bindRichText","bindRichTextAttr","model","attrName","UserSession","instance","get","setRichText","render","addClass","_hideEditor","_showEditor","listenTo","bindRichTextCheckbox","$checkbox","prop","bindRichTextVisibility","setVisible","show","hide","_onRemove","DnDUploader","unregisterDropTarget","EditorCls","registerDropTarget","gettext","_uploadImage","bind","throttle","remove","empty","_isImage","file","type","split","filename","toLowerCase","some","extension","userFileAttachment","UserFileAttachment","caption","save","then","set","catch","err","alert","message","getInlineEditorOptions","textEditor","matchHeight","multiline","createMultilineField","editor","$editor","element","origRichText","one","$buttons","inlineEditor","$span","$","attr","id","uniqueId","append","$markdownRef","href","MANUAL_URL","target","data","setFieldValue","getFieldValue","isFieldDirty","getFromInlineEditor"],"sources":["../../../../../../static/rb/js/ui/views/textEditorView.es6.js"],"sourcesContent":["(function() {\n\n\n/*\n * Define a CodeMirror mode we can plug in as the default below.\n *\n * This mode won't have any special highlighting, but will avoid the Markdown\n * mode's default behavior of rendering \"plain/text\" code (the default) the\n * same way as literal code, which we really want to avoid.\n */\nCodeMirror.defineSimpleMode('rb-text-plain', {\n    start: [\n        {\n            regex: /.*/,\n            token: 'rb-cm-codeblock-plain',\n            next: 'start',\n        },\n    ],\n});\n\nCodeMirror.defineMIME('text/plain', 'rb-text-plain');\n\n\n/**\n * Wraps CodeMirror, providing a standard interface for TextEditorView's usage.\n */\nconst CodeMirrorWrapper = Backbone.View.extend({\n    /**\n     * Initialize CodeMirrorWrapper.\n     *\n     * This will set up CodeMirror based on the objects, add it to the parent,\n     * and begin listening to events.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the wrapper.\n     *\n     * Option Args:\n     *     autoSize (boolean):\n     *         Whether the editor should automatically resize itself to fit its\n     *         container.\n     *\n     *     parentEl (Element):\n     *        The parent element for the editor.\n     *\n     *    minHeight (number):\n     *        The minimum vertical size of the editor.\n     */\n    initialize(options) {\n        this.options = options;\n\n        const codeMirrorOptions = {\n            mode: {\n                highlightFormatting: true,\n                name: 'gfm',\n\n                /*\n                 * The following token type overrides will be prefixed with\n                 * ``cm-`` when used as classes.\n                 */\n                tokenTypeOverrides: {\n                    code: 'rb-markdown-code',\n                    list1: 'rb-markdown-list1',\n                    list2: 'rb-markdown-list2',\n                    list3: 'rb-markdown-list3'\n                }\n            },\n            theme: 'rb default',\n            lineWrapping: true,\n            electricChars: false,\n            styleSelectedText: true,\n            extraKeys: {\n                'Home': 'goLineLeft',\n                'End': 'goLineRight',\n                'Enter': 'newlineAndIndentContinueMarkdownList',\n                'Shift-Tab': false,\n                'Tab': false\n            }\n        };\n\n        if (options.autoSize) {\n            codeMirrorOptions.viewportMargin = Infinity;\n        }\n\n        this._codeMirror = new CodeMirror(options.parentEl,\n                                          codeMirrorOptions);\n\n        this.setElement(this._codeMirror.getWrapperElement());\n\n        if (this.options.minHeight !== undefined) {\n            this.$el.css('min-height', this.options.minHeight);\n        }\n\n        this._codeMirror.on('viewportChange',\n                            () => this.$el.triggerHandler('resize'));\n        this._codeMirror.on('change', () => this.trigger('change'));\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        /*\n         * We cannot trust codeMirror's isClean() method.\n         *\n         * It is also possible for initialValue to be undefined, so we use an\n         * empty string in that case instead.\n         */\n        return (initialValue || '') !== this.getText();\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        this._codeMirror.setValue(text);\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this._codeMirror.getValue();\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * If the editor has focus, insert at the cursor position. Otherwise,\n     * insert at the end.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        let position;\n\n        if (this._codeMirror.hasFocus()) {\n            const cursor = this._codeMirror.getCursor();\n            const line = this._codeMirror.getLine(cursor.line);\n            position = CodeMirror.Pos(cursor.line, line.length - 1);\n\n            if (line.length !== 0) {\n                /*\n                 * If the current line has some content, insert the new text on\n                 * the line after it.\n                 */\n                text = '\\n' + text;\n            }\n\n            if (!text.endsWith('\\n')) {\n                text += '\\n';\n            }\n        } else {\n            position = CodeMirror.Pos(this._codeMirror.lastLine());\n            text = '\\n' + text;\n        }\n\n        this._codeMirror.replaceRange(text, position);\n    },\n\n    /**\n     * Return the full client height of the content.\n     *\n     * Returns:\n     *     number:\n     *     The client height of the editor.\n     */\n    getClientHeight() {\n        return this._codeMirror.getScrollInfo().clientHeight;\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        this._codeMirror.setSize(width, height);\n        this._codeMirror.refresh();\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        this._codeMirror.focus();\n    }\n});\n\n\n/**\n * Wraps <textarea>, providing a standard interface for TextEditorView's usage.\n */\nconst TextAreaWrapper = Backbone.View.extend({\n    tagName: 'textarea',\n\n    /*\n     * Initialize TextAreaWrapper.\n     *\n     * This will set up the element based on the provided options, begin\n     * listening for events, and add the element to the parent.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the wrapper.\n     *\n     * Option Args:\n     *     autoSize (boolean):\n     *         Whether the editor should automatically resize itself to fit its\n     *         container.\n     *\n     *     parentEl (Element):\n     *        The parent element for the editor.\n     *\n     *    minHeight (number):\n     *        The minimum vertical size of the editor.\n     */\n    initialize(options) {\n        this.options = options;\n\n        if (options.autoSize) {\n            this.$el.autoSizeTextArea();\n        }\n\n        this.$el\n            .css('width', '100%')\n            .appendTo(options.parentEl)\n            .on('change keydown keyup keypress', () => this.trigger('change'));\n\n        if (options.minHeight !== undefined) {\n            if (options.autoSize) {\n                this.$el.autoSizeTextArea('setMinHeight',\n                                          options.minHeight);\n            } else {\n                this.$el.css('min-height', this.options.minHeight);\n            }\n        }\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        const value = this.el.value || '';\n\n        return value.length !== initialValue.length ||\n               value !== initialValue;\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        this.el.value = text;\n\n        if (this.options.autoSize) {\n            this.$el.autoSizeTextArea('autoSize');\n        }\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this.el.value;\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        if (this.$el.is(':focus')) {\n            const value = this.el.value;\n            const cursor = this.el.selectionEnd;\n            const endOfLine = value.indexOf('\\n', cursor);\n\n            if (endOfLine === -1) {\n                // The cursor is on the last line.\n                this.el.value += '\\n' + text;\n            } else {\n                // The cursor is in the middle of the text.\n                this.el.value = (value.slice(0, endOfLine + 1) + '\\n' + text +\n                                 '\\n' + value.slice(endOfLine));\n            }\n        } else {\n            this.el.value += '\\n' + text;\n        }\n    },\n\n    /**\n     * Return the full client height of the content.\n     *\n     * Returns:\n     *     number:\n     *     The client height of the editor.\n     */\n    getClientHeight() {\n        return this.el.clientHeight;\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        if (width !== null) {\n            this.$el.innerWidth(width);\n        }\n\n        if (height !== null) {\n            if (height === 'auto' && this.options.autoSize) {\n                this.$el.autoSizeTextArea('autoSize', true);\n            } else {\n                this.$el.innerHeight(height);\n            }\n        }\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        this.$el.focus();\n    }\n});\n\n\n/**\n * Provides an editor for editing plain or Markdown text.\n *\n * The editor allows for switching between plain or Markdown text on-the-fly.\n *\n * When editing plain text, this uses a standard textarea widget.\n *\n * When editing Markdown, this makes use of CodeMirror. All Markdown content\n * will be formatted as the user types, making it easier to notice when a\n * stray _ or ` will cause Markdown-specific behavior.\n */\nRB.TextEditorView = Backbone.View.extend({\n    className: 'text-editor',\n\n    defaultOptions: {\n        autoSize: true,\n        minHeight: 70\n    },\n\n    events: {\n        'focus': 'focus',\n        'remove': '_onRemove'\n    },\n\n    /**\n     * Initialize the view with any provided options.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     richText (boolean):\n     *         Whether the editor is using rich text (Markdown).\n     *\n     *     text (string):\n     *         The initial text.\n     *\n     *     bindRichText (object):\n     *         An object with ``model`` and ``attrName`` keys, for when the\n     *         rich text should be bound to an attribute on another model.\n     */\n    initialize(options={}) {\n        this._files = [];\n        this._editor = null;\n        this._prevClientHeight = null;\n\n        this.options = _.defaults(options, this.defaultOptions);\n        this.richText = !!this.options.richText;\n        this._dropTarget = null;\n        this._value = this.options.text || '';\n        this._richTextDirty = false;\n\n        if (this.options.bindRichText) {\n            this.bindRichTextAttr(this.options.bindRichText.model,\n                                  this.options.bindRichText.attrName);\n        }\n\n        /*\n         * If the user is defaulting to rich text, we're going to want to\n         * show the rich text UI by default, even if any bound rich text\n         * flag is set to False.\n         *\n         * This requires cooperation with the template or API results\n         * that end up backing this TextEditor. The expectation is that\n         * those will be providing escaped data for any plain text, if\n         * the user's set to use rich text by default. If this expectation\n         * holds, the user will have a consistent experience for any new\n         * text fields.\n         */\n        if (RB.UserSession.instance.get('defaultUseRichText')) {\n            this.setRichText(true);\n        }\n    },\n\n    /**\n     * Render the text editor.\n     *\n     * This will set the class name on the element, ensuring we have a\n     * standard set of styles, even if this editor is bound to an existing\n     * element.\n     *\n     * Returns:\n     *     RB.TextEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.addClass(this.className);\n\n        return this;\n    },\n\n    /**\n     * Set whether or not rich text (Markdown) is to be used.\n     *\n     * This can dynamically change the text editor to work in plain text\n     * or Markdown.\n     *\n     * Args:\n     *     richText (boolean):\n     *         Whether the editor should use rich text.\n     */\n    setRichText(richText) {\n        if (richText === this.richText) {\n            return;\n        }\n\n        if (this._editor) {\n            this._hideEditor();\n            this.richText = richText;\n            this._showEditor();\n\n            this._richTextDirty = true;\n\n            this.$el.triggerHandler('resize');\n        } else {\n            this.richText = richText;\n        }\n\n        this.trigger('change:richText', richText);\n        this.trigger('change');\n    },\n\n    /**\n     * Bind a richText attribute on a model to the mode on this editor.\n     *\n     * This editor's richText setting will stay in sync with the attribute\n     * on the given mode.\n     *\n     * Args:\n     *     model (Backbone.Model):\n     *         A model to bind to.\n     *\n     *     attrName (string):\n     *         The name of the attribute to bind.\n     */\n    bindRichTextAttr(model, attrName) {\n        this.setRichText(model.get(attrName));\n\n        this.listenTo(model, `change:${attrName}`,\n                      (model, value) => this.setRichText(value));\n    },\n\n    /**\n     * Bind an Enable Markdown checkbox to this text editor.\n     *\n     * The checkbox will initially be set to the value of the editor's\n     * richText property. Toggling the checkbox will then manipulate that\n     * property.\n     *\n     * Args:\n     *     $checkbox (jQuery):\n     *         The checkbox to bind.\n     */\n    bindRichTextCheckbox($checkbox) {\n        $checkbox\n            .prop('checked', this.richText)\n            .on('change', () => this.setRichText($checkbox.prop('checked')));\n\n        this.on('change:richText',\n                () => $checkbox.prop('checked', this.richText));\n    },\n\n    /**\n     * Bind the visibility of an element to the richText property.\n     *\n     * If richText ist true, the element will be shown. Otherwise, it\n     * will be hidden.\n     *\n     * Args:\n     *     $el (jQuery):\n     *         The element to show when richText is true.\n     */\n    bindRichTextVisibility($el) {\n        $el.setVisible(this.richText);\n\n        this.on('change:richText', () => $el.setVisible(this.richText));\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        return this._editor !== null &&\n               (this._richTextDirty ||\n                this._editor.isDirty(initialValue || ''));\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        if (text !== this.getText()) {\n            if (this._editor) {\n                this._editor.setText(text);\n            } else {\n                this._value = text;\n            }\n        }\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this._editor ? this._editor.getText() : this._value;\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        if (this._editor) {\n            this._editor.insertLine(text);\n        } else {\n            if (this._value.endsWith('\\n')) {\n                this._value += text + '\\n';\n            } else {\n                this._value += '\\n' + text;\n            }\n        }\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        if (this._editor) {\n            this._editor.setSize(width, height);\n        }\n    },\n\n    /**\n     * Show the editor.\n     */\n    show() {\n        this.$el.show();\n        this._showEditor();\n    },\n\n    /**\n     * Hide the editor.\n     */\n    hide() {\n        this._hideEditor();\n        this.$el.hide();\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        if (this._editor) {\n            this._editor.focus();\n        }\n    },\n\n    /**\n     * Handler for the remove event.\n     *\n     * Disables the drag-and-drop overlay.\n     */\n    _onRemove() {\n        RB.DnDUploader.instance.unregisterDropTarget(this.$el);\n    },\n\n    /**\n     * Show the actual editor wrapper.\n     *\n     * Any stored text will be transferred to the editor, and the editor\n     * will take control over all operations.\n     */\n    _showEditor() {\n        const EditorCls = this.richText ? CodeMirrorWrapper : TextAreaWrapper;\n\n        if (this.richText) {\n            RB.DnDUploader.instance.registerDropTarget(\n                this.$el, gettext('Drop to add an image'),\n                this._uploadImage.bind(this));\n        }\n\n        this._editor = new EditorCls({\n            parentEl: this.el,\n            autoSize: this.options.autoSize,\n            minHeight: this.options.minHeight\n        });\n\n        this._editor.setText(this._value);\n        this._value = '';\n        this._richTextDirty = false;\n        this._prevClientHeight = null;\n\n        this._editor.$el.on(\n            'resize',\n            _.throttle(() => this.$el.triggerHandler('resize'), 250));\n\n        this.listenTo(this._editor, 'change', _.throttle(() => {\n            /*\n             * Make sure that the editor wasn't closed before the throttled\n             * handler was reached.\n             */\n            if (this._editor === null) {\n                return;\n            }\n\n            const clientHeight = this._editor.getClientHeight();\n\n            if (clientHeight !== this._prevClientHeight) {\n                this._prevClientHeight = clientHeight;\n                this.$el.triggerHandler('resize');\n            }\n\n            this.trigger('change');\n        }, 500));\n\n        this.focus();\n    },\n\n    /**\n     * Hide the actual editor wrapper.\n     *\n     * The last value from the editor will be stored for later retrieval.\n     */\n    _hideEditor() {\n        RB.DnDUploader.instance.unregisterDropTarget(this.$el);\n\n        if (this._editor) {\n            this._value = this._editor.getText();\n            this._richTextDirty = false;\n            this._editor.remove();\n            this._editor = null;\n\n            this.$el.empty();\n        }\n    },\n\n    /**\n     * Return whether or not a given file is an image.\n     *\n     * Args:\n     *     file (File):\n     *         The file to check.\n     *\n     * Returns:\n     *     boolean:\n     *     True if the given file appears to be an image.\n     */\n    _isImage(file) {\n        if (file.type) {\n            return (file.type.split('/')[0] === 'image');\n        }\n\n        const filename = file.name.toLowerCase();\n        return ['.jpeg', '.jpg', '.png', '.gif', '.bmp', '.tiff', '.svg'].some(\n            extension => filename.endsWith(extension));\n    },\n\n    /**\n     * Upload the image and append an image link to the editor's contents.\n     *\n     * Creates an instance of UserFileAttachment and saves it without the file,\n     * then updates the model with the file. This allows the file to be\n     * uploaded asynchronously after we get the link that is generated when the\n     * UserFileAttachment is created.\n     *\n     * Args:\n     *     file (File):\n     *         The image file to upload.\n     */\n    _uploadImage(file) {\n        if (!this._isImage(file)) {\n            return;\n        }\n\n        const userFileAttachment = new RB.UserFileAttachment({\n            caption: file.name,\n        });\n\n        userFileAttachment.save()\n            .then(() => {\n                this.insertLine(\n                    `![Image](${userFileAttachment.get('downloadURL')})`);\n\n                userFileAttachment.set('file', file);\n                userFileAttachment.save()\n                    .catch(err => alert(err.message));\n            })\n            .catch(err => alert(err.message));\n    }\n}, {\n    /**\n     * Return options used to display a TextEditorView in an inlineEditor.\n     *\n     * Args:\n     *     options (object):\n     *         Options to be passed on to the TextEditorView.\n     *\n     * Returns:\n     *     object:\n     *     An options object to be used with an inlineEditor. The resulting\n     *     inlineEditor will make use of the TextEditorView instead of its\n     *     default textarea.\n     */\n    getInlineEditorOptions(options) {\n        let textEditor;\n\n        return {\n            matchHeight: false,\n            multiline: true,\n\n            createMultilineField(editor) {\n                const $editor = editor.element;\n                let origRichText;\n\n                textEditor = new RB.TextEditorView(options);\n                textEditor.render();\n\n                $editor.one('beginEdit', function() {\n                    const $buttons = $editor.inlineEditor('buttons');\n                    const $span = $('<span class=\"enable-markdown\" />');\n\n                    const $checkbox = $('<input/>')\n                        .attr({\n                            id: _.uniqueId('markdown_check'),\n                            type: 'checkbox'\n                        })\n                        .appendTo($span);\n                    textEditor.bindRichTextCheckbox($checkbox);\n\n                    $span.append($('<label/>')\n                        .attr('for', $checkbox[0].id)\n                        .text(gettext('Enable Markdown')));\n\n                    $buttons.append($span);\n\n                    const $markdownRef = $('<a/>')\n                        .addClass('markdown-info')\n                        .attr({\n                            href: MANUAL_URL + 'users/markdown/',\n                            target: '_blank'\n                        })\n                        .text(gettext('Markdown Reference'))\n                        .setVisible(textEditor.richText)\n                        .appendTo($buttons);\n                    textEditor.bindRichTextVisibility($markdownRef);\n                });\n\n                $editor.on('beginEdit', function() {\n                    textEditor._showEditor();\n                    origRichText = textEditor.richText;\n                });\n\n                $editor.on('cancel', function() {\n                    textEditor._hideEditor();\n                    textEditor.setRichText(origRichText);\n                });\n\n                $editor.on('complete', function() {\n                    textEditor._hideEditor();\n                });\n\n                textEditor.$el.data('text-editor', textEditor);\n\n                return textEditor.$el;\n            },\n\n            setFieldValue(editor, value) {\n                textEditor.setText(value || '');\n            },\n\n            getFieldValue() {\n                return textEditor.getText();\n            },\n\n            isFieldDirty(editor, initialValue) {\n                return textEditor.isDirty(initialValue);\n            }\n        };\n    },\n\n    /**\n     * Return the TextEditorView for an inlineEditor element.\n     *\n     * Returns:\n     *     TextEditorView:\n     *     The view corresponding to the editor.\n     */\n    getFromInlineEditor($editor) {\n        return $editor.inlineEditor('field').data('text-editor');\n    }\n});\n\n\n})();\n"],"mappings":"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"}