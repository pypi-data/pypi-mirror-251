{"version":3,"file":"userSessionModel.js","names":["Item","RB","BaseResource","extend","defaults","_","baseURL","loaded","objectID","stored","prototype","url","get","isNew","toJSON","object_id","undefined","parse","StoredItems","addError","removeError","addImmediately","obj","options","context","isFunction","success","error","complete","console","warn","promiseToCallbacks","newOptions","item","id","save","Promise","reject","Error","removeImmediately","resolve","destroy","UserSession","Backbone","Model","archivedReviewRequestsURL","authenticated","diffsShowExtraWhitespace","fullName","loginURL","mutedReviewRequestsURL","readOnly","sessionURL","timezoneOffset","userFileAttachmentsURL","userPageURL","username","watchedReviewGroupsURL","watchedReviewRequestsURL","initialize","watchedGroups","gettext","watchedReviewRequests","archivedReviewRequests","mutedReviewRequests","_bindCookie","attr","cookieName","deserialize","value","toggleAttr","set","getAvatarHTML","size","urls","getAvatarURLs","identity","serialize","toString","$","cookie","on","model","path","SITE_ROOT","instance","ARCHIVED","MUTED","create","assert"],"sources":["../../../../../static/rb/js/models/userSessionModel.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * An item in a StoredItems list.\n *\n * These are used internally to proxy object registration into a store list.\n * It is meant to be a temporary, internal object that can be created with\n * the proper data and then immediately saved or deleted.\n *\n * Model Attributes:\n *     baseURL (string):\n *         The root of the URL for the resource list.\n *\n *     loaded (boolean):\n *         Whether the item is loaded from the server.\n *\n *     objectID (string):\n *         The ID of the item.\n *\n *     stored (boolean):\n *         Whether or not the item has been stored on the server.\n */\nconst Item = RB.BaseResource.extend({\n    /**\n     * Return defaults for the model attributes.\n     *\n     * Returns:\n     *     object:\n     *     Default values for the attributes.\n     */\n    defaults() {\n        return _.defaults({\n            baseURL: null,\n            loaded: true,\n            objectID: null,\n            stored: false,\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    /**\n     * Return the URL for the item resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use for updating the item.\n     */\n    url() {\n        let url = this.get('baseURL');\n\n        if (this.get('stored')) {\n            url += this.get('objectID') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Return whether the item is new (not yet stored on the server).\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the item is new.\n     */\n    isNew() {\n        return !this.get('stored');\n    },\n\n    /**\n     * Return a JSON-serializable representation of the item.\n     *\n     * Returns:\n     *    object:\n     *    A representation of the item suitable for serializing to JSON.\n     */\n    toJSON() {\n        return {\n            object_id: this.get('objectID') || undefined,\n        };\n    },\n\n    /**\n     * Parse the response from the server.\n     */\n    parse(/* rsp */) {\n    },\n});\n\n\n/**\n * Manages a list of stored objects.\n *\n * This interfaces with a Watched Items resource (for groups or review\n * requests) and a Hidden Items resource, allowing immediate adding/removing\n * of objects.\n *\n * Model Attributes:\n *     addError (string):\n *         The error string to use when adding an item fails.\n *\n *     removeError (string):\n *         The error string to use when removing an item fails.\n */\nconst StoredItems = RB.BaseResource.extend({\n    /**\n     * Return the defaults for the model attributes.\n     *\n     * Returns:\n     *     object:\n     *     The default values for the model attributes.\n     */\n    defaults() {\n        return _.defaults({\n            addError: '',\n            removeError: '',\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    /**\n     * Return the URL for the resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL for the resource.\n     */\n    url() {\n        return this.get('url');\n    },\n\n    /**\n     * Immediately add an object to a stored list on the server.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated the options and context parameters and changed to return\n     *     a promise.\n     *\n     * Args:\n     *     obj (Item):\n     *         The item to add.\n     *\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to use when calling the callbacks in ``options``.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    addImmediately(obj, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('StoredItems.addImmediately was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.addImmediately(obj));\n        }\n\n        const url = this.url();\n\n        if (url) {\n            const item = new Item({\n                objectID: obj.id,\n                baseURL: url,\n            });\n\n            return item.save();\n        } else {\n            return Promise.reject(new Error(this.addError));\n        }\n    },\n\n    /**\n     * Immediately remove an object from a stored list on the server.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated the options and context parameters and changed to return\n     *     a promise.\n     *\n     * Args:\n     *     obj (Item):\n     *         The item to remove.\n     *\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to use when calling the callbacks in ``options``.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    removeImmediately(obj, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('StoredItems.removeImmediately was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.removeImmediately(obj));\n        }\n\n        const url = this.url();\n\n        return new Promise((resolve, reject) => {\n            if (url) {\n                const item = new Item({\n                    objectID: obj.id,\n                    baseURL: url,\n                    stored: true,\n                });\n\n                resolve(item.destroy());\n            } else {\n                reject(new Error(this.removeError));\n            }\n        });\n    },\n});\n\n\n/**\n * Manages the user's active session.\n *\n * This stores basic information on the user (the username and session API URL)\n * and utility objects such as the watched groups, watched review requests and\n * hidden review requests lists.\n *\n * There should only ever be one instance of a UserSession. It should always\n * be created through UserSession.create, and retrieved through\n * UserSession.instance.\n *\n * Model Attributes:\n *     archivedReviewRequestsURL (string):\n *         The URL for the archived review requests API resource.\n *\n *     authenticated (boolean):\n *         Whether the user is currently authenticated.\n *\n *     diffsShowExtraWhitespace (boolean):\n *         Whether the user wants to see diffs with excess whitespace\n *         highlighted.\n *\n *     fullName (string):\n *         The user's full name.\n *\n *     loginURL (string):\n *         The URL to the login page (if the user is anonymous).\n *\n *     mutedReviewRequestsURL (string):\n *         The URL for the archived review requests API resource.\n *\n *     readOnly (boolean):\n *         Whether the user is operating in read-only mode.\n *\n *     sessionURL (string):\n *         The URL to the session API resource.\n *\n *     timezoneOffset (string):\n *         The user's offset from UTC. This will be in the format that would\n *         attach to an ISO8601-style date, such as \"-0800\" for PST.\n *\n *     userFileAttachmentsURL (string):\n *         The URL for the user file attachments API resource.\n *\n *     userPageURL (string):\n *         The URL for the user's profile page.\n *\n *     username: (string):\n *         The user's username.\n *\n *     watchedReviewGroupsURL (string):\n *         The URL for the watched review groups API resource.\n *\n *     watchedReviewRequestsURL (string):\n *         The URL for the watched review requests API resource.\n */\nRB.UserSession = Backbone.Model.extend({\n    defaults: {\n        archivedReviewRequestsURL: null,\n        authenticated: false,\n        diffsShowExtraWhitespace: false,\n        fullName: null,\n        loginURL: null,\n        mutedReviewRequestsURL: null,\n        readOnly: false,\n        sessionURL: null,\n        timezoneOffset: '0',\n        userFileAttachmentsURL: null,\n        userPageURL: null,\n        username: null,\n        watchedReviewGroupsURL: null,\n        watchedReviewRequestsURL: null,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        this.watchedGroups = new StoredItems({\n            url: this.get('watchedReviewGroupsURL'),\n            addError: gettext('Must log in to add a watched item.'),\n            removeError: gettext('Must log in to remove a watched item.'),\n        });\n\n        this.watchedReviewRequests = new StoredItems({\n            url: this.get('watchedReviewRequestsURL'),\n            addError: gettext('Must log in to add a watched item.'),\n            removeError: gettext('Must log in to remove a watched item.'),\n        });\n\n        this.archivedReviewRequests = new StoredItems({\n            url: this.get('archivedReviewRequestsURL'),\n            removeError: gettext('Must log in to remove a archived item.'),\n            addError: gettext('Must log in to add an archived item.'),\n        });\n\n        this.mutedReviewRequests = new StoredItems({\n            url: this.get('mutedReviewRequestsURL'),\n            removeError: gettext('Must log in to remove a muted item.'),\n            addError: gettext('Must log in to add a muted item.'),\n        });\n\n        this._bindCookie({\n            attr: 'diffsShowExtraWhitespace',\n            cookieName: 'show_ew',\n            deserialize: value => (value !== 'false'),\n        });\n    },\n\n    /**\n     * Toggle a boolean attribute.\n     *\n     * The attribute will be the inverse of the prior value.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to toggle.\n     */\n    toggleAttr(attr) {\n        this.set(attr, !this.get(attr));\n    },\n\n    /*\n     * Return avatar HTML for the user with the given size.\n     *\n     * Version Added:\n     *     3.0.19\n     *\n     * Args:\n     *     size (Number):\n     *         The size of the avatar, in pixels. This is both the width and\n     *         height.\n     *\n     * Return:\n     *     string:\n     *     The HTML for the avatar.\n     */\n    getAvatarHTML: function(size) {\n        var urls = this.get('avatarHTML') || {};\n        return urls[size] || '';\n    },\n\n    /**\n     * Return avatar URLs for the user with the given size.\n     *\n     * Deprecated:\n     *     3.0.19:\n     *     :js:meth:`getAvatarHTML` should be used instead.\n     *\n     * Args:\n     *     size (number):\n     *         The size of the avatar, in pixels. This is both the width and\n     *         height.\n     *\n     * Return:\n     *     object:\n     *     An object containing avatar URLs, if the requested avatar size is\n     *     available. This object will contain the following keys:\n     *\n     *     * ``1x``: The url for the avatar.\n     *     * ``2x``: The high-DPI URL for the avatar.\n     *\n     *     If the requested avatar size is unavailable, this function returns\n     *     an empty object.\n     */\n    getAvatarURLs(size) {\n        const urls = this.get('avatarURLs') || {};\n        return urls[size] || {};\n    },\n\n    /**\n     * Bind a cookie to an attribute.\n     *\n     * The initial value of the attribute will be set to that of the cookie.\n     *\n     * When the attribute changes, the cookie will be updated.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the bind.\n     *\n     * Option Args:\n     *    attr (string):\n     *        The name of the attribute to bind.\n     *\n     *    cookieName (string):\n     *        The name of the cookie to store.\n     *\n     *    deserialize (function, optional):\n     *        A deserialization function to use when fetching the attribute\n     *        value.\n     *\n     *    serialize (function, optional):\n     *        A serialization function to use when storing the attribute value.\n     */\n    _bindCookie(options) {\n        const deserialize = options.deserialize || _.identity;\n        const serialize = (options.serialize ||\n                           (value => value.toString()));\n\n        this.set(options.attr, deserialize($.cookie(options.cookieName)));\n\n        this.on(`change:${options.attr}`, (model, value) => {\n            $.cookie(options.cookieName, serialize(value), {\n                path: SITE_ROOT,\n            });\n        });\n    },\n}, {\n    instance: null,\n\n    ARCHIVED: 'A',\n    MUTED: 'M',\n\n    /**\n     * Create the UserSession for the current user.\n     *\n     * Only one will ever exist. Calling this a second time will assert.\n     *\n     * Args:\n     *     options (object):\n     *         Options to pass into the UserSession initializer.\n     *\n     * Returns:\n     *     RB.UserSession:\n     *     The user session instance.\n     */\n    create(options) {\n        console.assert(!RB.UserSession.instance,\n                       'UserSession.create can only be called once.');\n\n        RB.UserSession.instance = new RB.UserSession(options);\n        return RB.UserSession.instance;\n    },\n});\n\n\n})();\n"],"mappings":"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"}