{"version":3,"file":"resourceCollection.js","names":["RB","ResourceCollection","BaseCollection","extend","initialize","models","options","parentResource","extraQueryData","maxResults","hasPrev","hasNext","currentPage","totalResults","undefined","_fetchURL","_links","url","links","get","listKey","_","result","model","prototype","link","href","parse","rsp","total_results","fetchingAll","prev","next","page","fetch","context","isFunction","success","error","complete","console","warn","promiseToCallbacks","newOptions","data","start","reset","remove","expandedFields","length","expand","join","defaults","ready","call","fetchPrev","Promise","resolve","fetchNext","enforceHasNext","fetchAll","fetchOptions","_prepareModel","apply","arguments","set"],"sources":["../../../../../../static/rb/js/resources/collections/resourceCollection.es6.js"],"sourcesContent":["/**\n * Base collection for resource models.\n *\n * ResourceCollection handles the fetching of models from resource lists\n * in the API.\n *\n * It can do pagination by using fetchNext/fetchPrev. Callers can check\n * hasNext/hasPrev to determine if they've reached the end.\n *\n * To fetch one page at a time, use fetch(). This can take an optional\n * starting point.\n *\n * Use fetchAll to automatically paginate through all items and store them\n * all within the collection.\n */\nRB.ResourceCollection = RB.BaseCollection.extend({\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial set of models for the collection.\n     *\n     *     options (object):\n     *         Options for the collection.\n     *\n     * Option Args:\n     *     parentResource (RB.BaseResource):\n     *         The parent API resource.\n     *\n     *     extraQueryData (object):\n     *         Additional attributes to include in the API request query\n     *         string.\n     */\n    initialize(models, options) {\n        this.parentResource = options.parentResource;\n        this.extraQueryData = options.extraQueryData;\n        this.maxResults = options.maxResults;\n        this.hasPrev = false;\n        this.hasNext = false;\n        this.currentPage = 0;\n\n        /*\n         * Undefined means \"we don't know how many results there are.\"\n         * This is a valid value when parsing the payload later. It\n         * may also be a number.\n         */\n        this.totalResults = undefined;\n\n        this._fetchURL = null;\n        this._links = null;\n    },\n\n    /**\n     * Return the URL for fetching models.\n     *\n     * This will make use of a URL provided by fetchNext/fetchPrev/fetchAll,\n     * if provided.\n     *\n     * Otherwise, this will try to get the URL from the parent resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL to fetch.\n     */\n    url() {\n        if (this._fetchURL) {\n            return this._fetchURL;\n        }\n\n        if (this.parentResource) {\n            const links = this.parentResource.get('links');\n            const listKey = _.result(this.model.prototype, 'listKey');\n            const link = links[listKey];\n\n            return link ? link.href : null;\n        }\n\n        return null;\n    },\n\n    /**\n     * Parse the results from the list payload.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     *     options (object):\n     *         The options that were used for the fetch operation.\n     *\n     * Option Args:\n     *     fetchingAll (boolean):\n     *         Whether we're in the process of fetching all the items.\n     *\n     *     page (number):\n     *         The page of results that were fetched.\n     */\n    parse(rsp, options={}) {\n        const listKey = _.result(this.model.prototype, 'listKey');\n\n        this._links = rsp.links || null;\n        this.totalResults = rsp.total_results;\n\n        if (options.fetchingAll) {\n            this.hasPrev = false;\n            this.hasNext = false;\n            this.currentPage = 0;\n        } else {\n            this.totalResults = rsp.total_results;\n            this.hasPrev = (this._links !== null &&\n                            this._links.prev !== undefined);\n            this.hasNext = (this._links !== null &&\n                            this._links.next !== undefined);\n            this.currentPage = options.page;\n        }\n\n        return rsp[listKey];\n    },\n\n    /**\n     * Fetch models from the list.\n     *\n     * By default, this will replace the list of models in this collection.\n     * That can be changed by providing `reset: false` in options.\n     *\n     * The first page of resources will be fetched unless options.start is\n     * set. The value is the start position for the number of objects, not\n     * pages.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to be used when calling callbacks.\n     *\n     * Option Args:\n     *     start (string):\n     *         The start position to use when fetching paginated results.\n     *\n     *     maxResults (number):\n     *         The number of results to return.\n     *\n     *     reset (boolean):\n     *         Whether the collection should be reset with the newly-fetched\n     *         items, or those items should be appended to the collection.\n     *\n     *     data (object):\n     *         Data to pass to the API request.\n     *\n     *     success (function):\n     *         Callback to be called when the fetch is successful.\n     *\n     *     error (function):\n     *         Callback to be called when the fetch fails.\n     *\n     *     complete (function):\n     *         Callback to be called after either success or error.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the fetch operation is complete.\n     */\n    fetch: async function(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ResourceCollection.fetch was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.fetch(newOptions));\n        }\n\n        const data = _.extend({}, options.data);\n\n        if (options.start !== undefined) {\n            data.start = options.start;\n        }\n\n        /*\n         * There's a couple different ways that the max number of results\n         * can be specified. We'll want to support them all.\n         *\n         * If a value is passed in extraQueryData, it takes precedence.\n         * We'll just set it further down. Otherwise, options.maxResults\n         * will be used if passed, falling back on the maxResults passed\n         * during collection construction.\n         */\n        if (!this.extraQueryData ||\n            this.extraQueryData['max-results'] === undefined) {\n            if (options.maxResults !== undefined) {\n                data['max-results'] = options.maxResults;\n            } else if (this.maxResults) {\n                data['max-results'] = this.maxResults;\n            }\n        }\n\n        if (options.reset === undefined) {\n            options.reset = true;\n        }\n\n        /*\n         * Versions of Backbone prior to 1.1 won't respect the reset option,\n         * instead requiring we use 'remove'. Support this for compatibility,\n         * until we move to Backbone 1.1.\n         */\n        options.remove = options.reset;\n\n        const expandedFields = this.model.prototype.expandedFields;\n        if (expandedFields.length > 0) {\n            data.expand = expandedFields.join(',');\n        }\n\n        if (this.extraQueryData) {\n            _.defaults(data, this.extraQueryData);\n        }\n\n        options.data = data;\n\n        if (this.parentResource) {\n            await this.parentResource.ready();\n        }\n\n        await RB.BaseCollection.prototype.fetch.call(this, options);\n    },\n\n    /**\n     * Fetch the previous batch of models from the resource list.\n     *\n     * This requires hasPrev to be true, from a prior fetch.\n     *\n     * The collection's list of models will be replaced with the new list\n     * after the fetch succeeds. Each time fetchPrev is called, the collection\n     * will consist only of that page's batch of models. This can be overridden\n     * by providing `reset: false` in options.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    fetchPrev(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ResourceCollection.fetchPrev was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.fetchPrev(newOptions));\n        }\n\n        if (!this.hasPrev) {\n            return Promise.resolve();\n        }\n\n        this._fetchURL = this._links.prev.href;\n\n        return this.fetch(\n            _.defaults({\n                page: this.currentPage - 1\n            }, options));\n    },\n\n    /**\n     * Fetch the next batch of models from the resource list.\n     *\n     * This requires hasNext to be true, from a prior fetch.\n     *\n     * The collection's list of models will be replaced with the new list\n     * after the fetch succeeds. Each time fetchNext is called, the collection\n     * will consist only of that page's batch of models. This can be overridden\n     * by providing `reset: false` in options.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    fetchNext(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ResourceCollection.fetchNext was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.fetchNext(newOptions));\n        }\n\n        if (!this.hasNext && options.enforceHasNext !== false) {\n            return Promise.resolve();\n        }\n\n        this._fetchURL = this._links.next.href;\n\n        return this.fetch(\n            _.defaults({\n                page: this.currentPage + 1\n            }, options));\n    },\n\n    /**\n     * Fetch all models from the resource list.\n     *\n     * This will fetch all the models from a resource list on a server,\n     * paginating automatically until all models are fetched. The result is\n     * a list of models on the server.\n     *\n     * This differs from fetch/fetchPrev/fetchNext, which will replace the\n     * collection each time a page of resources are loaded.\n     *\n     * This can end up slowing down the server. Use it carefully.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async fetchAll(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ResourceCollection.fetchNext was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.fetchAll(newOptions));\n        }\n\n        const fetchOptions = _.defaults({\n            reset: false,\n            fetchingAll: true,\n            enforceHasNext: false,\n            maxResults: 50,\n        }, options);\n\n        this._fetchURL = null;\n\n        this.reset();\n\n        await this.fetch(fetchOptions);\n\n        while (this._links.next) {\n            await this.fetchNext(fetchOptions);\n        }\n    },\n\n    /**\n     * Prepare the model for the collection.\n     *\n     * This overrides Collection's _prepareModel to ensure that the resource\n     * has the proper parentObject set.\n     *\n     * Returns:\n     *     Backbone.Model:\n     *     The new model.\n     */\n    _prepareModel() {\n        const model = RB.BaseCollection.prototype._prepareModel.apply(this, arguments);\n\n        model.set('parentObject', this.parentResource);\n\n        return model;\n    },\n});\n"],"mappings":"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"}