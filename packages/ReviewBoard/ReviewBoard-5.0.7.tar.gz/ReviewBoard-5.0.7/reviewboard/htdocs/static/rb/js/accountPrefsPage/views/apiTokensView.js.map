{"version":3,"file":"apiTokensView.js","names":["POLICY_READ_WRITE","POLICY_READ_ONLY","POLICY_CUSTOM","POLICY_LABELS","gettext","APITokenItem","RB","Config","ResourceListItem","extend","defaults","_","policyType","lastUsed","localSiteName","showRemove","prototype","syncAttrs","initialize","_super","apply","arguments","on","_onPolicyTypeChanged","policy","get","_guessPolicyType","_policyMenuAction","id","label","children","_makePolicyAction","dispatchOnClick","actions","unshift","set","createResource","attrs","APIToken","userName","UserSession","instance","localSitePrefix","collection","saveExpires","expires","_saveAttribute","saveNote","note","savePolicy","attr","value","resource","ready","save","isEqual","defaultPolicies","readOnly","readWrite","options","type","name","propName","radioValue","trigger","newPolicy","console","assert","APITokenItemCollection","Backbone","Collection","model","models","PolicyEditorView","View","template","join","prevPolicyType","_codeMirror","_$policy","_$saveButtons","render","isEmpty","custom","$el","html","instructions","interpolate","MANUAL_URL","$","val","JSON","stringify","modalBox","title","buttons","click","bind","cancel","find","CodeMirror","fromTextArea","mode","lineNumbers","lineWrapping","matchBrackets","lint","onUpdateLinting","_onUpdateLinting","gutters","focus","remove","closeOnSave","policyStr","getValue","strip","parse","e","SyntaxError","alert","err","xhr","errorPayload","code","fields","msg","annotationsNotSorted","prop","length","APITokenItemView","Djblets","ListItemView","EMPTY_NOTE_PLACEHOLDER","events","actionHandlers","_$expires","_$note","_$tokenState","listenTo","_updateExpires","_updateNote","call","not","inlineEditor","editIconClass","beginEdit","complete","moment","local","format","expiresView","DateTimeInlineEditorView","el","descriptorText","formatResult","today","expired","isAfter","prefix","addClass","removeClass","rawValue","getActionsParent","getRenderContext","expiresTimeHTML","timesince","toggleClass","text","_onCopyClicked","preventDefault","stopPropagation","select","document","execCommand","_onCustomPolicyClicked","view","_onRemoveClicked","destroy","SiteAPITokensView","className","generateTokenTemplate","apiTokens","apiTokensList","List","_listView","ListView","ItemView","animateItems","prependTo","_$generateTokenItem","generateText","appendTo","getBody","_onGenerateClicked","apiToken","add","detach","APITokensView","_$listsContainer","_apiTokenViews","info","Object","entries","tokens","push"],"sources":["../../../../../../static/rb/js/accountPrefsPage/views/apiTokensView.es6.js"],"sourcesContent":["(function() {\n\n\nconst POLICY_READ_WRITE = 'rw';\nconst POLICY_READ_ONLY = 'ro';\nconst POLICY_CUSTOM = 'custom';\nconst POLICY_LABELS = {\n    [POLICY_READ_WRITE]: gettext('Full access'),\n    [POLICY_READ_ONLY]: gettext('Read-only'),\n    [POLICY_CUSTOM]: gettext('Custom')\n};\n\n\n/**\n * Represents an API token in the list.\n *\n * This provides actions for editing the policy type for the token and\n * removing the token.\n */\nconst APITokenItem = RB.Config.ResourceListItem.extend({\n    defaults: _.defaults({\n        policyType: POLICY_READ_WRITE,\n        lastUsed: null,\n        localSiteName: null,\n        showRemove: true,\n    }, RB.Config.ResourceListItem.prototype.defaults),\n\n    syncAttrs: [\n        'deprecated',\n        'expired',\n        'expires',\n        'id',\n        'invalidReason',\n        'invalidDate',\n        'lastUsed',\n        'note',\n        'policy',\n        'tokenValue',\n        'valid',\n    ],\n\n    /**\n     * Initialize the item.\n     *\n     * This computes the type of policy used, for display, and builds the\n     * policy actions menu.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this.on('change:policyType', this._onPolicyTypeChanged, this);\n\n        const policy = this.get('policy') || {};\n        const policyType = this._guessPolicyType(policy);\n\n        this._policyMenuAction = {\n            id: 'policy',\n            label: POLICY_LABELS[policyType],\n            children: [\n                this._makePolicyAction(POLICY_READ_WRITE),\n                this._makePolicyAction(POLICY_READ_ONLY),\n                this._makePolicyAction(POLICY_CUSTOM, {\n                    id: 'policy-custom',\n                    dispatchOnClick: true\n                })\n            ]\n        };\n        this.actions.unshift(this._policyMenuAction);\n\n        this.set('policyType', policyType);\n    },\n\n    /**\n     * Create an APIToken resource for the given attributes.\n     *\n     * Args:\n     *     attrs (object):\n     *         Additional attributes for the APIToken.\n     */\n    createResource(attrs) {\n        return new RB.APIToken(_.defaults({\n            userName: RB.UserSession.instance.get('username'),\n            localSitePrefix: this.collection.localSitePrefix\n        }, attrs));\n    },\n\n    /**\n     * Set the provided expiration date on the token and save it.\n     *\n     * Args:\n     *     expires (string):\n     *         The new expiration date for the token. If this is an\n     *         empty string, the token will be set to have no expiration.\n     */\n    saveExpires(expires) {\n        this._saveAttribute('expires', expires);\n    },\n\n    /**\n     * Set the provided note on the token and save it.\n     *\n     * Args:\n     *     note (string):\n     *         The new note for the token.\n     */\n    saveNote(note) {\n        this._saveAttribute('note', note);\n    },\n\n    /**\n     * Set the provided policy on the token and save it.\n     *\n     * Args:\n     *     policy (object):\n     *         The new policy for the token.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    savePolicy(policy) {\n        return this._saveAttribute('policy', policy);\n    },\n\n    /**\n     * Set an attribute on the token and save it.\n     *\n     * This is a helper function that will set an attribute on the token\n     * and save it, but only after the token is ready.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to set.\n     *\n     *     value (object or string):\n     *         The new value for the attribute.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async _saveAttribute(attr, value) {\n        await this.resource.ready();\n        this.resource.set(attr, value);\n        await this.resource.save();\n    },\n\n    /**\n     * Guess the policy type for a given policy definition.\n     *\n     * This compares the policy against the built-in versions that\n     * RB.APIToken provides. If one of them matches, the appropriate\n     * policy type will be returned. Otherwise, this assumes it's a\n     * custom policy.\n     *\n     * Args:\n     *     policy (object):\n     *         A policy object.\n     *\n     * Returns:\n     *     string:\n     *     The policy type enumeration corresponding to the policy.\n     */\n    _guessPolicyType(policy) {\n        if (_.isEqual(policy, RB.APIToken.defaultPolicies.readOnly)) {\n            return POLICY_READ_ONLY;\n        } else if (_.isEqual(policy, RB.APIToken.defaultPolicies.readWrite)) {\n            return POLICY_READ_WRITE;\n        } else {\n            return POLICY_CUSTOM;\n        }\n    },\n\n    /**\n     * Create and return an action for the policy menu.\n     *\n     * This takes a policy type and any options to include with the\n     * action definition. It will then return a suitable action,\n     * for display in the policy menu.\n     *\n     * Args:\n     *     policyType (string):\n     *         The policy type to create.\n     *\n     *     options (object):\n     *         Additional options to include in the new action definition.\n     */\n    _makePolicyAction(policyType, options) {\n        return _.defaults({\n            label: POLICY_LABELS[policyType],\n            type: 'radio',\n            name: 'policy-type',\n            propName: 'policyType',\n            radioValue: policyType\n        }, options);\n    },\n\n    /**\n     * Handler for when the policy type changes.\n     *\n     * This will set the policy menu's label to that of the selected\n     * policy and rebuild the menu.\n     *\n     * Then, if not using a custom policy, the built-in policy definition\n     * matching the selected policy will be saved to the server.\n     */\n    _onPolicyTypeChanged() {\n        const policyType = this.get('policyType');\n\n        this._policyMenuAction.label = POLICY_LABELS[policyType];\n        this.trigger('actionsChanged');\n\n        let newPolicy = null;\n\n        if (policyType === POLICY_READ_ONLY) {\n            newPolicy = RB.APIToken.defaultPolicies.readOnly;\n        } else if (policyType === POLICY_READ_WRITE) {\n            newPolicy = RB.APIToken.defaultPolicies.readWrite;\n        } else {\n            return;\n        }\n\n        console.assert(newPolicy !== null);\n\n        if (!_.isEqual(newPolicy, this.get('policy'))) {\n            this.savePolicy(newPolicy);\n        }\n    }\n});\n\n\n/**\n * A collection of APITokenItems.\n *\n * This works like a standard Backbone.Collection, but can also have\n * a LocalSite URL prefix attached to it, for use in API calls in\n * APITokenItem.\n */\nconst APITokenItemCollection = Backbone.Collection.extend({\n    model: APITokenItem,\n\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial models for the collection.\n     *\n     *     options (object):\n     *         Additional options for the collection.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the current local site, if any.\n     */\n    initialize(models, options) {\n        this.localSitePrefix = options.localSitePrefix;\n    }\n});\n\n\n/**\n * Provides an editor for constructing or modifying a custom policy definition.\n *\n * This renders as a modalBox with a CodeMirror editor inside of it. The\n * editor is set to allow easy editing of a JSON payload, complete with\n * lintian checking. Only valid policy payloads can be saved to the server.\n */\nconst PolicyEditorView = Backbone.View.extend({\n    id: 'custom_policy_editor',\n\n    template: _.template([\n        '<p><%= instructions %></p>',\n        '<textarea/>'\n    ].join('')),\n\n    /**\n     * Initialize the editor.\n     *\n     * Args:\n     *     options (object):\n     *         Additional options for view construction.\n     *\n     * Option Args:\n     *     prevPolicyType (string):\n     *         The previous policy type, to use when restoring the value after\n     *         the edit has been cancelled.\n     */\n    initialize(options) {\n        this.prevPolicyType = options.prevPolicyType;\n\n        this._codeMirror = null;\n        this._$policy = null;\n        this._$saveButtons = null;\n    },\n\n    /**\n     * Render the editor.\n     *\n     * The CodeMirror editor will be set up and configured, and then the\n     * view will be placed inside a modalBox.\n     *\n     * Returns:\n     *     PolicyEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        let policy = this.model.get('policy');\n\n        if (_.isEmpty(policy)) {\n            policy = RB.APIToken.defaultPolicies.custom;\n        }\n\n        this.$el.html(this.template({\n            instructions: interpolate(\n                gettext('You can limit access to the API through a custom policy. See the <a href=\"%s\" target=\"_blank\">documentation</a> on how to write policies.'),\n                [MANUAL_URL + 'webapi/2.0/api-token-policy/'])\n        }));\n\n\n        this._$policy = this.$('textarea')\n            .val(JSON.stringify(policy, null, '  '));\n\n        this.$el.modalBox({\n            title: gettext('Custom Token Access Policy'),\n            buttons: [\n                $('<input type=\"button\"/>')\n                    .val(gettext('Cancel'))\n                    .click(_.bind(this.cancel, this)),\n                $('<input type=\"button\" class=\"save-button\"/>')\n                    .val(gettext('Save and continue editing'))\n                    .click(() => {\n                        this.save(false);\n                        return false;\n                    }),\n                $('<input type=\"button\" class=\"btn primary save-button\"/>')\n                    .val(gettext('Save'))\n                    .click(() => {\n                        this.save(true);\n                        return false;\n                    })\n            ]\n        });\n\n        this._$saveButtons = this.$el.modalBox('buttons').find('.save-button');\n\n        this._codeMirror = CodeMirror.fromTextArea(this._$policy[0], {\n            mode: 'application/json',\n            lineNumbers: true,\n            lineWrapping: true,\n            matchBrackets: true,\n            lint: {\n                onUpdateLinting: _.bind(this._onUpdateLinting, this)\n            },\n            gutters: ['CodeMirror-lint-markers']\n        });\n        this._codeMirror.focus();\n    },\n\n    /**\n     * Remove the policy editor from the page.\n     */\n    remove() {\n        this.$el.modalBox('destroy');\n    },\n\n    /**\n     * Cancel the editor.\n     *\n     * The previously-selected policy type will be set on the model.\n     */\n    cancel() {\n        this.model.set('policyType', this.prevPolicyType);\n    },\n\n    /**\n     * Save the editor.\n     *\n     * The policy will be saved to the server for immediate use.\n     *\n     * Args:\n     *     closeOnSave (boolean):\n     *         Whether the editor should close after saving.\n     */\n    async save(closeOnSave) {\n        const policyStr = this._codeMirror.getValue().strip();\n        let policy;\n\n        try {\n            policy = JSON.parse(policyStr);\n        } catch (e) {\n            if (e instanceof SyntaxError) {\n                alert(interpolate(\n                    gettext('There is a syntax error in your policy: %s'),\n                    [e]));\n\n                return;\n            } else {\n                throw e;\n            }\n        }\n\n        try {\n            await this.model.savePolicy(policy);\n\n            this.model.set('policyType', POLICY_CUSTOM);\n\n            if (closeOnSave) {\n                this.remove();\n            }\n        } catch (err) {\n            if (err.xhr.errorPayload.err.code === 105 &&\n                err.xhr.errorPayload.fields.policy) {\n                alert(err.xhr.errorPayload.fields.policy);\n            } else {\n                alert(err.xhr.errorPayload.err.msg);\n            }\n        }\n    },\n\n    /**\n     * Handler for when lintian checking has run.\n     *\n     * This will disable the save buttons if there are any lintian errors.\n     *\n     * Args:\n     *     annotationsNotSorted (Array):\n     *         An array of the linter annotations.\n     */\n    _onUpdateLinting(annotationsNotSorted) {\n        this._$saveButtons.prop('disabled', annotationsNotSorted.length > 0);\n    }\n});\n\n\n/**\n * Renders an APITokenItem to the page, and handles actions.\n *\n * This will display the information on the given token. Specifically,\n * the token value, the note, the expiration date and the actions.\n *\n * This also handles deleting the token when the Remove action is clicked,\n * and displaying the policy editor when choosing a custom policy.\n */\nconst APITokenItemView = Djblets.Config.ListItemView.extend({\n    EMPTY_NOTE_PLACEHOLDER: gettext('Click to describe this token'),\n\n    template: _.template(gettext`\n        <div class=\"rb-c-config-api-tokens__main\">\n         <div class=\"rb-c-config-api-tokens__value\">\n          <input readonly=\"readonly\" value=\"<%- tokenValue %>\">\n         </div>\n         <span class=\"fa fa-clipboard js-copy-token\" title=\"Copy to clipboard\"></span>\n        </div>\n        <div class=\"rb-c-config-api-tokens__info\">\n         <% if (deprecated) { %>\n          <p class=\"rb-c-config-api-tokens__deprecation-notice\">\n           This token uses a deprecated format. You should remove it and\n           generate a new one.\n          </p>\n         <% } %>\n         <% if (valid) { %>\n          <% if (lastUsed) { %>\n           <p class=\"rb-c-config-api-tokens__usage -has-last-used\">\n            Last used\n            <time class=\"timesince\" datetime=\"<%= lastUsed %>\"></time>.\n           </p>\n          <% } else { %>\n           <p class=\"rb-c-config-api-tokens__usage\">Never used.</p>\n          <% } %>\n          <% if (expired) { %>\n           <p class=\"rb-c-config-api-tokens__token-state -is-expired\">\n            <span>Expired <%= expiresTimeHTML %>.</span>\n           </p>\n          <% } else if (expires) { %>\n           <p class=\"rb-c-config-api-tokens__token-state -has-expires\">\n            <span>Expires <%= expiresTimeHTML %>.</span>\n           </p>\n          <% } else { %>\n           <p class=\"rb-c-config-api-tokens__token-state\">\n            <span>Never expires.</span>\n           </p>\n          <% } %>\n         <% } else { %>\n          <p class=\"rb-c-config-api-tokens__token-state -is-invalid\">\n           Invalidated\n           <time class=\"timesince\" datetime=\"<%= invalidDate %>\"></time>:\n           <%= invalidReason %>\n          </p>\n         <% } %>\n        </div>\n        <div class=\"rb-c-config-api-tokens__actions\"></div>\n        <span class=\"rb-c-config-api-tokens__note\"></span>\n    `),\n\n    events: {\n        'click .js-copy-token': '_onCopyClicked',\n    },\n\n    actionHandlers: {\n        'delete': '_onRemoveClicked',\n        'policy-custom': '_onCustomPolicyClicked'\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this._$expires = null;\n        this._$note = null;\n        this._$tokenState = null;\n\n        this.listenTo(this.model.resource, 'change:expires', this._updateExpires);\n        this.listenTo(this.model.resource, 'change:note', this._updateNote);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     APITokenItemView:\n     *     This object, for chaining.\n     */\n    render() {\n        _super(this).render.call(this);\n\n        this._$tokenState = this.$('.rb-c-config-api-tokens__token-state');\n        this._$expires = this._$tokenState\n            .not('.is-invalid')\n            .find('span');\n\n        this._$note = this.$('.rb-c-config-api-tokens__note')\n            .inlineEditor({\n                editIconClass: 'rb-icon rb-icon-edit'\n            })\n            .on({\n                beginEdit: () => this._$note.inlineEditor(\n                    'setValue', this.model.get('note')),\n                complete: (e, value) => this.model.saveNote(value)\n            });\n\n        const expires = moment(this.model.get('expires'))\n            .local()\n            .format('YYYY-MM-DDTHH:mm');\n\n        const expiresView = new RB.DateTimeInlineEditorView({\n            el: this._$expires[0],\n            descriptorText: 'Expires ',\n            formatResult: value => {\n                if (value) {\n                    value = moment(value).local().format();\n                    const today = moment().local();\n                    const expired = today.isAfter(value);\n                    const prefix = expired ? 'Expired' : 'Expires';\n\n                    if (expired) {\n                        this._$tokenState.addClass('-is-expired');\n                    }\n\n                    return (dedent`\n                        ${prefix}\n                        <time class=\"timesince\" datetime=\"${value}\"></time>.\n                    `);\n                } else {\n                    this._$tokenState.removeClass('-is-expired');\n\n                    return 'Never expires.';\n                }\n            },\n            rawValue: expires,\n        })\n        .on({\n            beginEdit: () => this._$tokenState.removeClass('-is-expired'),\n            cancel: () => {\n                if (this.model.get('expired')) {\n                    this._$tokenState.addClass('-is-expired');\n                }\n            }\n        });\n        expiresView.render();\n\n        this.listenTo(expiresView, 'complete', (value) => {\n            value = value ? moment(value).local().format() : '';\n            this.model.saveExpires(value);\n        });\n\n        this._updateExpires();\n        this._updateNote();\n\n        return this;\n    },\n\n    /**\n     * Return the parent element for item actions.\n     *\n     * Returns:\n     *     jQuery:\n     *     The element to attach the actions to.\n     */\n    getActionsParent() {\n        return this.$('.rb-c-config-api-tokens__actions');\n    },\n\n    /**\n     * Return additional rendering context.\n     *\n     * Returns:\n     *     object:\n     *     Additional rendering context.\n     */\n    getRenderContext() {\n        const expires = this.model.get('expires');\n\n        return {\n            expiresTimeHTML:\n                `<time class=\"timesince\" datetime=\"${expires}\"></time>`,\n        };\n    },\n\n    /**\n     * Update the displayed expiration date.\n     */\n     _updateExpires() {\n        if (this._$expires) {\n            const expires = this.model.resource.get('expires');\n\n            this._$expires.find('time').attr('datetime', expires);\n            this.$('.timesince').timesince();\n        }\n    },\n\n    /**\n     * Update the displayed note.\n     *\n     * If no note is set, then a placeholder will be shown, informing the\n     * user that they can edit the note. Otherwise, their note contents\n     * will be shown.\n     */\n    _updateNote() {\n        if (this._$note) {\n            const note = this.model.resource.get('note');\n\n            this._$note\n                .toggleClass('empty', !note)\n                .text(note ? note : this.EMPTY_NOTE_PLACEHOLDER);\n        }\n    },\n\n    /**\n     * Handler for when the copy icon is clicked.\n     *\n     * Args:\n     *     e (Event):\n     *         The click event.\n     */\n    _onCopyClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.$('.rb-c-config-api-tokens__value input')\n            .focus()\n            .select();\n        document.execCommand('copy');\n    },\n\n    /**\n     * Handler for when the \"Custom\" policy action is clicked.\n     *\n     * This displays the policy editor, allowing the user to edit a\n     * custom policy for the token.\n     *\n     * The previously selected policy type is passed along to the editor,\n     * so that the editor can revert to it if the user cancels.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    _onCustomPolicyClicked() {\n        const view = new PolicyEditorView({\n            model: this.model,\n            prevPolicyType: this.model.get('policyType'),\n        });\n        view.render();\n\n        return false;\n    },\n\n    /**\n     * Handler for when the Remove action is clicked.\n     *\n     * This will prompt for confirmation before removing the token from\n     * the server.\n     */\n    _onRemoveClicked() {\n        $('<p/>')\n            .html(gettext('This will prevent clients using this token when authenticating.'))\n            .modalBox({\n                title: gettext('Are you sure you want to remove this token?'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n                    $('<input type=\"button\" class=\"danger\" />')\n                        .val(gettext('Remove'))\n                        .click(() => this.model.resource.destroy())\n                ]\n            });\n    }\n});\n\n\n/**\n * Renders and manages a list of global or per-LocalSite API tokens.\n *\n * This will display all provided API tokens in a list, optionally labeled\n * by Local Site name. These can be removed or edited, or new tokens generated\n * through a \"Generate a new API token\" link.\n */\nconst SiteAPITokensView = Backbone.View.extend({\n    className: 'rb-c-config-api-tokens',\n\n    template: _.template(dedent`\n        <% if (name) { %>\n         <div class=\"djblets-l-config-forms-container\">\n          <h3><%- name %></h3>\n         </div>\n        <% } %>\n        <div class=\"api-tokens\">\n        </div>\n    `),\n\n    generateTokenTemplate: _.template(dedent`\n        <li class=\"generate-api-token djblets-c-config-forms-list__item\">\n         <a href=\"#\"><%- generateText %></a>\n        </li>\n    `),\n\n    events: {\n        'click .generate-api-token': '_onGenerateClicked'\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * This will construct the collection of tokens and construct\n     * a list for the ListView.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     localSiteName (string):\n     *         The name of the local site, if any.\n     *\n     *     localSitePrefix (string):\n     *         The URL prefix of the local site, if any.\n     */\n    initialize(options) {\n        this.localSiteName = options.localSiteName;\n        this.localSitePrefix = options.localSitePrefix;\n\n        this.collection = new APITokenItemCollection(options.apiTokens, {\n            localSitePrefix: this.localSitePrefix\n        });\n\n        this.apiTokensList = new Djblets.Config.List({}, {\n            collection: this.collection\n        });\n\n        this._listView = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will render the list of API token items, along with a link\n     * for generating new tokens.\n     *\n     * Returns:\n     *     SiteAPITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._listView = new Djblets.Config.ListView({\n            ItemView: APITokenItemView,\n            animateItems: true,\n            model: this.apiTokensList\n        });\n\n        this.$el.html(this.template({\n            name: this.localSiteName,\n        }));\n\n        this._listView.render().$el.prependTo(this.$('.api-tokens'));\n\n        this._$generateTokenItem =\n            $(this.generateTokenTemplate({\n                generateText: _`Generate a new API token`,\n            }))\n            .appendTo(this._listView.getBody());\n\n        return this;\n    },\n\n    /**\n     * Handler for when the \"Generate a new API token\" link is clicked.\n     *\n     * This creates a new API token on the server and displays it in the list.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    async _onGenerateClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const apiToken = new RB.APIToken({\n            localSitePrefix: this.localSitePrefix,\n            userName: RB.UserSession.instance.get('username')\n        });\n\n        await apiToken.save();\n\n        this.collection.add({\n            resource: apiToken,\n        });\n\n        this._$generateTokenItem\n            .detach()\n            .appendTo(this._listView.getBody());\n    },\n});\n\n\n/**\n * Renders and manages a page of API tokens.\n *\n * This will take the provided tokens and group them into SiteAPITokensView\n * instances, one per Local Site and one for the global tokens.\n */\nRB.APITokensView = Backbone.View.extend({\n    template: _.template(dedent`\n        <div class=\"api-tokens-list djblets-l-config-forms-container\n                    -is-recessed -is-top-flush\">\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     apiTokens (Array of object):\n     *         Initial contents of the tokens list.\n     */\n    initialize(options) {\n        this.apiTokens = options.apiTokens;\n\n        this._$listsContainer = null;\n        this._apiTokenViews = [];\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up the elements and the list of SiteAPITokensViews.\n     *\n     * Returns:\n     *     RB.APITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template());\n\n        this._$listsContainer = this.$('.api-tokens-list');\n\n        for (let [localSiteName, info] of Object.entries(this.apiTokens)) {\n            const view = new SiteAPITokensView({\n                localSiteName: localSiteName,\n                localSitePrefix: info.localSitePrefix,\n                apiTokens: info.tokens\n            });\n\n            view.$el.appendTo(this._$listsContainer);\n            view.render();\n\n            this._apiTokenViews.push(view);\n        }\n\n        return this;\n    }\n});\n\n\n})();\n"],"mappings":"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"}