{"version":3,"file":"textBasedReviewableView.js","names":["RB","TextBasedReviewableView","FileAttachmentReviewableView","extend","commentBlockView","TextBasedCommentBlockView","initialize","options","prototype","call","_$viewTabs","_$textTable","_$renderedTable","_textSelector","_renderedSelector","on","_placeCommentBlockView","router","Backbone","Router","routes","listenTo","viewMode","lineNum","indexOf","substr","model","set","_scrollToLine","remove","_super","renderContent","$","TextCommentRowSelector","el","reviewableView","render","get","_onViewChanged","$fileHeader","_revisionSelectorView","FileAttachmentRevisionSelectorView","find","_onRevisionSelected","_revisionLabelView","FileAttachmentRevisionLabelView","reviewURL","attachmentID","diffID","history","start","root","revisions","base","tip","revisionIDs","revisionTip","redirectURL","revisionBase","navigateTo","replace","$table","_getTableForViewMode","rows","tBodies","MathUtils","clip","length","$row","window","scrollTop","offset","top","console","assert","_getRowSelectorForViewMode","commentBlock","beginLineNum","endLineNum","rowSelector","rowEls","getRowsForRange","setRows","$el","appendTo","$beginRow","cells","removeClass","filter","addClass","toggle","triggerHandler"],"sources":["../../../../../static/rb/js/views/textBasedReviewableView.es6.js"],"sourcesContent":["/**\n * Base for text-based review UIs.\n *\n * This will display all existing comments on an element by displaying a comment\n * indicator beside it. Users can place a comment by clicking on a line, which\n * will get a light-grey background color upon mouseover, and placing a comment\n * in the comment dialog that is displayed.\n */\nRB.TextBasedReviewableView = RB.FileAttachmentReviewableView.extend({\n    commentBlockView: RB.TextBasedCommentBlockView,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        RB.FileAttachmentReviewableView.prototype.initialize.call(\n            this, options);\n\n        this._$viewTabs = null;\n        this._$textTable = null;\n        this._$renderedTable = null;\n        this._textSelector = null;\n        this._renderedSelector = null;\n\n        this.on('commentBlockViewAdded', this._placeCommentBlockView, this);\n\n        this.router = new Backbone.Router({\n            routes: {\n                ':viewMode(/line:lineNum)': 'viewMode',\n            },\n        });\n        this.listenTo(this.router, 'route:viewMode', (viewMode, lineNum) => {\n            /*\n             * Router's pattern matching isn't very good. Since we don't\n             * want to stick \"view\" or something before the view mode,\n             * and we want to allow for view, line, or view + line, we need\n             * to check and transform viewMode if it seems to be a line\n             * reference.\n             */\n            if (viewMode.indexOf('line') === 0) {\n                lineNum = viewMode.substr(4);\n                viewMode = null;\n            }\n\n            if (viewMode) {\n                this.model.set('viewMode', viewMode);\n            }\n\n            if (lineNum) {\n                this._scrollToLine(lineNum);\n            }\n        });\n    },\n\n    /**\n     * Remove the reviewable from the DOM.\n     */\n    remove() {\n        _super(this).remove.call(this);\n\n        this._textSelector.remove();\n        this._renderedSelector.remove();\n    },\n\n    /**\n     * Render the view.\n     */\n    renderContent() {\n        this._$viewTabs = this.$('.text-review-ui-views li');\n\n        // Set up the source text table.\n        this._$textTable = this.$('.text-review-ui-text-table');\n\n        this._textSelector = new RB.TextCommentRowSelector({\n            el: this._$textTable,\n            reviewableView: this\n        });\n        this._textSelector.render();\n\n        if (this.model.get('hasRenderedView')) {\n            // Set up the rendered table.\n            this._$renderedTable = this.$('.text-review-ui-rendered-table');\n\n            this._renderedSelector = new RB.TextCommentRowSelector({\n                el: this._$renderedTable,\n                reviewableView: this\n            });\n            this._renderedSelector.render();\n        }\n\n        this.listenTo(this.model, 'change:viewMode', this._onViewChanged);\n\n        const $fileHeader = this.$('.review-ui-header');\n\n        if (this.model.get('numRevisions') > 1) {\n            this._revisionSelectorView = new RB.FileAttachmentRevisionSelectorView({\n                el: $fileHeader.find('#attachment_revision_selector'),\n                model: this.model\n            });\n            this._revisionSelectorView.render();\n            this.listenTo(this._revisionSelectorView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            this._revisionLabelView = new RB.FileAttachmentRevisionLabelView({\n                el: $fileHeader.find('#revision_label'),\n                model: this.model\n            });\n            this._revisionLabelView.render();\n            this.listenTo(this._revisionLabelView, 'revisionSelected',\n                          this._onRevisionSelected);\n        }\n\n        const reviewURL = this.model.get('reviewRequest').get('reviewURL');\n        const attachmentID = this.model.get('fileAttachmentID');\n        const diffID = this.model.get('diffAgainstFileAttachmentID');\n        Backbone.history.start({\n            root: (diffID == null\n                   ? `${reviewURL}file/${attachmentID}/`\n                   : `${reviewURL}file/${diffID}-${attachmentID}/`),\n        });\n    },\n\n    /**\n     * Callback for when a new file revision is selected.\n     *\n     * This supports single revisions and diffs. If ``base`` is 0, a\n     * single revision is selected, If not, the diff between ``base`` and\n     * ``tip`` will be shown.\n     *\n     * Args:\n     *     revisions (array of number):\n     *         A 2-element array containing the new revisions to be viewed.\n     */\n    _onRevisionSelected(revisions) {\n        const [base, tip] = revisions;\n\n        // Ignore clicks on No Diff Label.\n        if (tip === 0) {\n            return;\n        }\n\n        const revisionIDs = this.model.get('attachmentRevisionIDs');\n        const revisionTip = revisionIDs[tip - 1];\n\n        /*\n         * Eventually these hard redirects will use a router\n         * (see diffViewerPageView.js for example)\n         * this.router.navigate(base + '-' + tip + '/', {trigger: true});\n         */\n        let redirectURL;\n\n        if (base === 0) {\n            redirectURL = `../${revisionTip}/`;\n        } else {\n            const revisionBase = revisionIDs[base - 1];\n            redirectURL = `../${revisionBase}-${revisionTip}/`;\n        }\n\n        RB.navigateTo(redirectURL, {replace: true});\n    },\n\n    /**\n     * Scroll the page to the top of the specified line number.\n     *\n     * Args:\n     *     lineNum (number):\n     *         The line number to scroll to.\n     */\n    _scrollToLine(lineNum) {\n        const $table = this._getTableForViewMode(this.model.get('viewMode'));\n        const rows = $table[0].tBodies[0].rows;\n\n        /* Normalize this to a valid row index. */\n        lineNum = RB.MathUtils.clip(lineNum, 1, rows.length) - 1;\n\n        const $row = $($table[0].tBodies[0].rows[lineNum]);\n        $(window).scrollTop($row.offset().top);\n    },\n\n    /**\n     * Return the table element for the given view mode.\n     *\n     * Args:\n     *     viewMode (string):\n     *         The view mode to show.\n     *\n     * Returns:\n     *     jQuery:\n     *     The table element corresponding to the requested view mode.\n     */\n    _getTableForViewMode(viewMode) {\n        if (viewMode === 'source') {\n            return this._$textTable;\n        } else if (viewMode === 'rendered' &&\n                   this.model.get('hasRenderedView')) {\n            return this._$renderedTable;\n        } else {\n            console.assert(false, 'Unexpected viewMode ' + viewMode);\n            return null;\n        }\n    },\n\n    /**\n     * Return the row selector for the given view mode.\n     *\n     * Args:\n     *     viewMode (string):\n     *         The view mode to show.\n     *\n     * Returns:\n     *     RB.TextCommentRowSelector:\n     *     The row selector.\n     */\n    _getRowSelectorForViewMode(viewMode) {\n        if (viewMode === 'source') {\n            return this._textSelector;\n        } else if (viewMode === 'rendered' &&\n                   this.model.get('hasRenderedView')) {\n            return this._renderedSelector;\n        } else {\n            console.assert(false, 'Unexpected viewMode ' + viewMode);\n            return null;\n        }\n    },\n\n    /**\n     * Add the comment view to the line the comment was created on.\n     *\n     * Args:\n     *     commentBlockView (RB.AbstractCommentBlockView):\n     *         The comment view to add.\n     */\n    _placeCommentBlockView(commentBlockView) {\n        const commentBlock = commentBlockView.model;\n        const beginLineNum = commentBlock.get('beginLineNum');\n        const endLineNum = commentBlock.get('endLineNum');\n\n        if (beginLineNum && endLineNum) {\n            const viewMode = commentBlock.get('viewMode');\n            const rowSelector = this._getRowSelectorForViewMode(viewMode);\n\n            if (!rowSelector) {\n                return;\n            }\n\n            let rowEls;\n\n            if (this.model.get('diffRevision')) {\n                /*\n                 * We're showing a diff, so we need to do a search for the\n                 * rows matching the given line numbers.\n                 */\n                rowEls = rowSelector.getRowsForRange(beginLineNum, endLineNum);\n            } else {\n                /*\n                 * Since we know we have the entire content of the text in one\n                 * list, we don't need to use getRowsForRange here, and instead\n                 * can look up the lines directly in the lists of rows.\n                 */\n                const rows = rowSelector.el.tBodies[0].rows;\n\n                /* The line numbers are 1-based, so normalize for the rows. */\n                rowEls = [rows[beginLineNum - 1], rows[endLineNum - 1]];\n            }\n\n            if (rowEls) {\n                commentBlockView.setRows($(rowEls[0]), $(rowEls[1]));\n                commentBlockView.$el.appendTo(\n                    commentBlockView.$beginRow[0].cells[0]);\n            }\n        }\n    },\n\n    /**\n     * Handle a change to the view mode.\n     *\n     * This will set the correct tab to be active and switch which table of\n     * text is shown.\n     */\n    _onViewChanged() {\n        const viewMode = this.model.get('viewMode');\n\n        this._$viewTabs\n            .removeClass('active')\n            .filter(`[data-view-mode=${viewMode}]`)\n                .addClass('active');\n\n        this._$textTable.toggle(viewMode === 'source');\n        this._$renderedTable.toggle(viewMode === 'rendered');\n\n        /* Cause all comments to recalculate their sizes. */\n        $(window).triggerHandler('resize');\n    },\n});\n"],"mappings":"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"}