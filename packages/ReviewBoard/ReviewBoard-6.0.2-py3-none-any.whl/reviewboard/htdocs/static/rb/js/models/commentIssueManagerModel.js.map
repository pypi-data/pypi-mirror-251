{"version":3,"file":"commentIssueManagerModel.js","names":["RB","CommentIssueManager","Backbone","Model","extend","defaults","reviewRequest","initialize","_comments","setCommentState","reviewID","commentID","commentType","state","comment","getComment","_requestState","CommentTypes","get","DIFF","createReview","createDiffComment","id","SCREENSHOT","createScreenshotComment","FILE_ATTACHMENT","createFileAttachmentComment","GENERAL","createGeneralComment","console","error","ready","oldIssueStatus","set","rsp","save","attrs","_notifyIssueStatusChanged","rspComment","diff_comment","general_comment","file_attachment_comment","screenshot_comment","assert","trigger","timestamp"],"sources":["../../../../../static/rb/js/models/commentIssueManagerModel.es6.js"],"sourcesContent":["/**\n * Manages issue states for comments on a review request.\n *\n * CommentIssueManager takes care of setting the state of a particular\n * comment issue, and also takes care of notifying callbacks whenever\n * the state is successfully changed.\n *\n * Events:\n *     issueStatusUpdated:\n *         The issue status of a comment has changed.\n *\n *         Args:\n *             comment (RB.BaseComment):\n *                 The comment that changed.\n *\n *             oldIssueStatus (string):\n *                 The old issue status.\n *\n *             timestamp (string):\n *                 The latest timestamp for the comment.\n *\n *             commentType (string):\n *                 The comment type identifier (one of\n *                 :js:attr:`RB.CommentIssueManager.CommentTypes`).\n *\n *                 Version Added:\n *                     4.0.8\n */\nRB.CommentIssueManager = Backbone.Model.extend({\n    defaults: {\n        reviewRequest: null,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        this._comments = {};\n    },\n\n    /**\n     * Set the state for a comment.\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review the comment belongs to.\n     *\n     *     commentID (number):\n     *         The ID of the comment.\n     *\n     *     commentType (string):\n     *         The type of the comment.\n     *\n     *     state (string):\n     *          The new state for the comment's issue. This will be one of\n     *          ``open``, ``resolved``, ``dropped``, or ``verify``.\n     */\n    setCommentState(reviewID, commentID, commentType, state) {\n        const comment = this.getComment(reviewID, commentID, commentType);\n        this._requestState(comment, state);\n    },\n\n    /**\n     * Retrieve the model for a given comment.\n     *\n     * This will either generate the appropriate comment object based on\n     * ``commentType``, or grab the comment from a cache if it's been generated\n     * before.\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review the comment belongs to.\n     *\n     *     commentID (number):\n     *         The ID of the comment.\n     *\n     *     commentType (string):\n     *         The type of the comment.\n     *\n     * Returns:\n     *     RB.BaseComment:\n     *     The comment model.\n     */\n    getComment(reviewID, commentID, commentType) {\n        if (!this._comments[commentID]) {\n            const CommentTypes = RB.CommentIssueManager.CommentTypes;\n            const reviewRequest = this.get('reviewRequest');\n            let comment = null;\n\n            switch (commentType) {\n                case CommentTypes.DIFF:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createDiffComment({id: commentID});\n                    break;\n\n                case CommentTypes.SCREENSHOT:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createScreenshotComment(commentID);\n                    break;\n\n                case CommentTypes.FILE_ATTACHMENT:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createFileAttachmentComment(commentID);\n                    break;\n\n                case CommentTypes.GENERAL:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createGeneralComment(commentID);\n                    break;\n\n                default:\n                    console.error(\n                        'getComment received unexpected comment type \"%s\"',\n                        commentType);\n            }\n\n            this._comments[commentID] = comment;\n        }\n\n        return this._comments[commentID];\n    },\n\n    /**\n     * Set the state of a comment.\n     *\n     * This will store the new state in the comment on the server, and then\n     * notify listeners of the latest comment information.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment to set the state of.\n     *\n     *     state (string):\n     *         The new issue state for the comment.\n     */\n    async _requestState(comment, state) {\n        await comment.ready();\n\n        const oldIssueStatus = comment.get('issueStatus');\n\n        comment.set('issueStatus', state);\n        const rsp = await comment.save({\n            attrs: ['issueStatus'],\n        });\n\n        this._notifyIssueStatusChanged(comment, rsp, oldIssueStatus);\n    },\n\n    /**\n     * Notify listeners that a comment's issue status changed.\n     *\n     * This will trigger the ``issueStatusUpdated`` event.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment instance that changed.\n     *\n     *     rsp (object):\n     *         The API response object from saving the comment.\n     *\n     *     oldIssueStatus (string):\n     *         The old issue status.\n     */\n    _notifyIssueStatusChanged(comment, rsp, oldIssueStatus) {\n        const CommentTypes = RB.CommentIssueManager.CommentTypes;\n        let rspComment;\n        let commentType;\n\n        if (rsp.diff_comment) {\n            rspComment = rsp.diff_comment;\n            commentType = CommentTypes.DIFF;\n        } else if (rsp.general_comment) {\n            rspComment = rsp.general_comment;\n            commentType = CommentTypes.GENERAL;\n        } else if (rsp.file_attachment_comment) {\n            rspComment = rsp.file_attachment_comment;\n            commentType = CommentTypes.FILE_ATTACHMENT;\n        } else if (rsp.screenshot_comment) {\n            rspComment = rsp.screenshot_comment;\n            commentType = CommentTypes.SCREENSHOT;\n        } else {\n            console.error(\n                'RB.CommentIssueManager._notifyIssueStatusChanged received ' +\n                'unexpected comment object \"%o\"',\n                rsp);\n            return;\n        }\n\n        console.assert(rspComment);\n        console.assert(commentType);\n\n        this.trigger('issueStatusUpdated', comment, oldIssueStatus,\n                     rspComment.timestamp, commentType);\n    },\n}, {\n    /**\n     * A mapping of comment type constants to values.\n     *\n     * The values should be considered opaque. Callers should use the constants\n     * instead.\n     *\n     * These are only used for functionality in this model and objects\n     * interfacing with this model. They should not be used as generic\n     * indicators for model classes.\n     *\n     * Version Added:\n     *     4.0.8\n     */\n    CommentTypes: {\n        DIFF: 'diff_comments',\n        FILE_ATTACHMENT: 'file_attachment_comments',\n        GENERAL: 'general_comments',\n        SCREENSHOT: 'screenshot_comments',\n    },\n\n    /**\n     * Notify listeners that a comment's issue status changed.\n     *\n     * This will trigger the ``issueStatusUpdated`` event.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment instance that changed.\n     *\n     *     rsp (object):\n     *         The API response object from saving the comment.\n     *\n     *     oldIssueStatus (string):\n     *         The old issue status.\n     */\n    _notifyIssueStatusChanged(comment, rsp, oldIssueStatus) {\n        const CommentTypes = RB.CommentIssueManager.CommentTypes;\n        let rspComment;\n        let commentType;\n\n        if (rsp.diff_comment) {\n            rspComment = rsp.diff_comment;\n            commentType = CommentTypes.DIFF;\n        } else if (rsp.general_comment) {\n            rspComment = rsp.general_comment;\n            commentType = CommentTypes.GENERAL;\n        } else if (rsp.file_attachment_comment) {\n            rspComment = rsp.file_attachment_comment;\n            commentType = CommentTypes.FILE_ATTACHMENT;\n        } else if (rsp.screenshot_comment) {\n            rspComment = rsp.screenshot_comment;\n            commentType = CommentTypes.SCREENSHOT;\n        } else {\n            console.error(\n                'RB.CommentIssueManager._notifyIssueStatusChanged received ' +\n                'unexpected comment object \"%o\"',\n                rsp);\n            return;\n        }\n\n        console.assert(rspComment);\n        console.assert(commentType);\n\n        this.trigger('issueStatusUpdated', comment, oldIssueStatus,\n                     rspComment.timestamp, commentType);\n    },\n}, {\n    /**\n     * A mapping of comment type constants to values.\n     *\n     * The values should be considered opaque. Callers should use the constants\n     * instead.\n     *\n     * These are only used for functionality in this model and objects\n     * interfacing with this model. They should not be used as generic\n     * indicators for model classes.\n     *\n     * Version Added:\n     *     4.0.8\n     */\n    CommentTypes: {\n        DIFF: 'diff_comments',\n        FILE_ATTACHMENT: 'file_attachment_comments',\n        GENERAL: 'general_comments',\n        SCREENSHOT: 'screenshot_comments',\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,mBAAmB,GAAGC,QAAQ,CAACC,KAAK,CAACC,MAAM,CAAC;EAC3CC,QAAQ,EAAE;IACNC,aAAa,EAAE;EACnB,CAAC;EAED;AACJ;AACA;EACIC,UAAU,GAAG;IACT,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;EACvB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,eAAe,CAACC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,KAAK,EAAE;IACrD,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,CAACL,QAAQ,EAAEC,SAAS,EAAEC,WAAW,CAAC;IACjE,IAAI,CAACI,aAAa,CAACF,OAAO,EAAED,KAAK,CAAC;EACtC,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,UAAU,CAACL,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAE;IACzC,IAAI,CAAC,IAAI,CAACJ,SAAS,CAACG,SAAS,CAAC,EAAE;MAC5B,MAAMM,YAAY,GAAGjB,EAAE,CAACC,mBAAmB,CAACgB,YAAY;MACxD,MAAMX,aAAa,GAAG,IAAI,CAACY,GAAG,CAAC,eAAe,CAAC;MAC/C,IAAIJ,OAAO,GAAG,IAAI;MAElB,QAAQF,WAAW;QACf,KAAKK,YAAY,CAACE,IAAI;UAClBL,OAAO,GAAGR,aAAa,CAClBc,YAAY,CAACV,QAAQ,CAAC,CACtBW,iBAAiB,CAAC;YAACC,EAAE,EAAEX;UAAS,CAAC,CAAC;UACvC;QAEJ,KAAKM,YAAY,CAACM,UAAU;UACxBT,OAAO,GAAGR,aAAa,CAClBc,YAAY,CAACV,QAAQ,CAAC,CACtBc,uBAAuB,CAACb,SAAS,CAAC;UACvC;QAEJ,KAAKM,YAAY,CAACQ,eAAe;UAC7BX,OAAO,GAAGR,aAAa,CAClBc,YAAY,CAACV,QAAQ,CAAC,CACtBgB,2BAA2B,CAACf,SAAS,CAAC;UAC3C;QAEJ,KAAKM,YAAY,CAACU,OAAO;UACrBb,OAAO,GAAGR,aAAa,CAClBc,YAAY,CAACV,QAAQ,CAAC,CACtBkB,oBAAoB,CAACjB,SAAS,CAAC;UACpC;QAEJ;UACIkB,OAAO,CAACC,KAAK,CACT,kDAAkD,EAClDlB,WAAW,CAAC;MAAC;MAGzB,IAAI,CAACJ,SAAS,CAACG,SAAS,CAAC,GAAGG,OAAO;IACvC;IAEA,OAAO,IAAI,CAACN,SAAS,CAACG,SAAS,CAAC;EACpC,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMK,aAAa,CAACF,OAAO,EAAED,KAAK,EAAE;IAChC,MAAMC,OAAO,CAACiB,KAAK,EAAE;IAErB,MAAMC,cAAc,GAAGlB,OAAO,CAACI,GAAG,CAAC,aAAa,CAAC;IAEjDJ,OAAO,CAACmB,GAAG,CAAC,aAAa,EAAEpB,KAAK,CAAC;IACjC,MAAMqB,GAAG,GAAG,MAAMpB,OAAO,CAACqB,IAAI,CAAC;MAC3BC,KAAK,EAAE,CAAC,aAAa;IACzB,CAAC,CAAC;IAEF,IAAI,CAACC,yBAAyB,CAACvB,OAAO,EAAEoB,GAAG,EAAEF,cAAc,CAAC;EAChE,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,yBAAyB,CAACvB,OAAO,EAAEoB,GAAG,EAAEF,cAAc,EAAE;IACpD,MAAMf,YAAY,GAAGjB,EAAE,CAACC,mBAAmB,CAACgB,YAAY;IACxD,IAAIqB,UAAU;IACd,IAAI1B,WAAW;IAEf,IAAIsB,GAAG,CAACK,YAAY,EAAE;MAClBD,UAAU,GAAGJ,GAAG,CAACK,YAAY;MAC7B3B,WAAW,GAAGK,YAAY,CAACE,IAAI;IACnC,CAAC,MAAM,IAAIe,GAAG,CAACM,eAAe,EAAE;MAC5BF,UAAU,GAAGJ,GAAG,CAACM,eAAe;MAChC5B,WAAW,GAAGK,YAAY,CAACU,OAAO;IACtC,CAAC,MAAM,IAAIO,GAAG,CAACO,uBAAuB,EAAE;MACpCH,UAAU,GAAGJ,GAAG,CAACO,uBAAuB;MACxC7B,WAAW,GAAGK,YAAY,CAACQ,eAAe;IAC9C,CAAC,MAAM,IAAIS,GAAG,CAACQ,kBAAkB,EAAE;MAC/BJ,UAAU,GAAGJ,GAAG,CAACQ,kBAAkB;MACnC9B,WAAW,GAAGK,YAAY,CAACM,UAAU;IACzC,CAAC,MAAM;MACHM,OAAO,CAACC,KAAK,CACT,4DAA4D,GAC5D,gCAAgC,EAChCI,GAAG,CAAC;MACR;IACJ;IAEAL,OAAO,CAACc,MAAM,CAACL,UAAU,CAAC;IAC1BT,OAAO,CAACc,MAAM,CAAC/B,WAAW,CAAC;IAE3B,IAAI,CAACgC,OAAO,CAAC,oBAAoB,EAAE9B,OAAO,EAAEkB,cAAc,EAC7CM,UAAU,CAACO,SAAS,EAAEjC,WAAW,CAAC;EACnD;AACJ,CAAC,EAAE;EACC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,YAAY,EAAE;IACVE,IAAI,EAAE,eAAe;IACrBM,eAAe,EAAE,0BAA0B;IAC3CE,OAAO,EAAE,kBAAkB;IAC3BJ,UAAU,EAAE;EAChB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIc,yBAAyB,CAACvB,OAAO,EAAEoB,GAAG,EAAEF,cAAc,EAAE;IACpD,MAAMf,YAAY,GAAGjB,EAAE,CAACC,mBAAmB,CAACgB,YAAY;IACxD,IAAIqB,UAAU;IACd,IAAI1B,WAAW;IAEf,IAAIsB,GAAG,CAACK,YAAY,EAAE;MAClBD,UAAU,GAAGJ,GAAG,CAACK,YAAY;MAC7B3B,WAAW,GAAGK,YAAY,CAACE,IAAI;IACnC,CAAC,MAAM,IAAIe,GAAG,CAACM,eAAe,EAAE;MAC5BF,UAAU,GAAGJ,GAAG,CAACM,eAAe;MAChC5B,WAAW,GAAGK,YAAY,CAACU,OAAO;IACtC,CAAC,MAAM,IAAIO,GAAG,CAACO,uBAAuB,EAAE;MACpCH,UAAU,GAAGJ,GAAG,CAACO,uBAAuB;MACxC7B,WAAW,GAAGK,YAAY,CAACQ,eAAe;IAC9C,CAAC,MAAM,IAAIS,GAAG,CAACQ,kBAAkB,EAAE;MAC/BJ,UAAU,GAAGJ,GAAG,CAACQ,kBAAkB;MACnC9B,WAAW,GAAGK,YAAY,CAACM,UAAU;IACzC,CAAC,MAAM;MACHM,OAAO,CAACC,KAAK,CACT,4DAA4D,GAC5D,gCAAgC,EAChCI,GAAG,CAAC;MACR;IACJ;IAEAL,OAAO,CAACc,MAAM,CAACL,UAAU,CAAC;IAC1BT,OAAO,CAACc,MAAM,CAAC/B,WAAW,CAAC;IAE3B,IAAI,CAACgC,OAAO,CAAC,oBAAoB,EAAE9B,OAAO,EAAEkB,cAAc,EAC7CM,UAAU,CAACO,SAAS,EAAEjC,WAAW,CAAC;EACnD;AACJ,CAAC,EAAE;EACC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,YAAY,EAAE;IACVE,IAAI,EAAE,eAAe;IACrBM,eAAe,EAAE,0BAA0B;IAC3CE,OAAO,EAAE,kBAAkB;IAC3BJ,UAAU,EAAE;EAChB;AACJ,CAAC,CAAC"}