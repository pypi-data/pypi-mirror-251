{"version":3,"file":"abstractCommentBlockModel.js","names":["RB","AbstractCommentBlock","Backbone","Model","extend","defaults","hasDraft","canDelete","draftComment","reviewRequest","review","serializedComments","count","initialize","console","assert","get","comments","newSerializedComments","length","forEach","comment","text","$","html","localdraft","ensureDraftComment","comment_id","richText","rich_text","issueOpened","issue_opened","issueStatus","issue_status","push","set","on","_updateCount","isEmpty","has","createComment","id","comment_attr","getDeletedWarning","getDraftWarning"],"sources":["../../../../../static/rb/js/models/abstractCommentBlockModel.es6.js"],"sourcesContent":["/**\n * Represents a region of reviewable content that contains comments.\n *\n * This stores all comments that match a given region, as defined by a\n * subclass of AbstractCommentBlock.\n *\n * New draft comments can be created, which will later be stored on the\n * server.\n *\n * The total number of comments in the block (including any draft comment)\n * will be stored, which may be useful for display.\n *\n * Model Attributes:\n *     canDelete (boolean):\n *         Whether or not the comment can be deleted.\n *\n *     count (number):\n *         The total number of comments, including a draft comment.\n *\n *     draftComment (RB.BaseComment):\n *         The draft comment that this block is associated with.\n *\n *     hasDraft (boolean):\n *         Whether or not the review request has a draft.\n *\n *     review (RB.Review):\n *         The review that the associated comment is a part of.\n *\n *     reviewRequest (RB.ReviewRequest):\n *         The review request that this comment is on.\n *\n *     serializedComments (Array of object):\n *         An array of serialized comments for display.\n */\nRB.AbstractCommentBlock = Backbone.Model.extend({\n    defaults: {\n        hasDraft: false,\n        canDelete: false,\n        draftComment: null,\n        reviewRequest: null,\n        review: null,\n        serializedComments: [],\n        count: 0\n    },\n\n    /**\n     * Initialize the AbstractCommentBlock.\n     */\n    initialize() {\n        console.assert(this.get('reviewRequest'),\n                       'reviewRequest must be provided');\n        console.assert(this.get('review'),\n                       'review must be provided');\n\n        /*\n         * Find out if there are any draft comments and filter them out of the\n         * stored list of comments.\n         */\n        const comments = this.get('serializedComments');\n        const newSerializedComments = [];\n\n        if (comments.length > 0) {\n            comments.forEach(comment => {\n                // We load in encoded text, so decode it.\n                comment.text = $('<div>').html(comment.text).text();\n\n                if (comment.localdraft) {\n                    this.ensureDraftComment(comment.comment_id, {\n                        text: comment.text,\n                        richText: comment.rich_text,\n                        issueOpened: comment.issue_opened,\n                        issueStatus: comment.issue_status,\n                        html: comment.html,\n                    });\n                } else {\n                    newSerializedComments.push(comment);\n                }\n            }, this);\n\n            this.set('serializedComments', newSerializedComments);\n        } else {\n            this.ensureDraftComment();\n        }\n\n        this.on('change:draftComment', this._updateCount, this);\n        this._updateCount();\n    },\n\n    /**\n     * Return whether or not the comment block is empty.\n     *\n     * A comment block is empty if there are no stored comments and no\n     * draft comment.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the comment block is empty.\n     */\n    isEmpty() {\n        return (this.get('serializedComments').length === 0 &&\n                !this.has('draftComment'));\n    },\n\n    /**\n     * Create a draft comment, optionally with a given ID and text.\n     *\n     * This must be implemented by a subclass to return a Comment class\n     * specific to the subclass.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the comment to instantiate the model for.\n     *\n     * Returns:\n     *     RB.BaseComment:\n     *     The new comment model.\n     */\n    createComment(id) {\n        console.assert(false, 'This must be implemented by a subclass');\n    },\n\n    /**\n     * Create a draft comment in this comment block.\n     *\n     * Only one draft comment can exist per block, so if one already exists,\n     * this will do nothing.\n     *\n     * The actual comment object is up to the subclass to create.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the comment.\n     *\n     *     comment_attr (object):\n     *         Attributes to set on the comment model.\n     */\n    ensureDraftComment(id, comment_attr) {\n        if (this.has('draftComment')) {\n            return;\n        }\n\n        const comment = this.createComment(id);\n        comment.set(comment_attr);\n        comment.on('saved', this._updateCount, this);\n        comment.on('destroy', () => {\n            this.set('draftComment', null);\n            this._updateCount();\n        });\n\n        this.set('draftComment', comment);\n    },\n\n    /**\n     * Update the displayed number of comments in the comment block.\n     *\n     * If there's a draft comment, it will be added to the count. Otherwise,\n     * this depends solely on the number of published comments.\n     */\n    _updateCount() {\n        let count = this.get('serializedComments').length;\n\n        if (this.has('draftComment')) {\n            count++;\n        }\n\n        this.set('count', count);\n    },\n\n    /**\n     * Return a warning about commenting on a deleted object.\n     *\n     * Version Added:\n     *     6.0\n     *\n     * Returns:\n     *     string:\n     *     A warning to display to the user if they're commenting on a deleted\n     *     object. Return null if there's no warning.\n     */\n    getDeletedWarning() {\n        return null;\n    },\n\n    /**\n     * Return a warning about commenting on a draft object.\n     *\n     * Returns:\n     *     string:\n     *     A warning to display to the user if they're commenting on a draft\n     *     object. Return null if there's no warning.\n     */\n    getDraftWarning() {\n        return null;\n    },\n});\n"],"mappings":"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"}