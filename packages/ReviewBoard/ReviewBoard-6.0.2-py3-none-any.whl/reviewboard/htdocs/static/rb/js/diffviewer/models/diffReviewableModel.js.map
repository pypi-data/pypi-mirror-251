{"version":3,"file":"diffReviewableModel.js","names":["RB","DiffReviewable","AbstractReviewable","extend","defaults","_","baseFileDiffID","file","fileDiffID","interdiffRevision","interFileDiffID","revision","public","prototype","commentBlockModel","DiffCommentBlock","defaultCommentBlockFields","loadSerializedCommentBlock","serializedCommentBlock","createCommentBlock","reviewRequest","get","review","beginLineNum","linenum","endLineNum","num_lines","serializedComments","comments","getRenderedDiff","options","context","undefined","oldOptions","isFunction","success","error","complete","console","warn","promiseToCallbacks","newOptions","_fetchFragment","url","_buildRenderedDiffURL","index","showDeleted","noActivityIndicator","getRenderedDiffFragment","assert","chunkIndex","linesOfContext","Promise","resolve","apiCall","type","dataType","xhr","responseText","reviewURL","revisionPart","fileDiffPart","queryParts","push","TEMPLATE_SERIAL","queryStr","join"],"sources":["../../../../../../static/rb/js/diffviewer/models/diffReviewableModel.es6.js"],"sourcesContent":["/**\n * Provides state and utility functions for loading and reviewing diffs.\n *\n * Model Attributes:\n *     baseFileDiffID (number):\n *         The ID of the base FileDiff.\n *\n *     fileDiffID (number):\n *         The ID of the FileDiff.\n *\n *     file (RB.DiffFile):\n *         Information on the file associated with this diff.\n *\n *     interdiffRevision (number):\n *         The revision on the end of an interdiff range.\n *\n *     interFileDiffID (number):\n *         The ID of the FileDiff on the end of an interdiff range.\n *\n *     revision (number):\n *         The revision of the FileDiff.\n *\n *     public (boolean):\n *         Whether the diff has been published.\n *\n * See Also:\n *     :js:class:`RB.AbstractReviewable`:\n *         For the attributes defined by the base model.\n */\nRB.DiffReviewable = RB.AbstractReviewable.extend({\n    defaults: _.defaults({\n        baseFileDiffID: null,\n        file: null,\n        fileDiffID: null,\n        interdiffRevision: null,\n        interFileDiffID: null,\n        revision: null,\n        public: false,\n    }, RB.AbstractReviewable.prototype.defaults),\n\n    commentBlockModel: RB.DiffCommentBlock,\n\n    defaultCommentBlockFields: [\n        'baseFileDiffID',\n        'fileDiffID',\n        'interFileDiffID',\n        'public',\n    ],\n\n    /**\n     * Load a serialized comment and add comment blocks for it.\n     *\n     * Args:\n     *     serializedCommentBlock (object):\n     *         The serialized data for the new comment block(s).\n     */\n    loadSerializedCommentBlock(serializedCommentBlock) {\n        this.createCommentBlock({\n            reviewRequest: this.get('reviewRequest'),\n            review: this.get('review'),\n            fileDiffID: this.get('fileDiffID'),\n            interFileDiffID: this.get('interFileDiffID'),\n            beginLineNum: serializedCommentBlock.linenum,\n            endLineNum: serializedCommentBlock.linenum +\n                        serializedCommentBlock.num_lines - 1,\n            serializedComments: serializedCommentBlock.comments || [],\n            public: this.get('public'),\n        });\n    },\n\n    /**\n     * Return the rendered diff for a file.\n     *\n     * The rendered file will be fetched from the server and eventually\n     * returned through the promise.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object, optional):\n     *         The option arguments that control the behavior of this function.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     *     oldOptions (object, optional):\n     *         Previous location of the options parameter.\n     *\n     * Option Args:\n     *     showDeleted (boolean):\n     *         Determines whether or not we want to requeue the corresponding\n     *         diff in order to show its deleted content.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    getRenderedDiff(options={}, context=undefined, oldOptions={}) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.DiffReviewable.getRenderedDiff was called ' +\n                         'using callbacks. Callers should be updated to ' +\n                         'use promises instead.');\n            return RB.promiseToCallbacks(\n                _.defaults({}, options, oldOptions), context,\n                newOptions => this.getRenderedDiff(newOptions));\n        }\n\n        return this._fetchFragment({\n            url: this._buildRenderedDiffURL({\n                index: this.get('file').get('index'),\n                showDeleted: options.showDeleted,\n            }),\n            noActivityIndicator: true,\n        });\n    },\n\n    /**\n     * Return a rendered fragment of a diff.\n     *\n     * The fragment will be fetched from the server and eventually returned\n     * through the promise.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     *     oldOptions (object, optional):\n     *         Previous location of the options parameter.\n     *\n     * Option Args:\n     *     chunkIndex (string):\n     *         The chunk index to load.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    getRenderedDiffFragment(options, context=undefined, oldOptions={}) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.DiffReviewable.getRenderedDiffFragment was ' +\n                         'called using callbacks. Callers should be updated ' +\n                         'to use promises instead.');\n            return RB.promiseToCallbacks(\n                _.defaults({}, options, oldOptions), context,\n                newOptions => this.getRenderedDiffFragment(newOptions));\n        }\n\n        console.assert(options.chunkIndex !== undefined,\n                       'chunkIndex must be provided');\n\n        return this._fetchFragment({\n            url: this._buildRenderedDiffURL({\n                chunkIndex: options.chunkIndex,\n                index: this.get('file').get('index'),\n                linesOfContext: options.linesOfContext,\n            }),\n        });\n    },\n\n    /**\n     * Fetch the diff fragment from the server.\n     *\n     * This is used internally by getRenderedDiff and getRenderedDiffFragment\n     * to do all the actual fetching.\n     *\n     * Args:\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    _fetchFragment(options) {\n        return new Promise(resolve => {\n            RB.apiCall(_.defaults(\n                {\n                    type: 'GET',\n                    dataType: 'html',\n                    complete: xhr => resolve(xhr.responseText),\n                },\n                options));\n        });\n    },\n\n    /**\n     * Return a URL that forms the base of a diff fragment fetch.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the URL.\n     *\n     * Option Args:\n     *     chunkIndex (number, optional):\n     *         The chunk index to load.\n     *\n     *     index (number, optional):\n     *         The file index to load.\n     *\n     *     linesOfContext (number, optional):\n     *         The number of lines of context to load.\n     *\n     *     showDeleted (boolean, optional):\n     *         Whether to show deleted content.\n     *\n     * Returns:\n     *     string:\n     *     The URL for fetching diff fragments.\n     */\n    _buildRenderedDiffURL(options={}) {\n        const reviewURL = this.get('reviewRequest').get('reviewURL');\n        const interdiffRevision = this.get('interdiffRevision');\n        const fileDiffID = this.get('fileDiffID');\n        const interFileDiffID = this.get('interFileDiffID');\n        const baseFileDiffID = this.get('baseFileDiffID');\n        const revision = this.get('revision');\n\n        const revisionPart = (interdiffRevision\n                              ? `${revision}-${interdiffRevision}`\n                              : revision);\n\n        const fileDiffPart = (interFileDiffID\n                              ? `${fileDiffID}-${interFileDiffID}`\n                              : fileDiffID);\n\n        let url = `${reviewURL}diff/${revisionPart}/fragment/${fileDiffPart}/`;\n\n        if (options.chunkIndex !== undefined) {\n            url += `chunk/${options.chunkIndex}/`;\n        }\n\n        /* Build the query string. */\n        const queryParts = [];\n\n        if (baseFileDiffID) {\n            queryParts.push(`base-filediff-id=${baseFileDiffID}`);\n        }\n\n        if (options.index !== undefined) {\n            queryParts.push(`index=${options.index}`);\n        }\n\n        if (options.linesOfContext !== undefined) {\n            queryParts.push(`lines-of-context=${options.linesOfContext}`);\n        }\n\n        if (options.showDeleted) {\n            queryParts.push(`show-deleted=1`);\n        }\n\n        queryParts.push(`_=${TEMPLATE_SERIAL}`);\n\n        const queryStr = queryParts.join('&');\n\n        return `${url}?${queryStr}`;\n    },\n});\n"],"mappings":"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"}