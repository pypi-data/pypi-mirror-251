{"version":3,"file":"diffFileModelTests.js","names":["suite","describe","it","data","RB","DiffFile","prototype","parse","call","undefined","base_filediff_id","binary","comment_counts","deleted","depot_filename","dest_filename","filediff","id","revision","index","interfilediff","newfile","expect","not","toBe","baseFileDiffID","commentCounts","toEqual","depotFilename","destFilename"],"sources":["../../../../../../../static/rb/js/diffviewer/models/tests/diffFileModelTests.es6.js"],"sourcesContent":["suite('rb/diffviewer/models/DiffFile', function() {\n    describe('parse', function() {\n        it('API payloads', function() {\n            const data = RB.DiffFile.prototype.parse.call(undefined, {\n                base_filediff_id: 12,\n                binary: false,\n                comment_counts: [1],\n                deleted: true,\n                depot_filename: 'foo',\n                dest_filename: 'bar',\n                filediff: {\n                    id: 38,\n                    revision: 2\n                },\n                id: 28,\n                index: 3,\n                interfilediff: {\n                    id: 23,\n                    revision: 4\n                },\n                newfile: true,\n                revision: 3\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.baseFileDiffID).toBe(12);\n            expect(data.binary).toBe(false);\n            expect(data.commentCounts).toEqual([1]);\n            expect(data.deleted).toBe(true);\n            expect(data.depotFilename).toBe('foo');\n            expect(data.destFilename).toBe('bar');\n            expect(data.filediff).not.toBe(undefined);\n            expect(data.filediff.id).toBe(38);\n            expect(data.filediff.revision).toBe(2);\n            expect(data.id).toBe(28);\n            expect(data.index).toBe(3);\n            expect(data.interfilediff).not.toBe(undefined);\n            expect(data.interfilediff.id).toBe(23);\n            expect(data.interfilediff.revision).toBe(4);\n            expect(data.newfile).toBe(true);\n            expect(data.revision).toBe(3);\n        });\n    });\n});\n"],"mappings":";;AAAAA,KAAK,CAAC,+BAA+B,EAAE,YAAW;EAC9CC,QAAQ,CAAC,OAAO,EAAE,YAAW;IACzBC,EAAE,CAAC,cAAc,EAAE,YAAW;MAC1B,MAAMC,IAAI,GAAGC,EAAE,CAACC,QAAQ,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,EAAE;QACrDC,gBAAgB,EAAE,EAAE;QACpBC,MAAM,EAAE,KAAK;QACbC,cAAc,EAAE,CAAC,CAAC,CAAC;QACnBC,OAAO,EAAE,IAAI;QACbC,cAAc,EAAE,KAAK;QACrBC,aAAa,EAAE,KAAK;QACpBC,QAAQ,EAAE;UACNC,EAAE,EAAE,EAAE;UACNC,QAAQ,EAAE;QACd,CAAC;QACDD,EAAE,EAAE,EAAE;QACNE,KAAK,EAAE,CAAC;QACRC,aAAa,EAAE;UACXH,EAAE,EAAE,EAAE;UACNC,QAAQ,EAAE;QACd,CAAC;QACDG,OAAO,EAAE,IAAI;QACbH,QAAQ,EAAE;MACd,CAAC,CAAC;MAEFI,MAAM,CAACnB,IAAI,CAAC,CAACoB,GAAG,CAACC,IAAI,CAACf,SAAS,CAAC;MAChCa,MAAM,CAACnB,IAAI,CAACsB,cAAc,CAAC,CAACD,IAAI,CAAC,EAAE,CAAC;MACpCF,MAAM,CAACnB,IAAI,CAACQ,MAAM,CAAC,CAACa,IAAI,CAAC,KAAK,CAAC;MAC/BF,MAAM,CAACnB,IAAI,CAACuB,aAAa,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;MACvCL,MAAM,CAACnB,IAAI,CAACU,OAAO,CAAC,CAACW,IAAI,CAAC,IAAI,CAAC;MAC/BF,MAAM,CAACnB,IAAI,CAACyB,aAAa,CAAC,CAACJ,IAAI,CAAC,KAAK,CAAC;MACtCF,MAAM,CAACnB,IAAI,CAAC0B,YAAY,CAAC,CAACL,IAAI,CAAC,KAAK,CAAC;MACrCF,MAAM,CAACnB,IAAI,CAACa,QAAQ,CAAC,CAACO,GAAG,CAACC,IAAI,CAACf,SAAS,CAAC;MACzCa,MAAM,CAACnB,IAAI,CAACa,QAAQ,CAACC,EAAE,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC;MACjCF,MAAM,CAACnB,IAAI,CAACa,QAAQ,CAACE,QAAQ,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;MACtCF,MAAM,CAACnB,IAAI,CAACc,EAAE,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC;MACxBF,MAAM,CAACnB,IAAI,CAACgB,KAAK,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC;MAC1BF,MAAM,CAACnB,IAAI,CAACiB,aAAa,CAAC,CAACG,GAAG,CAACC,IAAI,CAACf,SAAS,CAAC;MAC9Ca,MAAM,CAACnB,IAAI,CAACiB,aAAa,CAACH,EAAE,CAAC,CAACO,IAAI,CAAC,EAAE,CAAC;MACtCF,MAAM,CAACnB,IAAI,CAACiB,aAAa,CAACF,QAAQ,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;MAC3CF,MAAM,CAACnB,IAAI,CAACkB,OAAO,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;MAC/BF,MAAM,CAACnB,IAAI,CAACe,QAAQ,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC,CAAC"}