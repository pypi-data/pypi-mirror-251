{"version":3,"file":"apiTokensView.js","names":["POLICY_READ_WRITE","POLICY_READ_ONLY","POLICY_CUSTOM","POLICY_LABELS","gettext","APITokenItem","RB","Config","ResourceListItem","extend","defaults","_","policyType","localSiteName","showRemove","prototype","syncAttrs","initialize","_super","apply","arguments","on","_onPolicyTypeChanged","policy","get","_guessPolicyType","_policyMenuAction","id","label","children","_makePolicyAction","dispatchOnClick","actions","unshift","set","createResource","attrs","APIToken","userName","UserSession","instance","localSitePrefix","collection","saveNote","note","_saveAttribute","savePolicy","options","attr","value","resource","ready","save","isEqual","defaultPolicies","readOnly","readWrite","type","name","propName","radioValue","trigger","newPolicy","console","assert","APITokenItemCollection","Backbone","Collection","model","models","PolicyEditorView","View","template","join","prevPolicyType","_codeMirror","_$policy","_$saveButtons","render","isEmpty","custom","$el","html","instructions","interpolate","MANUAL_URL","$","val","JSON","stringify","modalBox","title","buttons","click","bind","cancel","find","CodeMirror","fromTextArea","mode","lineNumbers","lineWrapping","matchBrackets","lint","onUpdateLinting","_onUpdateLinting","gutters","focus","remove","closeOnSave","policyStr","getValue","strip","parse","success","error","xhr","errorPayload","err","code","fields","alert","msg","e","SyntaxError","annotationsNotSorted","prop","length","APITokenItemView","Djblets","ListItemView","EMPTY_NOTE_PLACEHOLDER","actionHandlers","_$note","listenTo","_updateNote","call","inlineEditor","editIconClass","beginEdit","complete","toggleClass","text","_onCustomPolicyClicked","view","_onRemoveClicked","destroy","SiteAPITokensView","className","generateTokenTemplate","events","apiTokens","apiTokensList","List","_listView","ListView","ItemView","animateItems","prependTo","_$generateTokenItem","generateText","appendTo","getBody","_onGenerateClicked","apiToken","add","detach","APITokensView","_$listsContainer","_apiTokenViews","info","Object","entries","tokens","push"],"sources":["apiTokensView.es6.js"],"sourcesContent":["(function() {\n\n\nconst POLICY_READ_WRITE = 'rw';\nconst POLICY_READ_ONLY = 'ro';\nconst POLICY_CUSTOM = 'custom';\nconst POLICY_LABELS = {\n    [POLICY_READ_WRITE]: gettext('Full access'),\n    [POLICY_READ_ONLY]: gettext('Read-only'),\n    [POLICY_CUSTOM]: gettext('Custom')\n};\n\n\n/**\n * Represents an API token in the list.\n *\n * This provides actions for editing the policy type for the token and\n * removing the token.\n */\nconst APITokenItem = RB.Config.ResourceListItem.extend({\n    defaults: _.defaults({\n        policyType: POLICY_READ_WRITE,\n        localSiteName: null,\n        showRemove: true\n    }, RB.Config.ResourceListItem.prototype.defaults),\n\n    syncAttrs: ['id', 'note', 'policy', 'tokenValue'],\n\n    /**\n     * Initialize the item.\n     *\n     * This computes the type of policy used, for display, and builds the\n     * policy actions menu.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this.on('change:policyType', this._onPolicyTypeChanged, this);\n\n        const policy = this.get('policy') || {};\n        const policyType = this._guessPolicyType(policy);\n\n        this._policyMenuAction = {\n            id: 'policy',\n            label: POLICY_LABELS[policyType],\n            children: [\n                this._makePolicyAction(POLICY_READ_WRITE),\n                this._makePolicyAction(POLICY_READ_ONLY),\n                this._makePolicyAction(POLICY_CUSTOM, {\n                    id: 'policy-custom',\n                    dispatchOnClick: true\n                })\n            ]\n        };\n        this.actions.unshift(this._policyMenuAction);\n\n        this.set('policyType', policyType);\n    },\n\n    /**\n     * Create an APIToken resource for the given attributes.\n     *\n     * Args:\n     *     attrs (object):\n     *         Additional attributes for the APIToken.\n     */\n    createResource(attrs) {\n        return new RB.APIToken(_.defaults({\n            userName: RB.UserSession.instance.get('username'),\n            localSitePrefix: this.collection.localSitePrefix\n        }, attrs));\n    },\n\n    /**\n     * Set the provided note on the token and save it.\n     *\n     * Args:\n     *     note (string):\n     *         The new note for the token.\n     */\n    saveNote(note) {\n        this._saveAttribute('note', note);\n    },\n\n    /**\n     * Set the provided policy on the token and save it.\n     *\n     * Args:\n     *     policy (object):\n     *         The new policy for the token.\n     *\n     *     options (object):\n     *         Additional options for the save operation.\n     */\n    savePolicy(policy, options) {\n        this._saveAttribute('policy', policy, options);\n    },\n\n    /**\n     * Set an attribute on the token and save it.\n     *\n     * This is a helper function that will set an attribute on the token\n     * and save it, but only after the token is ready.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to set.\n     *\n     *     value (object or string):\n     *         The new value for the attribute.\n     *\n     *     options (object):\n     *         Additional options for the save operation.\n     */\n    _saveAttribute(attr, value, options) {\n        this.resource.ready({\n            ready: () => {\n                this.resource.set(attr, value);\n                this.resource.save(options);\n            }\n        });\n    },\n\n    /**\n     * Guess the policy type for a given policy definition.\n     *\n     * This compares the policy against the built-in versions that\n     * RB.APIToken provides. If one of them matches, the appropriate\n     * policy type will be returned. Otherwise, this assumes it's a\n     * custom policy.\n     *\n     * Args:\n     *     policy (object):\n     *         A policy object.\n     *\n     * Returns:\n     *     string:\n     *     The policy type enumeration corresponding to the policy.\n     */\n    _guessPolicyType(policy) {\n        if (_.isEqual(policy, RB.APIToken.defaultPolicies.readOnly)) {\n            return POLICY_READ_ONLY;\n        } else if (_.isEqual(policy, RB.APIToken.defaultPolicies.readWrite)) {\n            return POLICY_READ_WRITE;\n        } else {\n            return POLICY_CUSTOM;\n        }\n    },\n\n    /**\n     * Create and return an action for the policy menu.\n     *\n     * This takes a policy type and any options to include with the\n     * action definition. It will then return a suitable action,\n     * for display in the policy menu.\n     *\n     * Args:\n     *     policyType (string):\n     *         The policy type to create.\n     *\n     *     options (object):\n     *         Additional options to include in the new action definition.\n     */\n    _makePolicyAction(policyType, options) {\n        return _.defaults({\n            label: POLICY_LABELS[policyType],\n            type: 'radio',\n            name: 'policy-type',\n            propName: 'policyType',\n            radioValue: policyType\n        }, options);\n    },\n\n    /**\n     * Handler for when the policy type changes.\n     *\n     * This will set the policy menu's label to that of the selected\n     * policy and rebuild the menu.\n     *\n     * Then, if not using a custom policy, the built-in policy definition\n     * matching the selected policy will be saved to the server.\n     */\n    _onPolicyTypeChanged() {\n        const policyType = this.get('policyType');\n\n        this._policyMenuAction.label = POLICY_LABELS[policyType];\n        this.trigger('actionsChanged');\n\n        let newPolicy = null;\n\n        if (policyType === POLICY_READ_ONLY) {\n            newPolicy = RB.APIToken.defaultPolicies.readOnly;\n        } else if (policyType === POLICY_READ_WRITE) {\n            newPolicy = RB.APIToken.defaultPolicies.readWrite;\n        } else {\n            return;\n        }\n\n        console.assert(newPolicy !== null);\n\n        if (!_.isEqual(newPolicy, this.get('policy'))) {\n            this.savePolicy(newPolicy);\n        }\n    }\n});\n\n\n/**\n * A collection of APITokenItems.\n *\n * This works like a standard Backbone.Collection, but can also have\n * a LocalSite URL prefix attached to it, for use in API calls in\n * APITokenItem.\n */\nconst APITokenItemCollection = Backbone.Collection.extend({\n    model: APITokenItem,\n\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial models for the collection.\n     *\n     *     options (object):\n     *         Additional options for the collection.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the current local site, if any.\n     */\n    initialize(models, options) {\n        this.localSitePrefix = options.localSitePrefix;\n    }\n});\n\n\n/**\n * Provides an editor for constructing or modifying a custom policy definition.\n *\n * This renders as a modalBox with a CodeMirror editor inside of it. The\n * editor is set to allow easy editing of a JSON payload, complete with\n * lintian checking. Only valid policy payloads can be saved to the server.\n */\nconst PolicyEditorView = Backbone.View.extend({\n    id: 'custom_policy_editor',\n\n    template: _.template([\n        '<p><%= instructions %></p>',\n        '<textarea/>'\n    ].join('')),\n\n    /**\n     * Initialize the editor.\n     *\n     * Args:\n     *     options (object):\n     *         Additional options for view construction.\n     *\n     * Option Args:\n     *     prevPolicyType (string):\n     *         The previous policy type, to use when restoring the value after\n     *         the edit has been cancelled.\n     */\n    initialize(options) {\n        this.prevPolicyType = options.prevPolicyType;\n\n        this._codeMirror = null;\n        this._$policy = null;\n        this._$saveButtons = null;\n    },\n\n    /**\n     * Render the editor.\n     *\n     * The CodeMirror editor will be set up and configured, and then the\n     * view will be placed inside a modalBox.\n     *\n     * Returns:\n     *     PolicyEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        let policy = this.model.get('policy');\n\n        if (_.isEmpty(policy)) {\n            policy = RB.APIToken.defaultPolicies.custom;\n        }\n\n        this.$el.html(this.template({\n            instructions: interpolate(\n                gettext('You can limit access to the API through a custom policy. See the <a href=\"%s\" target=\"_blank\">documentation</a> on how to write policies.'),\n                [MANUAL_URL + 'webapi/2.0/api-token-policy/'])\n        }));\n\n\n        this._$policy = this.$('textarea')\n            .val(JSON.stringify(policy, null, '  '));\n\n        this.$el.modalBox({\n            title: gettext('Custom Token Access Policy'),\n            buttons: [\n                $('<input type=\"button\"/>')\n                    .val(gettext('Cancel'))\n                    .click(_.bind(this.cancel, this)),\n                $('<input type=\"button\" class=\"save-button\"/>')\n                    .val(gettext('Save and continue editing'))\n                    .click(() => {\n                        this.save();\n                        return false;\n                    }),\n                $('<input type=\"button\" class=\"btn primary save-button\"/>')\n                    .val(gettext('Save'))\n                    .click(() => {\n                        this.save(true);\n                        return false;\n                    })\n            ]\n        });\n\n        this._$saveButtons = this.$el.modalBox('buttons').find('.save-button');\n\n        this._codeMirror = CodeMirror.fromTextArea(this._$policy[0], {\n            mode: 'application/json',\n            lineNumbers: true,\n            lineWrapping: true,\n            matchBrackets: true,\n            lint: {\n                onUpdateLinting: _.bind(this._onUpdateLinting, this)\n            },\n            gutters: ['CodeMirror-lint-markers']\n        });\n        this._codeMirror.focus();\n    },\n\n    /**\n     * Remove the policy editor from the page.\n     */\n    remove() {\n        this.$el.modalBox('destroy');\n    },\n\n    /**\n     * Cancel the editor.\n     *\n     * The previously-selected policy type will be set on the model.\n     */\n    cancel() {\n        this.model.set('policyType', this.prevPolicyType);\n    },\n\n    /**\n     * Save the editor.\n     *\n     * The policy will be saved to the server for immediate use.\n     *\n     * Args:\n     *     closeOnSave (boolean):\n     *         Whether the editor should close after saving.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    save(closeOnSave) {\n        const policyStr = this._codeMirror.getValue().strip();\n\n        try {\n            const policy = JSON.parse(policyStr);\n\n            this.model.savePolicy(policy, {\n                success: () => {\n                    this.model.set('policyType', POLICY_CUSTOM);\n\n                    if (closeOnSave) {\n                        this.remove();\n                    }\n                },\n                error: (model, xhr) => {\n                    if (xhr.errorPayload.err.code === 105 &&\n                        xhr.errorPayload.fields.policy) {\n                        alert(xhr.errorPayload.fields.policy);\n                    } else {\n                        alert(xhr.errorPayload.err.msg);\n                    }\n                }\n            });\n        } catch (e) {\n            if (e instanceof SyntaxError) {\n                alert(interpolate(\n                    gettext('There is a syntax error in your policy: %s'),\n                    [e]));\n            } else {\n                throw e;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * Handler for when lintian checking has run.\n     *\n     * This will disable the save buttons if there are any lintian errors.\n     *\n     * Args:\n     *     annotationsNotSorted (Array):\n     *         An array of the linter annotations.\n     */\n    _onUpdateLinting(annotationsNotSorted) {\n        this._$saveButtons.prop('disabled', annotationsNotSorted.length > 0);\n    }\n});\n\n\n/**\n * Renders an APITokenItem to the page, and handles actions.\n *\n * This will display the information on the given token. Specifically,\n * the token value, the note, and the actions.\n *\n * This also handles deleting the token when the Remove action is clicked,\n * and displaying the policy editor when choosing a custom policy.\n */\nconst APITokenItemView = Djblets.Config.ListItemView.extend({\n    EMPTY_NOTE_PLACEHOLDER: gettext('Click to describe this token'),\n\n    template: _.template([\n        '<div class=\"config-api-token-value\"><%- tokenValue %></div>',\n        '<span class=\"config-api-token-note\"></span>'\n    ].join('')),\n\n    actionHandlers: {\n        'delete': '_onRemoveClicked',\n        'policy-custom': '_onCustomPolicyClicked'\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this._$note = null;\n\n        this.listenTo(this.model.resource, 'change:note', this._updateNote);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     APITokenItemView:\n     *     This object, for chaining.\n     */\n    render() {\n        _super(this).render.call(this);\n\n        this._$note = this.$('.config-api-token-note')\n            .inlineEditor({\n                editIconClass: 'rb-icon rb-icon-edit'\n            })\n            .on({\n                beginEdit: () => this._$note.inlineEditor(\n                    'setValue', this.model.get('note')),\n                complete: (e, value) => this.model.saveNote(value)\n            });\n\n        this._updateNote();\n\n        return this;\n    },\n\n    /**\n     * Update the displayed note.\n     *\n     * If no note is set, then a placeholder will be shown, informing the\n     * user that they can edit the note. Otherwise, their note contents\n     * will be shown.\n     */\n    _updateNote() {\n        const note = this.model.resource.get('note');\n        this._$note\n            .toggleClass('empty', !note)\n            .text(note ? note : this.EMPTY_NOTE_PLACEHOLDER);\n    },\n\n    /**\n     * Handler for when the \"Custom\" policy action is clicked.\n     *\n     * This displays the policy editor, allowing the user to edit a\n     * custom policy for the token.\n     *\n     * The previously selected policy type is passed along to the editor,\n     * so that the editor can revert to it if the user cancels.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    _onCustomPolicyClicked() {\n        const view = new PolicyEditorView({\n            model: this.model,\n            prevPolicyType: this.model.get('policyType')\n        });\n        view.render();\n\n        return false;\n    },\n\n    /**\n     * Handler for when the Remove action is clicked.\n     *\n     * This will prompt for confirmation before removing the token from\n     * the server.\n     */\n    _onRemoveClicked() {\n        $('<p/>')\n            .html(gettext('This will prevent clients using this token when authenticating.'))\n            .modalBox({\n                title: gettext('Are you sure you want to remove this token?'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n                    $('<input type=\"button\" class=\"danger\" />')\n                        .val(gettext('Remove'))\n                        .click(() => this.model.resource.destroy())\n                ]\n            });\n    }\n});\n\n\n/**\n * Renders and manages a list of global or per-LocalSite API tokens.\n *\n * This will display all provided API tokens in a list, optionally labeled\n * by Local Site name. These can be removed or edited, or new tokens generated\n * through a \"Generate a new API token\" link.\n */\nconst SiteAPITokensView = Backbone.View.extend({\n    className: 'config-site-api-tokens',\n\n    template: _.template(dedent`\n        <% if (name) { %>\n         <div class=\"djblets-l-config-forms-container\">\n          <h3><%- name %></h3>\n         </div>\n        <% } %>\n        <div class=\"api-tokens\">\n        </div>\n    `),\n\n    generateTokenTemplate: _.template(dedent`\n        <li class=\"generate-api-token djblets-c-config-forms-list__item\">\n         <a href=\"#\"><%- generateText %></a>\n        </li>\n    `),\n\n    events: {\n        'click .generate-api-token': '_onGenerateClicked'\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * This will construct the collection of tokens and construct\n     * a list for the ListView.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     localSiteName (string):\n     *         The name of the local site, if any.\n     *\n     *     localSitePrefix (string):\n     *         The URL prefix of the local site, if any.\n     */\n    initialize(options) {\n        this.localSiteName = options.localSiteName;\n        this.localSitePrefix = options.localSitePrefix;\n\n        this.collection = new APITokenItemCollection(options.apiTokens, {\n            localSitePrefix: this.localSitePrefix\n        });\n\n        this.apiTokensList = new Djblets.Config.List({}, {\n            collection: this.collection\n        });\n\n        this._listView = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will render the list of API token items, along with a link\n     * for generating new tokens.\n     *\n     * Returns:\n     *     SiteAPITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._listView = new Djblets.Config.ListView({\n            ItemView: APITokenItemView,\n            animateItems: true,\n            model: this.apiTokensList\n        });\n\n        this.$el.html(this.template({\n            name: this.localSiteName,\n        }));\n\n        this._listView.render().$el.prependTo(this.$('.api-tokens'));\n\n        this._$generateTokenItem =\n            $(this.generateTokenTemplate({\n                generateText: _`Generate a new API token`,\n            }))\n            .appendTo(this._listView.getBody());\n\n        return this;\n    },\n\n    /**\n     * Handler for when the \"Generate a new API token\" link is clicked.\n     *\n     * This creates a new API token on the server and displays it in the list.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    _onGenerateClicked() {\n        const apiToken = new RB.APIToken({\n            localSitePrefix: this.localSitePrefix,\n            userName: RB.UserSession.instance.get('username')\n        });\n\n        apiToken.save({\n            success: () => {\n                this.collection.add({\n                    resource: apiToken\n                });\n\n                this._$generateTokenItem\n                    .detach()\n                    .appendTo(this._listView.getBody());\n            }\n        });\n\n        return false;\n    }\n});\n\n\n/**\n * Renders and manages a page of API tokens.\n *\n * This will take the provided tokens and group them into SiteAPITokensView\n * instances, one per Local Site and one for the global tokens.\n */\nRB.APITokensView = Backbone.View.extend({\n    template: _.template(dedent`\n        <div class=\"api-tokens-list djblets-l-config-forms-container\n                    -is-recessed -is-top-flush\">\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     apiTokens (Array of object):\n     *         Initial contents of the tokens list.\n     */\n    initialize(options) {\n        this.apiTokens = options.apiTokens;\n\n        this._$listsContainer = null;\n        this._apiTokenViews = [];\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up the elements and the list of SiteAPITokensViews.\n     *\n     * Returns:\n     *     RB.APITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template());\n\n        this._$listsContainer = this.$('.api-tokens-list');\n\n        for (let [localSiteName, info] of Object.entries(this.apiTokens)) {\n            const view = new SiteAPITokensView({\n                localSiteName: localSiteName,\n                localSitePrefix: info.localSitePrefix,\n                apiTokens: info.tokens\n            });\n\n            view.$el.appendTo(this._$listsContainer);\n            view.render();\n\n            this._apiTokenViews.push(view);\n        }\n\n        return this;\n    }\n});\n\n\n})();\n"],"mappings":"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"}