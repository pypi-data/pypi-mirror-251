{"version":3,"file":"inlineEditorView.js","names":["RB","InlineEditorView","Backbone","View","extend","defaultOptions","animationSpeedMS","deferEventSetup","editIconPath","editIconClass","enabled","extraHeight","focusOnOpen","formatResult","value","htmlEncode","formClass","getFieldValue","editor","$field","val","hasRawValue","isFieldDirty","initialValue","getValue","normValue","options","normalizeText","length","matchHeight","multiline","notifyUnchangedCompletion","promptOnCancel","rawValue","setFieldValue","showButtons","showEditIcon","showRequiredFlag","startOpen","initialize","_","defaults","_initialValue","_editing","_dirty","_dirtyCalcTimeout","render","$el","data","_$form","$","addClass","css","hide","insertBefore","createField","prependTo","_isTextArea","tagName","$buttons","appendTo","gettext","click","submit","bind","cancel","_$editIcon","editText","attr","e","preventDefault","stopPropagation","startEdit","append","requiredText","id","insertAfter","setupEvents","preventAnimation","enable","disable","autoSizeTextArea","keydown","keyCode","charCode","which","ctrlKey","keypress","keyup","_scheduleUpdateDirtyState","on","useEditIconOnly","isDragging","mousedown","one","mouseup","unbind","window","resize","_fitWidthToParent","arguments","undefined","text","htmlDecode","trigger","showEditor","fadeOut","show","elHeight","outerHeight","newHeight","height","animate","queue","focus","select","dequeue","hideEditor","blur","fadeIn","_updateDirtyState","save","dirty","isDirty","html","confirm","clearTimeout","setValue","editing","stripTags","replace","strip","setTimeout","newDirtyState","$formParent","parent","parentTextAlign","isLeftAligned","boxSizing","extentTypes","buttonsWidth","buttonsDisplay","outerWidth","width","innerWidth","offset","left","getExtents","RichTextInlineEditorView","textEditor","setText","getText","prototype","origRichText","TextEditorView","textEditorOptions","once","$span","$checkbox","uniqueId","change","defer","bindRichTextCheckbox","$markdownRef","MANUAL_URL","setVisible","richText","bindRichTextVisibility","listenTo","_showEditor","_hideEditor","setRichText"],"sources":["inlineEditorView.es6.js"],"sourcesContent":["/**\n * A view for inline editors.\n *\n * This provides the framework for items which are \"editable\". These provide a\n * way to switch between a normal view and an edit view, which is usually a\n * text box (either single- or multiple-line).\n */\nRB.InlineEditorView = Backbone.View.extend({\n    /**\n     * Defaults for the view options.\n     */\n    defaultOptions: {\n        animationSpeedMS: 200,\n        deferEventSetup: false,\n        editIconPath: null,\n        editIconClass: null,\n        enabled: true,\n        extraHeight: 100,\n        focusOnOpen: true,\n        formatResult: value => value.htmlEncode(),\n        formClass: '',\n        getFieldValue: editor => editor.$field.val(),\n        hasRawValue: false,\n        isFieldDirty: (editor, initialValue) => {\n            const value = editor.getValue() || '';\n            const normValue = (editor.options.hasRawValue\n                               ? value\n                               : value.htmlEncode()) || '';\n            initialValue = editor.normalizeText(initialValue);\n\n            return (normValue.length !== initialValue.length ||\n                    normValue !== initialValue);\n        },\n        matchHeight: true,\n        multiline: false,\n        notifyUnchangedCompletion: false,\n        promptOnCancel: true,\n        rawValue: null,\n        setFieldValue: (editor, value) => editor.$field.val(value),\n        showButtons: true,\n        showEditIcon: true,\n        showRequiredFlag: false,\n        startOpen: false,\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     animationSpeedMS (number, optional):\n     *         The duration of animated transitions, in milliseconds.\n     *\n     *     deferEventSetup (boolean, optional):\n     *         Whether to defer event setup after rendering. This should be\n     *         used when a consumer wants to prioritize event handling (such as\n     *         handling the \"enter\" key for autocomplete).\n     *\n     *     editIconClass (string, optional):\n     *         The class name to use for the edit icon, when the icon is\n     *         created via CSS rules. This is only used if ``editIconPath`` is\n     *         unspecified.\n     *\n     *     editIconPath (string, optional):\n     *         The path for an image for the edit icon.\n     *\n     *     enabled (boolean):\n     *         Whether editing is enabled.\n     *\n     *     extraHeight (number, optional):\n     *         Extra height to add when displaying the editor, in pixels.\n     *\n     *     focusOnOpen (boolean, optional):\n     *         Whether to focus the field when opening the editor.\n     *\n     *     formatResult (function, optional):\n     *         A function to format the resulting value after editing back\n     *         into the element.\n     *\n     *     formClass (string, optional):\n     *         The class to add to the form's DOM element.\n     *\n     *     getFieldValue (function, optional):\n     *         A function to retrieve the field value.\n     *\n     *     hasRawValue (boolean, optional):\n     *         Whether the field has a \"raw value\", which is data for the field\n     *         separate from the actual contents of the element.\n     *\n     *     isFieldDirty (function, optional):\n     *         A function to calculate whether the editor value is dirty.\n     *\n     *     matchHeight (boolean, optional):\n     *         Whether to attempt to match the height of the editor and the\n     *         element it's replacing.\n     *\n     *     multiline (boolean, optional):\n     *         Whether the text input should be multi-line or single-line.\n     *\n     *     notifyUnchangedCompletion (boolean, optional):\n     *         Whether the editor should trigger a ``complete`` event even if\n     *         the value was unchanged. If this is ``false``, the editor will\n     *         trigger a ``cancel`` event instead.\n     *\n     *     promptOnCancel (boolean, optional):\n     *         Whether to prompt the user before cancelling if the editor is\n     *         dirty.\n     *\n     *     rawValue (*, optional):\n     *         When ``hasRawValue`` is ``true``, this provides the data for the\n     *         raw value of the item being edited.\n     *\n     *     setFieldValue (function, optional):\n     *         A function to set the field value.\n     *\n     *     showButtons (boolean, optional):\n     *         Whether to show OK/Cancel buttons.\n     *\n     *     showEditIcon (boolean, optional):\n     *         Whether to show the edit icon.\n     *\n     *     showRequiredFlag (boolean, optional):\n     *         Whether to show the required flag on the edit icon.\n     *\n     *     startOpen (boolean, optional):\n     *         Whether the editor should be open when first created.\n     *\n     *     stripTags (boolean, optional):\n     *         Whether to strip out HTML tags when normalizing input.\n     *\n     *     useEditIconOnly (boolean, optional):\n     *         Whether the editor can be opened only by clicking on the edit\n     *         icon. If false, clicking on the field value will also trigger an\n     *         edit.\n     */\n    initialize(options) {\n        this.options = _.defaults(options, this.defaultOptions);\n        this._initialValue = null;\n        this._editing = false;\n        this._dirty = false;\n        this._dirtyCalcTimeout = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.InlineEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.data('inline-editor', this);\n\n        this._$form = $('<form>')\n            .addClass(`inline-editor-form ${this.options.formClass}`)\n            .css('display', 'inline')\n            .hide()\n            .insertBefore(this.$el);\n\n        this.$field = this.createField()\n            .prependTo(this._$form);\n        this._isTextArea = (this.$field[0].tagName === 'TEXTAREA');\n\n        this.$buttons = $();\n\n        if (this.options.showButtons) {\n            this.$buttons = $(this.options.multiline ? '<div>' : '<span>')\n                .hide()\n                .addClass('buttons')\n                .appendTo(this._$form);\n\n            $('<input type=\"button\" class=\"save\">')\n                .val(gettext('OK'))\n                .appendTo(this.$buttons)\n                .click(this.submit.bind(this));\n\n            $('<input type=\"button\" class=\"cancel\">')\n                .val(gettext('Cancel'))\n                .appendTo(this.$buttons)\n                .click(this.cancel.bind(this));\n        }\n\n        this._$editIcon = $();\n\n        if (this.options.showEditIcon) {\n            const editText = gettext('Edit this field');\n            this._$editIcon = $('<a class=\"editicon\" href=\"#\" role=\"button\">')\n                .attr({\n                    'title': editText,\n                    'aria-label': editText,\n                })\n                .click(e => {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    this.startEdit();\n                });\n\n            if (this.options.editIconPath) {\n                this._$editIcon.append(\n                    `<img src=\"${this.options.editIconPath}\">`);\n            } else if (this.options.editIconClass) {\n                this._$editIcon.append(\n                    `<div class=\"${this.options.editIconClass}\" aria-hidden=\"true\"></div>`);\n            }\n\n            if (this.options.showRequiredFlag) {\n                const requiredText = gettext('This field is required');\n                $('<span class=\"required-flag\">*</span>')\n                    .attr({\n                        'aria-label': requiredText,\n                        'title': requiredText,\n                    })\n                    .appendTo(this._$editIcon);\n            }\n\n            if (this.options.multiline && this.$el[0].id) {\n                $(`label[for=\"${this.$el[0].id}\"]`)\n                    .append(this._$editIcon);\n            } else {\n                this._$editIcon.insertAfter(this.$el);\n            }\n        }\n\n        if (!this.options.deferEventSetup) {\n            this.setupEvents();\n        }\n\n        if (this.options.startOpen) {\n            this.startEdit({\n                preventAnimation: true,\n            });\n        }\n\n        if (this.options.enabled) {\n            this.enable();\n        } else {\n            this.disable();\n        }\n\n        return this;\n    },\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        if (this.options.multiline) {\n            return $('<textarea>').autoSizeTextArea();\n        } else {\n            return $('<input type=\"text\">');\n        }\n    },\n\n    /**\n     * Connect events.\n     */\n    setupEvents() {\n        this.$field\n            .keydown(e => {\n                e.stopPropagation();\n\n                switch (e.keyCode || e.charCode || e.which) {\n                    case 13: // Enter\n                        if (!this.options.multiline || e.ctrlKey) {\n                            this.submit();\n                        }\n\n                        if (!this.options.multiline) {\n                            e.preventDefault();\n                        }\n\n                        break;\n\n                    case 27: // Escape\n                        this.cancel();\n                        break;\n\n                    case 83: // S\n                    case 115: // s\n                        if (e.ctrlKey) {\n                            this.submit();\n                            e.preventDefault();\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            })\n            .keypress(e => e.stopPropagation())\n            .keyup(e => {\n                e.stopPropagation();\n                e.preventDefault();\n\n                this._scheduleUpdateDirtyState();\n            })\n            .on('cut paste', () => this._scheduleUpdateDirtyState());\n\n        if (!this.options.useEditIconOnly) {\n            /*\n             * Check if the mouse was dragging, so that the editor isn't opened\n             * when text is selected.\n             */\n            let isDragging = true;\n\n            this.$el\n                .on('click', 'a', e => e.stopPropagation())\n                .click(e => {\n                    e.stopPropagation();\n                    e.preventDefault();\n\n                    if (!isDragging) {\n                        this.startEdit();\n                    }\n\n                    isDragging = true;\n                })\n                .mousedown(() => {\n                    isDragging = false;\n                    this.$el.one('mousemove', () => {\n                        isDragging = true;\n                    });\n                })\n                .mouseup(() => {\n                    this.$el.unbind('mousemove');\n                });\n        }\n\n        $(window).resize(this._fitWidthToParent.bind(this));\n    },\n\n    /**\n     * Start editing.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the operation.\n     *\n     * Option Args:\n     *     preventAnimation (boolean, optional):\n     *         Whether to prevent the default animation.\n     */\n    startEdit(options={}) {\n        if (this._editing || !this.options.enabled) {\n            return;\n        }\n\n        let value;\n\n        if (this.options.hasRawValue) {\n            this._initialValue = this.options.rawValue;\n            value = this._initialValue;\n        } else {\n            this._initialValue = this.$el.text();\n            value = this.normalizeText(this._initialValue).htmlDecode();\n        }\n\n        this._editing = true;\n        this.options.setFieldValue(this, value);\n\n        this.trigger('beginEditPreShow');\n        this.showEditor(options);\n        this.trigger('beginEdit');\n    },\n\n    /**\n     * Show the editor.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the operation.\n     *\n     * Options Args:\n     *     preventAnimation (boolean, optional):\n     *         Whether to prevent the default animation.\n     */\n    showEditor(options={}) {\n        if (this.options.multiline && !options.preventAnimation) {\n            this._$editIcon.fadeOut(this.options.animationSpeedMS);\n        } else {\n            this._$editIcon.hide();\n        }\n\n        this.$el.hide();\n        this._$form.show();\n\n        if (this.options.multiline) {\n            const elHeight = this.$el.outerHeight();\n            const newHeight = elHeight + this.options.extraHeight;\n\n            this._fitWidthToParent();\n\n            if (this._isTextArea) {\n                if (this.options.matchHeight) {\n                    // TODO: Set autosize min height\n                    this.$field\n                        .autoSizeTextArea('setMinHeight', newHeight)\n                        .css('overflow', 'hidden');\n\n                    if (options.preventAnimation) {\n                        this.$field.height(newHeight);\n                    } else {\n                        this.$field\n                            .height(elHeight)\n                            .animate({ height: newHeight },\n                                     this.options.animationSpeedMS);\n                    }\n                } else {\n                    /*\n                     * If there's significant processing that happens between\n                     * the text and what's displayed in the element, it's\n                     * likely that the rendered size will be different from the\n                     * editor size. In that case, don't try to match sizes,\n                     * just ask the field to auto-size itself to the size of\n                     * the source text.\n                     */\n                    this.$field.autoSizeTextArea('autoSize', true, false,\n                                                  elHeight);\n                }\n            }\n        }\n\n        this.$buttons.show();\n\n        // Execute this after the animation, if we performed one.\n        this.$field.queue(() => {\n            if (this.options.multiline && this._isTextArea) {\n                this.$field.css('overflow', 'auto');\n            }\n\n            this._fitWidthToParent();\n\n            if (this.options.focusOnOpen) {\n                this.$field.focus();\n            }\n\n            if (!this.options.multiline &&\n                this.$field[0].tagName === 'INPUT') {\n                this.$field[0].select();\n            }\n\n            this.$field.dequeue();\n        });\n    },\n\n    /**\n     * Hide the inline editor.\n     */\n    hideEditor() {\n        this.$field.blur();\n        this.$buttons.hide();\n\n        if (this.options.multiline) {\n            this._$editIcon.fadeIn(this.options.animationSpeedMS);\n        } else {\n            this._$editIcon.show();\n        }\n\n        if (this.options.multiline &&\n            this.options.matchHeight &&\n            this._editing &&\n            this._isTextArea) {\n            this.$field\n                .css('overflow', 'hidden')\n                .animate({ height: this.$el.outerHeight() },\n                        this.options.animationSpeedMS);\n        }\n\n        this.$field.queue(() => {\n            this.$el.show();\n            this._$form.hide();\n            this.$field.dequeue();\n        });\n\n        this._editing = false;\n        this._updateDirtyState();\n    },\n\n    /**\n     * Save the value of the editor.\n     */\n    save() {\n        const value = this.getValue();\n        const initialValue = this._initialValue;\n        const dirty = this.isDirty();\n\n        if (dirty) {\n            this.$el.html(this.options.formatResult(value));\n            this._initialValue = this.$el.text();\n        }\n\n        if (dirty || this.options.notifyUnchangedCompletion) {\n            this.trigger('complete', value, initialValue);\n\n            if (this.options.hasRawValue) {\n                this.options.rawValue = value;\n            }\n        } else {\n            this.trigger('cancel', this._initialValue);\n        }\n    },\n\n    /**\n     * Submit the editor.\n     */\n    submit() {\n        // hideEditor() resets the _dirty flag, so we need to save() first.\n        this.save();\n        this.hideEditor();\n    },\n\n    /**\n     * Cancel the edit.\n     */\n    cancel() {\n        if (!this.isDirty() ||\n            !this.options.promptOnCancel ||\n            confirm(gettext('You have unsaved changes. Are you sure you want to discard them?'))) {\n            this.hideEditor();\n            this.trigger('cancel', this._initialValue);\n        }\n    },\n\n    /**\n     * Return the dirty state of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the editor is currently dirty.\n     */\n    isDirty() {\n        if (this._dirtyCalcTimeout !== null) {\n            clearTimeout(this._dirtyCalcTimeout);\n            this._updateDirtyState();\n        }\n\n        return this._dirty;\n    },\n\n    /**\n     * Return the value in the field.\n     *\n     * Returns:\n     *     *:\n     *     The current value of the field.\n     */\n    getValue() {\n        return this.options.getFieldValue(this);\n    },\n\n    /**\n     * Set the value in the field.\n     *\n     * Args:\n     *     value (*):\n     *     The new value for the field.\n     */\n    setValue(value) {\n        this.options.setFieldValue(this, value);\n        this._updateDirtyState();\n    },\n\n    /**\n     * Enable the editor.\n     */\n    enable() {\n        if (this._editing) {\n            this.showEditor();\n        }\n\n        this._$editIcon.show();\n        this.options.enabled = true;\n    },\n\n    /**\n     * Disable the editor.\n     */\n    disable() {\n        if (this._editing) {\n            this.hideEditor();\n        }\n\n        this._$editIcon.hide();\n        this.options.enabled = false;\n    },\n\n    /**\n     * Return whether the editor is currently in edit mode.\n     *\n     * Returns:\n     *     boolean:\n     *     true if the inline editor is open.\n     */\n    editing() {\n        return this._editing;\n    },\n\n    /**\n     * Normalize the given text.\n     *\n     * Args:\n     *     text (string):\n     *         The text to normalize.\n     *\n     * Returns:\n     *     string:\n     *     The text with ``<br>`` elements turned into newlines and (in the\n     *     case of multi-line data), whitespace collapsed.\n     */\n    normalizeText(text) {\n        if (this.options.stripTags) {\n            /*\n             * Turn <br> elements back into newlines before stripping out all\n             * other tags. Without this, we lose multi-line data when editing\n             * some legacy data.\n             */\n            text = text.replace(/<br>/g, '\\n');\n            text = text.stripTags().strip();\n        }\n\n        if (!this.options.multiline) {\n            text = text.replace(/\\s{2,}/g, ' ');\n        }\n\n        return text;\n    },\n\n    /**\n     * Schedule an update for the dirty state.\n     */\n    _scheduleUpdateDirtyState() {\n        if (this._dirtyCalcTimeout === null) {\n            this._dirtyCalcTimeout = setTimeout(\n                this._updateDirtyState.bind(this), 200);\n        }\n    },\n\n    /**\n     * Update the dirty state of the editor.\n     */\n    _updateDirtyState() {\n        const newDirtyState = (\n            this._editing &&\n            this.options.isFieldDirty(this, this._initialValue));\n\n        if (this._dirty !== newDirtyState) {\n            this._dirty = newDirtyState;\n            this.trigger('dirtyStateChanged', this._dirty);\n        }\n\n        this._dirtyCalcTimeout = null;\n    },\n\n    /**\n     * Fit the editor width to the parent element.\n     */\n    _fitWidthToParent() {\n        if (!this._editing) {\n            return;\n        }\n\n        if (this.options.multiline) {\n            this.$field.css({\n                '-webkit-box-sizing': 'border-box',\n                '-moz-box-sizing': 'border-box',\n                'box-sizing': 'border-box',\n                'width': '100%',\n            });\n            return;\n        }\n\n        const $formParent = this._$form.parent();\n        const parentTextAlign = $formParent.css('text-align');\n        const isLeftAligned = (parentTextAlign === 'left');\n\n        if (!isLeftAligned) {\n            $formParent.css('text-align', 'left');\n        }\n\n        const boxSizing = this.$field.css('box-sizing');\n        let extentTypes;\n\n        if (boxSizing === 'border-box') {\n            extentTypes = 'm';\n        } else if (boxSizing === 'padding-box') {\n            extentTypes = 'p';\n        } else {\n            extentTypes = 'bmp';\n        }\n\n        let buttonsWidth = 0;\n\n        if (this.$buttons.length !== 0) {\n            const buttonsDisplay = this.$buttons.css('display');\n\n            if (buttonsDisplay === 'inline' ||\n                buttonsDisplay === 'inline-block') {\n                /*\n                 * The buttons are set for the same line as the field, so\n                 * factor the width of the buttons container into the field\n                 * width calculation below.\n                 */\n                buttonsWidth = this.$buttons.outerWidth();\n            }\n        }\n\n        /*\n         * First make the field really small so it will fit without wrapping,\n         * then figure out the offset and use it to calculate the desired\n         * width.\n         */\n        this.$field\n            .width(0)\n            .outerWidth(\n                $formParent.innerWidth() -\n                (this._$form.offset().left - $formParent.offset().left) -\n                this.$field.getExtents(extentTypes, 'lr') -\n                buttonsWidth);\n\n        if (!isLeftAligned) {\n            $formParent.css('text-align', parentTextAlign);\n        }\n    },\n});\n\n\n/**\n * A view for inline editors which use the CodeMirror editor for Markdown.\n */\nRB.RichTextInlineEditorView = RB.InlineEditorView.extend({\n    /**\n     * Defaults for the view options.\n     */\n    defaultOptions: _.defaults({\n        matchHeight: false,\n        multiline: true,\n        setFieldValue: (editor, value) =>\n            editor.textEditor.setText(value || ''),\n        getFieldValue: editor => editor.textEditor.getText(),\n        isFieldDirty: (editor, initialValue) => {\n            initialValue = editor.normalizeText(initialValue);\n\n            return editor.textEditor.isDirty(initialValue);\n        },\n    }, RB.InlineEditorView.prototype.defaultOptions),\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        let origRichText;\n\n        this.textEditor = new RB.TextEditorView(this.options.textEditorOptions);\n        this.textEditor.$el.on('resize', () => this.trigger('resize'));\n\n        this.$el.data('text-editor', this.textEditor);\n\n        this.once('beginEdit', () => {\n            const $span = $('<span class=\"enable-markdown\">');\n            const $checkbox = $('<input type=\"checkbox\">')\n                .attr('id', _.uniqueId('markdown_check'))\n                .change(() => _.defer(() => this._updateDirtyState()))\n                .appendTo($span);\n\n            this.textEditor.bindRichTextCheckbox($checkbox);\n\n            $('<label>')\n                .attr('for', $checkbox[0].id)\n                .text(gettext('Enable Markdown'))\n                .appendTo($span);\n\n            this.$buttons.append($span);\n\n            const $markdownRef = $('<a class=\"markdown-info\" target=\"_blank\">')\n                .attr('href', `${MANUAL_URL}users/markdown/`)\n                .text(gettext('Markdown Reference'))\n                .setVisible(this.textEditor.richText)\n                .appendTo(this.$buttons);\n\n            this.textEditor.bindRichTextVisibility($markdownRef);\n        });\n\n        this.listenTo(this, 'beginEdit', () => {\n            this.textEditor._showEditor();\n            origRichText = this.textEditor.richText;\n        });\n\n        this.listenTo(this, 'cancel', () => {\n            this.textEditor._hideEditor();\n            this.textEditor.setRichText(origRichText);\n        });\n\n        this.listenTo(this, 'complete', () => this.textEditor._hideEditor());\n\n        return this.textEditor.render().$el;\n    },\n});\n"],"mappings":"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"}