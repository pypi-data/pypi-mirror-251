{"version":3,"file":"reviewReplyModel.js","names":["RB","ReviewReply","BaseResource","extend","defaults","_","forceTextType","includeTextTypes","rawTextFields","review","bodyTop","bodyTopRichText","bodyBottom","bodyBottomRichText","timestamp","prototype","rspNamespace","listKey","extraQueryArgs","attrToJsonMap","serializedAttrs","deserializedAttrs","serializers","JSONSerializers","onlyIfValue","textType","value","undefined","COMMENT_LINK_NAMES","parseResourceData","rsp","raw_text_fields","data","call","body_top_text_type","body_bottom_text_type","publish","options","arguments","length","context","trigger","ready","set","save","trivial","success","isFunction","error","model","xhr","errorText","discardIfEmpty","bindCallbacks","isNew","get","_checkCommentsLink","linkNameIndex","linkName","url","href","apiCall","type","destroy","DraftResourceModelMixin"],"sources":["reviewReplyModel.es6.js"],"sourcesContent":["/**\n * A review reply.\n *\n * Encapsulates replies to a top-level review.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text type to request for text in all responses.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in responses.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if forceTextType is used and\n *         the caller fetches or posts with includeTextTypes=raw. The keys in\n *         this object are the field names, and the values are the raw versions\n *         of those attributes.\n *\n *     review (RB.Review):\n *         The review that this reply is replying to.\n *\n *     public (boolean):\n *         Whether this reply has been published.\n *\n *     bodyTop (string):\n *         The reply to the original review's ``bodyTop``.\n *\n *     bodyTopRichText (boolean):\n *         Whether the ``bodyTop`` field should be rendered as Markdown.\n *\n *     bodyBottom (string):\n *         The reply to the original review's ``bodyBottom``.\n *\n *     bodyBottomRichText (boolean):\n *         Whether the ``bodyBottom`` field should be rendered as Markdown.\n *\n *     timestamp (string):\n *         The timestamp of this reply.\n */\nRB.ReviewReply = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            includeTextTypes: null,\n            rawTextFields: {},\n            review: null,\n            'public': false,\n            bodyTop: null,\n            bodyTopRichText: false,\n            bodyBottom: null,\n            bodyBottomRichText: false,\n            timestamp: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'reply',\n    listKey: 'replies',\n\n    extraQueryArgs: {\n        'force-text-type': 'html',\n        'include-text-types': 'raw'\n    },\n\n    attrToJsonMap: {\n        bodyBottom: 'body_bottom',\n        bodyBottomRichText: 'body_bottom_text_type',\n        bodyTop: 'body_top',\n        bodyTopRichText: 'body_top_text_type',\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'bodyTop',\n        'bodyTopRichText',\n        'bodyBottom',\n        'bodyBottomRichText',\n        'public'\n    ],\n\n    deserializedAttrs: [\n        'bodyTop',\n        'bodyBottom',\n        'public',\n        'timestamp'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        bodyTopRichText: RB.JSONSerializers.textType,\n        bodyBottomRichText: RB.JSONSerializers.textType,\n        'public': value => value ? true : undefined\n    },\n\n    COMMENT_LINK_NAMES: [\n        'diff_comments',\n        'file_attachment_comments',\n        'general_comments',\n        'screenshot_comments'\n    ],\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     The attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.bodyTopRichText =\n            (rawTextFields.body_top_text_type === 'markdown');\n        data.bodyBottomRichText =\n            (rawTextFields.body_bottom_text_type === 'markdown');\n        data.rawTextFields = rsp.raw_text_fields || {};\n\n        return data;\n    },\n\n    /**\n     * Publish the reply.\n     *\n     * Before publishing, the \"publishing\" event will be triggered.\n     * After successfully publishing, \"published\" will be triggered.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    publish(options={}, context=undefined) {\n        this.trigger('publishing');\n\n        this.ready({\n            ready: () => {\n                this.set('public', true);\n                this.save({\n                    data: {\n                        'public': 1,\n                        trivial: options.trivial ? 1 : 0\n                    },\n                    success: () => {\n                        this.trigger('published');\n\n                        if (_.isFunction(options.success)) {\n                            options.success.call(context);\n                        }\n                    },\n                    error: (model, xhr) => {\n                        model.trigger('publishError', xhr.errorText);\n\n                        if (_.isFunction(options.error)) {\n                            options.error.call(context, model, xhr);\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    /**\n     * Discard the reply if it's empty.\n     *\n     * If the reply doesn't have any remaining comments on the server, then\n     * this will discard the reply.\n     *\n     * When we've finished checking, options.success will be called. It\n     * will be passed true if discarded, or false otherwise.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    discardIfEmpty(options={}, context=undefined) {\n        options = _.bindCallbacks(options, context);\n\n        this.ready({\n            ready: () => {\n                if (this.isNew() ||\n                    this.get('bodyTop') ||\n                    this.get('bodyBottom')) {\n                    if (_.isFunction(options.success)) {\n                        options.success(false);\n                    }\n\n                    return;\n                }\n\n                this._checkCommentsLink(0, options, context);\n            },\n\n            error: options.error\n        });\n    },\n\n    /**\n     * Check if there are comments, given the comment type.\n     *\n     * This is part of the discardIfEmpty logic.\n     *\n     * If there are comments, we'll give up and call options.success(false).\n     *\n     * If there are no comments, we'll move on to the next comment type. If\n     * we're done, the reply is discarded, and options.success(true) is called.\n     *\n     * Args:\n     *     linkNamesIndex (number):\n     *         An index into the ``COMMENT_LINK_NAMES`` Array.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    _checkCommentsLink(linkNameIndex, options, context) {\n        const linkName = this.COMMENT_LINK_NAMES[linkNameIndex];\n        const url = this.get('links')[linkName].href;\n\n        RB.apiCall({\n            type: 'GET',\n            url: url,\n            success: rsp => {\n                if (rsp[linkName].length > 0) {\n                    if (_.isFunction(options.success)) {\n                        options.success(false);\n                    }\n                } else if (linkNameIndex < this.COMMENT_LINK_NAMES.length - 1) {\n                    this._checkCommentsLink(linkNameIndex + 1, options,\n                                            context);\n                } else {\n                    this.destroy(\n                    _.defaults({\n                        success: () => {\n                            if (_.isFunction(options.success)) {\n                                options.success(true);\n                            }\n                        }\n                    }, options),\n                    context);\n                }\n            },\n            error: options.error\n        });\n    }\n});\n_.extend(RB.ReviewReply.prototype, RB.DraftResourceModelMixin);\n"],"mappings":"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"}