{"version":3,"file":"reviewablePageModel.js","names":["RB","ReviewablePage","Page","extend","defaults","_","checkForUpdates","checkUpdatesType","lastActivityTimestamp","pendingReview","reviewRequest","prototype","initialize","attributes","apply","arguments","get","console","assert","commentIssueManager","CommentIssueManager","editorData","fileAttachments","Backbone","Collection","map","mutableByUser","attrs","draft","createFileAttachment","model","FileAttachment","reviewRequestEditor","ReviewRequestEditor","parse","listenTo","info","trigger","_registerForUpdates","markShipIt","ready","set","shipIt","bodyTop","gettext","publish","rsp","reviewRequestData","state","ReviewRequest","visibility","repository","Repository","localSitePrefix","extraDraftAttrs","extraReviewRequestDraftData","createReview","beginCheckForUpdates"],"sources":["../../../../../../static/rb/js/pages/models/reviewablePageModel.es6.js"],"sourcesContent":["/**\n * A page used for editing, viewing, or reviewing review requests.\n *\n * This is responsible for setting up objects needed for manipulating a\n * review request or related state, for performing reviews, or otherwise\n * handling review-related tasks.\n *\n * This can be used directly or can be subclassed in order to provide\n * additional logic.\n *\n * Attributes:\n *     commentIssueManager (RB.CommentIssueManager):\n *         Manages the issue states for published comments.\n *\n *     reviewRequestEditor (RB.ReviewRequestEditor):\n *         Manages the edit states and capabilities for the review request\n *         for the page.\n *\n * Model Attributes:\n *     checkForUpdates (boolean):\n *         Whether the page should periodically check the server for updates\n *         made to the page.\n *\n *     checkUpdatesType (string):\n *         A type identifier used to represent the page for any update checks.\n *         This corresponds to strings used server-side. Arbitrary values\n *         have undefined behavior.\n *\n *     lastActivityTimestamp (string):\n *         A string-encoded timestamp representing the last time there was\n *         known activity on the review request.\n *\n *     pendingReview (RB.Review):\n *         The pending review (which may or may not yet have a server-side\n *         representation) used for any new review content.\n *\n *     reviewRequest (RB.ReviewRequest):\n *         The review request that this page is for.\n */\nRB.ReviewablePage = RB.Page.extend({\n    defaults: _.defaults({\n        checkForUpdates: false,\n        checkUpdatesType: null,\n        lastActivityTimestamp: null,\n        pendingReview: null,\n        reviewRequest: null,\n    }, RB.Page.prototype.defaults),\n\n    /**\n     * Initialize the page.\n     *\n     * This will construct a series of objects needed to work with reviews\n     * and the review request. It will also begin checking for updates made\n     * to the page, notifying the user if anything has changed.\n     *\n     * Args:\n     *     attributes (object):\n     *         Initial attributes passed to the constructor. This is used to\n     *         access initial state that won't otherwise be stored in this\n     *         page.\n     */\n    initialize(attributes) {\n        RB.Page.prototype.initialize.apply(this, arguments);\n\n        const reviewRequest = this.get('reviewRequest');\n\n        console.assert(\n            reviewRequest,\n            'The reviewRequest attribute or parse=true must be provided.');\n        console.assert(\n            this.get('pendingReview'),\n            'The pendingReview attribute or parse=true must be provided.');\n\n        this.commentIssueManager = new RB.CommentIssueManager({\n            reviewRequest: reviewRequest,\n        });\n\n        const editorData = attributes.editorData || {};\n        const fileAttachments = new Backbone.Collection(\n            _.map(editorData.fileAttachments,\n                  (editorData.mutableByUser\n                   ? attrs => reviewRequest.draft.createFileAttachment(attrs)\n                   : attrs => reviewRequest.createFileAttachment(attrs))),\n            {\n                model: RB.FileAttachment,\n            });\n\n        this.reviewRequestEditor = new RB.ReviewRequestEditor(\n            _.defaults({\n                commentIssueManager: this.commentIssueManager,\n                reviewRequest: reviewRequest,\n                fileAttachments: fileAttachments,\n            }, editorData),\n            {parse: true});\n\n        this.listenTo(reviewRequest, 'updated',\n                      info => this.trigger('reviewRequestUpdated', info));\n\n        if (this.get('checkForUpdates')) {\n            this._registerForUpdates();\n        }\n    },\n\n    /**\n     * Post a review marked as Ship It.\n     *\n     * This will create and publish a review, setting the Ship It state and\n     * changing the text to say \"Ship It!\".\n     */\n    async markShipIt() {\n        const pendingReview = this.get('pendingReview');\n\n        await pendingReview.ready();\n\n        pendingReview.set({\n            shipIt: true,\n            bodyTop: gettext('Ship It!'),\n        });\n        await pendingReview.publish();\n    },\n\n    /**\n     * Parse the data for the page.\n     *\n     * This will take data from the server and turn it into a series of\n     * objects and attributes needed for parts of the page.\n     *\n     * Args:\n     *     rsp (object):\n     *         The incoming data provided for the page.\n     *\n     * Returns:\n     *     object:\n     *     The resulting attributes for the page.\n     */\n    parse(rsp) {\n        let reviewRequestData;\n\n        if (rsp.reviewRequestData) {\n            reviewRequestData = _.defaults({\n                state: RB.ReviewRequest[rsp.reviewRequestData.state],\n                visibility: RB.ReviewRequest['VISIBILITY_' +\n                                             rsp.reviewRequestData.visibility],\n            }, rsp.reviewRequestData);\n\n            if (reviewRequestData.repository) {\n                reviewRequestData.repository = new RB.Repository(\n                    _.defaults({\n                        localSitePrefix: rsp.reviewRequestData.localSitePrefix,\n                    }, rsp.reviewRequestData.repository));\n            }\n        }\n\n        const reviewRequest = new RB.ReviewRequest(\n            reviewRequestData,\n            {\n                extraDraftAttrs: rsp.extraReviewRequestDraftData,\n            });\n\n        return {\n            reviewRequest: reviewRequest,\n            pendingReview: reviewRequest.createReview(),\n            lastActivityTimestamp: rsp.lastActivityTimestamp,\n            checkForUpdates: rsp.checkForUpdates,\n            checkUpdatesType: rsp.checkUpdatesType,\n        };\n    },\n\n    /**\n     * Register for update notification to the review request from the server.\n     *\n     * The server will be periodically checked for new updates. When a new\n     * update arrives, an update bubble will be displayed in the bottom-right\n     * of the page, and if the user has allowed desktop notifications in their\n     * account settings, a desktop notification will be shown with the update\n     * information.\n     */\n    _registerForUpdates() {\n        this.get('reviewRequest').beginCheckForUpdates(\n            this.get('checkUpdatesType'),\n            this.get('lastActivityTimestamp'));\n    },\n});\n"],"mappings":"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"}