{"version":3,"file":"reviewReplyModel.js","names":["RB","ReviewReply","BaseResource","extend","defaults","_","forceTextType","includeTextTypes","rawTextFields","review","bodyTop","bodyTopRichText","bodyBottom","bodyBottomRichText","timestamp","prototype","rspNamespace","listKey","extraQueryArgs","attrToJsonMap","serializedAttrs","deserializedAttrs","serializers","JSONSerializers","onlyIfValue","textType","value","undefined","COMMENT_LINK_NAMES","parseResourceData","rsp","raw_text_fields","data","call","body_top_text_type","body_bottom_text_type","publish","options","context","isFunction","success","error","complete","console","warn","promiseToCallbacks","newOptions","trigger","ready","set","save","trivial","err","message","discardIfEmpty","isNew","get","_checkCommentsLink","linkNameIndex","Promise","resolve","reject","linkName","url","href","apiCall","type","length","destroy","then","model","xhr","BackboneError","DraftResourceModelMixin"],"sources":["../../../../../../static/rb/js/resources/models/reviewReplyModel.es6.js"],"sourcesContent":["/**\n * A review reply.\n *\n * Encapsulates replies to a top-level review.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text type to request for text in all responses.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in responses.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if forceTextType is used and\n *         the caller fetches or posts with includeTextTypes=raw. The keys in\n *         this object are the field names, and the values are the raw versions\n *         of those attributes.\n *\n *     review (RB.Review):\n *         The review that this reply is replying to.\n *\n *     public (boolean):\n *         Whether this reply has been published.\n *\n *     bodyTop (string):\n *         The reply to the original review's ``bodyTop``.\n *\n *     bodyTopRichText (boolean):\n *         Whether the ``bodyTop`` field should be rendered as Markdown.\n *\n *     bodyBottom (string):\n *         The reply to the original review's ``bodyBottom``.\n *\n *     bodyBottomRichText (boolean):\n *         Whether the ``bodyBottom`` field should be rendered as Markdown.\n *\n *     timestamp (string):\n *         The timestamp of this reply.\n */\nRB.ReviewReply = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            includeTextTypes: null,\n            rawTextFields: {},\n            review: null,\n            'public': false,\n            bodyTop: null,\n            bodyTopRichText: false,\n            bodyBottom: null,\n            bodyBottomRichText: false,\n            timestamp: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'reply',\n    listKey: 'replies',\n\n    extraQueryArgs: {\n        'force-text-type': 'html',\n        'include-text-types': 'raw'\n    },\n\n    attrToJsonMap: {\n        bodyBottom: 'body_bottom',\n        bodyBottomRichText: 'body_bottom_text_type',\n        bodyTop: 'body_top',\n        bodyTopRichText: 'body_top_text_type',\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'bodyTop',\n        'bodyTopRichText',\n        'bodyBottom',\n        'bodyBottomRichText',\n        'public'\n    ],\n\n    deserializedAttrs: [\n        'bodyTop',\n        'bodyBottom',\n        'public',\n        'timestamp'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        bodyTopRichText: RB.JSONSerializers.textType,\n        bodyBottomRichText: RB.JSONSerializers.textType,\n        'public': value => value ? true : undefined\n    },\n\n    COMMENT_LINK_NAMES: [\n        'diff_comments',\n        'file_attachment_comments',\n        'general_comments',\n        'screenshot_comments'\n    ],\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     The attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.bodyTopRichText =\n            (rawTextFields.body_top_text_type === 'markdown');\n        data.bodyBottomRichText =\n            (rawTextFields.body_bottom_text_type === 'markdown');\n        data.rawTextFields = rsp.raw_text_fields || {};\n\n        return data;\n    },\n\n    /**\n     * Publish the reply.\n     *\n     * Before publishing, the \"publishing\" event will be triggered.\n     * After successfully publishing, \"published\" will be triggered.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async publish(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewReply.publish was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(options, context, newOptions =>\n                this.publish(newOptions));\n        }\n\n        this.trigger('publishing');\n\n        await this.ready();\n\n        this.set('public', true);\n\n        try {\n            await this.save({\n                data: {\n                    'public': 1,\n                    trivial: options.trivial ? 1 : 0\n                },\n            });\n        } catch (err) {\n            this.trigger('publishError', err.message);\n            throw err;\n        }\n\n        this.trigger('published');\n    },\n\n    /**\n     * Discard the reply if it's empty.\n     *\n     * If the reply doesn't have any remaining comments on the server, then\n     * this will discard the reply.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Changed to deprecate options and return a promise.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete. The\n     *     resolution value will be true if discarded, false otherwise.\n     */\n    async discardIfEmpty(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewReply.discardIfEmpty was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(options, context, newOptions =>\n                this.discardIfEmpty(newOptions));\n        }\n\n        await this.ready();\n\n        if (this.isNew() || this.get('bodyTop') || this.get('bodyBottom')) {\n            return false;\n        } else {\n            return this._checkCommentsLink(0);\n        }\n    },\n\n    /**\n     * Check if there are comments, given the comment type.\n     *\n     * This is part of the discardIfEmpty logic.\n     *\n     * If there are comments, we'll give up and call options.success(false).\n     *\n     * If there are no comments, we'll move on to the next comment type. If\n     * we're done, the reply is discarded, and options.success(true) is called.\n     *\n     * Args:\n     *     linkNamesIndex (number):\n     *         An index into the ``COMMENT_LINK_NAMES`` Array.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete. The\n     *     resolution value will be true if discarded, false otherwise.\n     */\n    _checkCommentsLink(linkNameIndex) {\n        return new Promise((resolve, reject) => {\n            const linkName = this.COMMENT_LINK_NAMES[linkNameIndex];\n            const url = this.get('links')[linkName].href;\n\n            RB.apiCall({\n                type: 'GET',\n                url: url,\n                success: rsp => {\n                    if (rsp[linkName].length > 0) {\n                        resolve(false);\n                    } else if (linkNameIndex < this.COMMENT_LINK_NAMES.length - 1) {\n                        resolve(this._checkCommentsLink(linkNameIndex + 1));\n                    } else {\n                        resolve(this.destroy().then(() => true));\n                    }\n                },\n                error: (model, xhr, options) => reject(\n                    new BackboneError(model, xhr, options)),\n            });\n        });\n    }\n});\n_.extend(RB.ReviewReply.prototype, RB.DraftResourceModelMixin);\n"],"mappings":"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"}