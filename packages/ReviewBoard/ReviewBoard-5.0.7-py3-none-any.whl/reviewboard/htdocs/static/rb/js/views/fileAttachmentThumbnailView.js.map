{"version":3,"file":"fileAttachmentThumbnailView.js","names":["RB","FileAttachmentThumbnail","Backbone","View","extend","className","events","template","_","actionsTemplate","join","thumbnailContainerTemplate","initialize","options","_draftComment","_comments","_commentsProcessed","_scrollingThumbnail","_playingVideo","render","renderThumbnail","_renderContents","_$captionContainer","$","_$caption","find","listenTo","model","$el","fadeOut","remove","_onCaptionChanged","hover","_onHoverIn","bind","_onHoverOut","_$actionsContainer","_$actions","children","_$thumbnailContainer","_$file","bindProperty","elementToModel","_onLoadedChanged","_renderThumbnail","canEdit","_captionEditorView","InlineEditorView","el","editIconClass","showButtons","addClass","_stopAnimating","hasClass","$field","val","trigger","removeClass","value","ready","set","save","attrs","fadeIn","css","fadeTo","showCommentDlg","console","assert","get","_processComments","_createDraftComment","CommentDialogView","create","comment","publishedComments","publishedCommentsType","position","beside","side","fitOnScreen","comments","forEach","localdraft","comment_id","text","push","commentID","review","reviewRequest","createReview","createFileAttachmentComment","id","caption","captionText","gettext","captionClass","html","defaults","attributes","Djblets","enableRetinaImages","each","i","tabIndex","deleteText","downloadText","reviewText","commentText","updateText","_onAddCommentClicked","e","preventDefault","stopPropagation","_onUpdateClicked","updateDlg","UploadAttachmentView","attachmentHistoryID","presetCaption","reviewRequestEditor","show","_onDeleteClicked","destroy","$thumbnail","actionsWidth","outerWidth","actionsRight","offset","left","window","width","length","thumbnailEl","tagName","promise","play","undefined","then","catch","error","elHeight","height","thumbnailHeight","distance","duration","Math","abs","delay","animate","easing","complete","stop","pause"],"sources":["../../../../../static/rb/js/views/fileAttachmentThumbnailView.es6.js"],"sourcesContent":["/**\n * Displays a thumbnail depicting a file attachment.\n *\n * There are two ways that Review Board currently renders file attachments.\n * One is on page load (as part of the initial page template), and the other\n * is dynamically (when uploading vs Drag and Drop or manual upload).\n *\n * Depending on the method, we either already have elements to work with,\n * or we don't. In the latter case, it's currently up to the caller to\n * tell us, using the renderThumbnail option.\n *\n * File attachments that aren't already on the page that are currently loading\n * will be displayed as a blank file attachment (no identifying information)\n * with a spinner. When loaded, it will appear as a standard file attachment.\n *\n * The following signals are provided, on top of the standard Backbone.View\n * signals:\n *\n *     * beginEdit\n *       - Editing of the file attachment (caption) has begun.\n *\n *     * endEdit\n *       - Editing of the file attachment (caption) has finished.\n *\n *     * commentSaved\n *       - A draft comment on the file has been saved.\n *         (Only for file attachments without a Review UI.)\n */\nRB.FileAttachmentThumbnail = Backbone.View.extend({\n    className: 'file-container',\n\n    events: {\n        'click .file-delete': '_onDeleteClicked',\n        'click .file-add-comment a': '_onAddCommentClicked',\n        'click .file-update a': '_onUpdateClicked',\n    },\n\n    template: _.template(dedent`\n        <div class=\"file\">\n         <div class=\"file-actions-container\">\n          <ul class=\"file-actions\"></ul>\n         </div>\n         <div class=\"file-thumbnail-container\"></div>\n         <div class=\"file-caption-container\">\n          <div class=\"file-caption can-edit\"><a href=\"<%- downloadURL %>\" class=\"<%- captionClass %>\"><%- caption %></a></div>\n         </div>\n        </div>\n        `),\n\n    actionsTemplate: _.template([\n        '<% if (loaded) { %>',\n        '<%  if (reviewURL) { %>',\n        '<li><a class=\"file-review\" href=\"<%- reviewURL %>\">',\n        '<span class=\"fa fa-comment-o\"></span> <%- reviewText %></a>',\n        '</li>',\n        '<%  } else { %>',\n        '<li class=\"file-add-comment\">',\n        '<a href=\"#\"><span class=\"fa fa-comment-o\"></span> <%- commentText %></a>',\n        '</li>',\n        '<%  } %>',\n        '<li><a class=\"file-download\" href=\"<%- downloadURL %>\">',\n        '<span class=\"fa fa-download\"></span> <%- downloadText %>',\n        '</a></li>',\n        '<%  if (canEdit) { %>',\n        '<%   if (attachmentHistoryID) { %>',\n        '<li class=\"file-update\">',\n        '<a href=\"#\" data-attachment-history-id=\"<%- attachmentHistoryID %>\">',\n        '<span class=\"fa fa-upload\"></span> <%- updateText %>',\n        '</a></li>',\n        '<%   } %>',\n        '<li class=\"file-delete\"><a href=\"#\">',\n        '<span class=\"fa fa-trash-o\"></span> <%- deleteText %>',\n        '</a></li>',\n        '<%  } %>',\n        '<% } %>',\n    ].join('')),\n\n    thumbnailContainerTemplate: _.template([\n        '<% if (!loaded) { %>',\n        '<span class=\"fa fa-spinner fa-pulse\"></span>',\n        '<% } else { %>',\n        '<%     if (reviewURL) { %>',\n        '<a href=\"<%- reviewURL %>\" class=\"file-thumbnail-overlay\"></a>',\n        '<%     } %>',\n        '<%=  thumbnailHTML %>',\n        '<% } %>',\n    ].join('')),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     canEdit (boolean):\n     *         Whether the user has permission to edit the file attachment.\n     *\n     *     comments (Array):\n     *         The comments on the file attachment.\n     *\n     *     renderThumbnail (boolean):\n     *         Whether the thumbnail should be rendered. This exists because we\n     *         sometimes attach to existing DOM elements rather than rendering\n     *         from scratch.\n     *\n     *     reviewRequest (RB.ReviewRequest):\n     *         The review request model.\n     *\n     *     reviewRequestEditor (RB.ReviewRequestEditor):\n     *         The review request editor.\n     */\n    initialize(options) {\n        this.options = options;\n\n        this._draftComment = null;\n        this._comments = [];\n        this._commentsProcessed = false;\n        this._scrollingThumbnail = false;\n        this._playingVideo = false;\n    },\n\n    /**\n     * Render the file attachment, and hooks up all events.\n     *\n     * If the renderThumbnail option was provided when constructing the view,\n     * this will render the thumbnail from scratch, and then dynamically\n     * update it as it loads. It will start off displaying with a spinner,\n     * if not yet loaded.\n     *\n     * In either case, this will set up the caption editor and other signals\n     * to control the lifetime of the thumbnail.\n     *\n     * Returns:\n     *     RB.FileAttachmentThumbnail:\n     *     This object, for chaining.\n     */\n    render() {\n        /*\n         * Until FileAttachmentThumbnail is the only thing rendering thumbnails,\n         * we'll be in a situation where we may either be working with an\n         * existing DOM element (for existing file attachments), or a new one\n         * (for newly uploaded file attachments). In the latter case, we'll want\n         * to render our own thumbnail.\n         */\n        if (this.options.renderThumbnail) {\n            this._renderContents();\n        }\n\n        this._$captionContainer = this.$('.file-caption');\n        this._$caption = this._$captionContainer.find('a.edit');\n\n        this.listenTo(this.model, 'destroy', () => {\n            this.$el.fadeOut(() => this.remove());\n        });\n\n        this.listenTo(this.model, 'change:caption', this._onCaptionChanged);\n        this._onCaptionChanged();\n\n        this.$el.hover(this._onHoverIn.bind(this),\n                       this._onHoverOut.bind(this));\n\n        if (this.options.renderThumbnail) {\n            this._$actionsContainer = this.$('.file-actions-container');\n            this._$actions = this._$actionsContainer.children('.file-actions');\n            this._$captionContainer = this.$('.file-caption-container');\n            this._$thumbnailContainer = this.$('.file-thumbnail-container');\n            this._$file = this.$('.file');\n\n            this._$actions.find('.file-download')\n                .bindProperty('href', this.model, 'downloadURL', {\n                    elementToModel: false,\n                });\n\n            this._$caption.bindProperty('href', this.model, 'downloadURL', {\n                elementToModel: false,\n            });\n\n            this.listenTo(this.model, 'change:loaded', this._onLoadedChanged);\n            this._onLoadedChanged();\n\n            this.listenTo(this.model, 'change:thumbnailHTML',\n                          this._renderThumbnail);\n            this._renderThumbnail();\n        }\n\n        if (this.options.canEdit !== false) {\n            this._captionEditorView = new RB.InlineEditorView({\n                el: this._$caption,\n                editIconClass: 'rb-icon rb-icon-edit',\n                showButtons: true,\n            });\n            this._captionEditorView.render();\n\n            this.listenTo(this._captionEditorView, 'beginEditPreShow', () => {\n                this.$el.addClass('editing');\n                this._stopAnimating();\n            });\n\n            this.listenTo(this._captionEditorView, 'beginEdit', () => {\n                if (this._$caption.hasClass('empty-caption')) {\n                    this._captionEditorView.$field.val('');\n                }\n\n                this.trigger('beginEdit');\n            });\n\n            this.listenTo(this._captionEditorView, 'cancel', () => {\n                this.$el.removeClass('editing');\n                this.trigger('endEdit');\n            });\n\n            this.listenTo(this._captionEditorView, 'complete', async (value) => {\n                this.$el.removeClass('editing');\n\n                /*\n                 * We want to set the caption after ready() finishes, in case\n                 * it loads state and overwrites.\n                 */\n                await this.model.ready();\n\n                this.model.set('caption', value);\n                this.trigger('endEdit');\n                await this.model.save({\n                    attrs: ['caption'],\n                });\n            });\n        }\n\n        return this;\n    },\n\n    /**\n     * Fade the view in.\n     */\n    fadeIn() {\n        this.$el\n            .css('opacity', 0)\n            .fadeTo(1000, 1);\n    },\n\n    /**\n     * Show the comment dialog for the file attachment.\n     *\n     * This is only ever used if the file attachment does not have a\n     * Review UI for it. A single comment dialog will appear, allowing\n     * comments on the file as a whole.\n     */\n    showCommentDlg() {\n        console.assert(!this.model.get('reviewURL'),\n                       'showCommentDlg can only be called if the file ' +\n                       'attachment does not have a review UI');\n        this._processComments();\n        this._createDraftComment();\n\n        RB.CommentDialogView.create({\n            comment: this._draftComment,\n            publishedComments: this._comments,\n            publishedCommentsType: 'file_attachment_comments',\n            position: {\n                beside: {\n                    el: this.$el,\n                    side: 'br',\n                    fitOnScreen: true,\n                },\n            },\n        });\n    },\n\n    /**\n     * Process all comments provided when constructing the view.\n     *\n     * The comments will be made usable by the comment dialog.\n     *\n     * This is only used if the file attachment does not have a Review UI.\n     */\n    _processComments() {\n        if (this._commentsProcessed) {\n            return;\n        }\n\n        const comments = this.options.comments || [];\n\n        comments.forEach(comment => {\n            if (comment.localdraft) {\n                this._createDraftComment(comment.comment_id, comment.text);\n            } else {\n                this._comments.push(comment);\n            }\n        });\n\n        this._commentsProcessed = true;\n    },\n\n    /**\n     * Create a new draft comment with the given ID and text.\n     *\n     * Only one draft comment can be created at a time.\n     *\n     * This is only used if the file attachment does not have a Review UI.\n     *\n     * Args:\n     *     commentID (number):\n     *         The ID of the draft comment.\n     *\n     *     text (string):\n     *         The comment text.\n     */\n    _createDraftComment(commentID, text) {\n        if (this._draftComment !== null) {\n            return;\n        }\n\n        const review = this.options.reviewRequest.createReview();\n        this._draftComment = review.createFileAttachmentComment(commentID,\n                                                                this.model.id);\n\n        if (text) {\n            this._draftComment.set('text', text);\n        }\n\n        this.listenTo(this._draftComment, 'saved',\n                      () => this.trigger('commentSaved', this._draftComment));\n    },\n\n    /**\n     * Render the contents of this view's element.\n     *\n     * This is only done when requested by the caller.\n     */\n    _renderContents() {\n        const caption = this.model.get('caption');\n        const captionText = caption ? caption : gettext('No caption');\n        const captionClass = caption ? 'edit' : 'edit empty-caption';\n\n        this.$el\n            .html(this.template(_.defaults({\n                caption: captionText,\n                captionClass: captionClass,\n            }, this.model.attributes)))\n            .addClass(this.className);\n    },\n\n    /**\n     * Render the thumbnail for the file attachment.\n     */\n    _renderThumbnail() {\n        this._$thumbnailContainer.html(\n            this.thumbnailContainerTemplate(this.model.attributes));\n\n        Djblets.enableRetinaImages(this._$thumbnailContainer);\n\n        // Disable tabbing to any <a> elements inside the thumbnail.\n        this._$thumbnailContainer.find('a').each((i, el) => {\n            el.tabIndex = -1;\n        });\n    },\n\n    /**\n     * Handler for when the model's 'loaded' property changes.\n     *\n     * Depending on if the file attachment is now loaded, either a\n     * blank spinner thumbnail will be shown, or a full thumbnail.\n     */\n    _onLoadedChanged() {\n        this._$actions.html(this.actionsTemplate(_.defaults({\n            canEdit: this.options.canEdit,\n            deleteText: gettext('Delete'),\n            downloadText: gettext('Download'),\n            reviewText: gettext('Review'),\n            commentText: gettext('Comment'),\n            updateText: gettext('Update'),\n        }, this.model.attributes)));\n    },\n\n    /**\n     * Handler for when the model's caption changes.\n     *\n     * If a caption is set, the thumbnail will display it. Otherwise,\n     * it will display \"No caption\".\n     */\n    _onCaptionChanged() {\n        const caption = this.model.get('caption');\n\n        if (caption) {\n            this._$caption\n                .text(caption)\n                .removeClass('empty-caption');\n        } else {\n            this._$caption\n                .text(gettext('No caption'))\n                .addClass('empty-caption');\n        }\n    },\n\n    /**\n     * Handler for the New Comment button.\n     *\n     * Shows the comment dialog.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the action.\n     */\n    _onAddCommentClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.showCommentDlg();\n    },\n\n    /**\n     * Handler for the Update button.\n     *\n     * Shows the upload form.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the action.\n     */\n    _onUpdateClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const model = this.model;\n        const updateDlg = new RB.UploadAttachmentView({\n            attachmentHistoryID: model.get('attachmentHistoryID'),\n            presetCaption: model.get('caption'),\n            reviewRequestEditor: this.options.reviewRequestEditor,\n        });\n        updateDlg.show();\n    },\n\n    /**\n     * Handler for the Delete button.\n     *\n     * Deletes the file attachment from the review request draft.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the action.\n     */\n    _onDeleteClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.model.destroy();\n    },\n\n    /**\n     * Handler for when the mouse hovers over the thumbnail.\n     *\n     * Determines if we should scroll the thumbnail or not.\n     */\n    _onHoverIn() {\n        const $thumbnail = this.$('.file-thumbnail').children();\n        const actionsWidth = this._$actionsContainer.outerWidth();\n        const actionsRight = (this._$file.offset().left +\n                              this._$file.outerWidth() +\n                              actionsWidth);\n\n        this.trigger('hoverIn', this.$el);\n\n        /*\n         * Position the actions menu to the left or right of the attachment\n         * thumbnail.\n         */\n        if (actionsRight > $(window).width()) {\n            this._$actionsContainer\n                .css('left', -actionsWidth)\n                .addClass('left');\n        } else {\n            this._$actionsContainer\n                .css('left', '100%')\n                .addClass('right');\n        }\n\n        if (!this.$el.hasClass('editing') && $thumbnail.length === 1) {\n            const thumbnailEl = $thumbnail[0];\n\n            if (thumbnailEl.tagName === 'VIDEO') {\n                /* The thumbnail contains a video, so let's start playing it. */\n                const promise = thumbnailEl.play();\n\n                if (promise === undefined) {\n                    /* Older browsers don't return Promises. */\n                    this._playingVideo = true;\n                } else {\n                    promise\n                        .then(() => {\n                            this._playingVideo = true;\n                        })\n                        .catch(error => {\n                            /* Ignore the error. We just won't play it. */\n                            console.error(\n                                'Unable to play the video attachment: %s',\n                                error);\n                        });\n                }\n            } else {\n                /* Scroll the container to show all available content. */\n                const elHeight = this.$el.height();\n                const thumbnailHeight = $thumbnail.height() || 0;\n\n                if (thumbnailHeight > elHeight) {\n                    const distance = elHeight - thumbnailHeight;\n                    const duration =\n                        (Math.abs(distance) / 200) * 1000; // 200 pixels/s\n\n                    this._scrollingThumbnail = true;\n                    $thumbnail\n                        .delay(1000)\n                        .animate(\n                            { 'margin-top': distance + 'px' },\n                            {\n                                duration: duration,\n                                easing: 'linear',\n                            })\n                        .delay(500)\n                        .animate(\n                            { 'margin-top': 0 },\n                            {\n                                duration: duration,\n                                easing: 'linear',\n                                complete: () => {\n                                    this._scrollingThumbnail = false;\n                                },\n                            });\n                }\n            }\n        }\n    },\n\n    /**\n     * Handler for when the mouse stops hovering over the thumbnail.\n     *\n     * Removes the classes for the actions container, and stops animating\n     * the thumbnail contents.\n     */\n    _onHoverOut() {\n        this.trigger('hoverOut');\n\n        this._$actionsContainer\n            .removeClass('left')\n            .removeClass('right');\n\n        this._stopAnimating();\n    },\n\n    /**\n     * Stop animating this thumbnail.\n     *\n     * This is when moving the mouse outside of the thumbnail, or when the\n     * caption editor is opened.\n     */\n    _stopAnimating() {\n        if (this._scrollingThumbnail) {\n            this._scrollingThumbnail = false;\n            this.$('.file-thumbnail').children()\n                .stop(true)\n                .animate(\n                    { 'margin-top': 0 },\n                    { duration: 100 });\n        } else if (this._playingVideo) {\n            this._playingVideo = false;\n            this.$('video')[0].pause();\n        }\n    },\n});\n"],"mappings":"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"}