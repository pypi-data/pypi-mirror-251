{"version":3,"file":"commentEditorModel.js","names":["RB","CommentEditor","Backbone","Model","extend","_","defaults","userSession","UserSession","instance","canDelete","canEdit","undefined","canSave","editing","extraData","comment","dirty","openIssue","get","publishedComments","publishedCommentsType","requireVerification","reviewRequest","richText","text","initialize","on","_updateFromComment","_updateCanEdit","model","reviewRequestEditor","incr","decr","set","_updateState","_setupExtraData","beginEdit","console","assert","deleteComment","destroy","trigger","close","cancel","off","destroyIfEmpty","ExtraData","save","options","context","isFunction","success","error","complete","warn","promiseToCallbacks","newOptions","clone","require_verification","issueOpened","includeTextTypes","oldComment","previous","defaultRichText","requiresVerification","textFields","isEmpty","ready","isNew","ExtraDataMixin"],"sources":["../../../../../static/rb/js/models/commentEditorModel.es6.js"],"sourcesContent":["/**\n * Represents the state for editing a new or existing draft comment.\n *\n * From here, a comment can be created, edited, or deleted.\n *\n * This will provide state on what actions are available on a comment,\n * informative text, dirty states, existing published comments on the\n * same region this comment is on, and more.\n *\n * Attributes:\n *     canDelete (boolean):\n *         Whether the draft comment can be deleted.\n *\n *     canEdit (boolean):\n *         Whether the draft comment can be edited.\n *\n *     canSave (boolean):\n *         Whether the draft comment can be saved.\n *\n *     editing (boolean):\n *         True if the comment is currently being edited.\n *\n *     extraData (object):\n *         The draft state for the comment's extra data.\n *\n *     comment (RB.BaseComment):\n *         The comment model.\n *\n *     dirty (boolean):\n *         True if the draft comment has been edited but not saved.\n *\n *     openIssue (boolean):\n *         Whether the comment opens an issue.\n *\n *     publishedComments (Array of RB.BaseComment):\n *         The thread of previous comments that this draft is a reply to, if\n *         applicable.\n *\n *     publishedCommentsType (string):\n *         The type of comment that this draft is a reply to, if applicable.\n *\n *     reviewRequest (RB.ReviewRequest):\n *         The review request that the comment is on.\n *\n *     richText (boolean):\n *         Whether the comment is formatted in Markdown.\n *\n *     text (string):\n *         The comment's text.\n */\nRB.CommentEditor = Backbone.Model.extend(_.defaults({\n    /**\n     * Return the default values for the model attributes.\n     *\n     * Returns:\n     *     object:\n     *     The default values for the attributes.\n     */\n    defaults() {\n        const userSession = RB.UserSession.instance;\n\n        return {\n            canDelete: false,\n            canEdit: undefined,\n            canSave: false,\n            editing: false,\n            extraData: {},\n            comment: null,\n            dirty: false,\n            openIssue: userSession.get('commentsOpenAnIssue'),\n            publishedComments: [],\n            publishedCommentsType: null,\n            requireVerification: false, // TODO: add a user preference for this.\n            reviewRequest: null,\n            richText: userSession.get('defaultUseRichText'),\n            text: '',\n        };\n    },\n\n    /**\n     * Initialize the comment editor.\n     */\n    initialize() {\n        const reviewRequest = this.get('reviewRequest');\n\n        this.on('change:comment', this._updateFromComment, this);\n        this._updateFromComment();\n\n        /*\n         * Unless a canEdit value is explicitly given, we want to compute\n         * the proper state.\n         */\n        if (this.get('canEdit') === undefined) {\n            reviewRequest.on('change:hasDraft', this._updateCanEdit, this);\n            this._updateCanEdit();\n        }\n\n        this.on('change:dirty', (model, dirty) => {\n            const reviewRequestEditor = this.get('reviewRequestEditor');\n\n            if (reviewRequestEditor) {\n                if (dirty) {\n                    reviewRequestEditor.incr('editCount');\n                } else {\n                    reviewRequestEditor.decr('editCount');\n                }\n            }\n        });\n\n        this.on(\n            'change:openIssue change:requireVerification ' +\n            'change:richText change:text',\n            () => {\n                if (this.get('editing')) {\n                    this.set('dirty', true);\n                    this._updateState();\n                }\n            });\n\n        this._updateState();\n\n        this._setupExtraData();\n    },\n\n    /**\n     * Set the editor to begin editing a new or existing comment.\n     */\n    beginEdit() {\n        console.assert(this.get('canEdit'),\n                       'beginEdit() called when canEdit is false.');\n        console.assert(this.get('comment'),\n                       'beginEdit() called when no comment was first set.');\n\n        this.set({\n            dirty: false,\n            editing: true,\n        });\n\n        this._updateState();\n    },\n\n    /**\n     * Delete the current comment, if it can be deleted.\n     *\n     * This requires that there's a saved comment to delete.\n     *\n     * The editor will be marked as closed, requiring a new call to beginEdit.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async deleteComment() {\n        console.assert(this.get('canDelete'),\n                       'deleteComment() called when canDelete is false.');\n\n        const comment = this.get('comment');\n        await comment.destroy();\n        this.trigger('deleted');\n        this.close();\n    },\n\n    /**\n     * Cancel editing of a comment.\n     *\n     * If there's a saved comment and it's been made empty, it will end\n     * up being deleted. Then this editor will be marked as closed,\n     * requiring a new call to beginEdit.\n     */\n    cancel() {\n        const comment = this.get('comment');\n\n        this.off('change:comment', this._updateFromComment, this);\n\n        if (comment) {\n            comment.destroyIfEmpty();\n            this.trigger('canceled');\n        }\n\n        this.close();\n    },\n\n    /**\n     * Close editing of the comment.\n     *\n     * The comment state will be reset, and the \"closed\" event will be\n     * triggered.\n     *\n     * To edit a comment again after closing it, the proper state must be\n     * set again and beginEdit must be called.\n     */\n    close() {\n        /* Set this first, to prevent dirty firing. */\n        this.set('editing', false);\n\n        this.set({\n            comment: null,\n            dirty: false,\n            extraData: new RB.ExtraData(),\n            text: '',\n        });\n\n        this.trigger('closed');\n    },\n\n    /**\n     * Save the comment.\n     *\n     * If this is a new comment, it will be created on the server.\n     * Otherwise, the existing comment will be updated.\n     *\n     * The editor will not automatically be marked as closed. That is up\n     * to the caller.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         The context to use when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async save(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.CommentEditor.save was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.save(newOptions));\n        }\n\n        console.assert(this.get('canSave'),\n                       'save() called when canSave is false.');\n\n        const extraData =  _.clone(this.get('extraData'));\n        extraData.require_verification = this.get('requireVerification');\n\n        const comment = this.get('comment');\n        comment.set({\n            text: this.get('text'),\n            issueOpened: this.get('openIssue'),\n            extraData: extraData,\n            richText: this.get('richText'),\n            includeTextTypes: 'html,raw,markdown',\n        });\n\n        await comment.save();\n\n        this.set('dirty', false);\n        this.trigger('saved');\n    },\n\n    /**\n     * Update the state of the editor from the currently set comment.\n     */\n    async _updateFromComment() {\n        const oldComment = this.previous('comment');\n        const comment = this.get('comment');\n\n        if (oldComment) {\n            oldComment.destroyIfEmpty();\n        }\n\n        if (comment) {\n            const defaultRichText = this.defaults().richText;\n\n            /*\n             * Set the attributes based on what we know at page load time.\n             *\n             * Note that it is *possible* that the comments will have changed\n             * server-side since loading the page (if the user is reviewing\n             * the same diff in two tabs). However, it's unlikely.\n             *\n             * Doing this before the ready() call ensures that we'll have the\n             * text and state up-front and that it won't overwrite what the\n             * user has typed after load.\n             *\n             * Note also that we'll always want to use our default richText\n             * value if it's true, and we'll fall back on the comment's value\n             * if false. This is so that we can keep a consistent experience\n             * when the \"Always edit Markdown by default\" value is set.\n             */\n            this.set({\n                dirty: false,\n                extraData: comment.get('extraData'),\n                openIssue: comment.get('issueOpened') === null\n                           ? this.defaults().openIssue\n                           : comment.get('issueOpened'),\n                requireVerification: comment.requiresVerification(),\n                richText: defaultRichText || !!comment.get('richText'),\n            });\n\n            /*\n             * We'll try to set the one from the appropriate text fields, if it\n             * exists and is not empty. If we have this, then it came from a\n             * previous save. If we don't have it, we'll fall back to \"text\",\n             * which should be normalized content from the initial page load.\n             */\n            const textFields = (comment.get('richText') || !defaultRichText\n                                ? comment.get('rawTextFields')\n                                : comment.get('markdownTextFields'));\n\n            this.set('text',\n                     !_.isEmpty(textFields)\n                     ? textFields.text\n                     : comment.get('text'));\n\n            await comment.ready();\n\n            this._updateState();\n        }\n    },\n\n    /**\n     * Update the canEdit state of the editor.\n     *\n     * This is based on the authentication state of the user, and\n     * whether or not there's an existing draft for the review request.\n     */\n    _updateCanEdit() {\n        const reviewRequest = this.get('reviewRequest');\n        const userSession = RB.UserSession.instance;\n\n        this.set('canEdit',\n                 userSession.get('authenticated') &&\n                 !userSession.get('readOnly') &&\n                 !reviewRequest.get('hasDraft'));\n    },\n\n    /**\n     * Update the capability states of the editor.\n     *\n     * Some of the can* properties will change to reflect the various\n     * actions that can be performed with the editor.\n     */\n    _updateState() {\n        const canEdit = this.get('canEdit');\n        const editing = this.get('editing');\n        const comment = this.get('comment');\n\n        this.set({\n            canDelete: canEdit && editing && comment && !comment.isNew(),\n            canSave: canEdit && editing && this.get('text') !== '',\n        });\n    },\n}, RB.ExtraDataMixin));\n"],"mappings":"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"}