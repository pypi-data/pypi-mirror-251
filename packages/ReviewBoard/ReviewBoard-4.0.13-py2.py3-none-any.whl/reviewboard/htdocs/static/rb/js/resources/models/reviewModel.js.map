{"version":3,"file":"reviewModel.js","names":["RB","Review","BaseResource","extend","defaults","_","forceTextType","shipIt","bodyTop","bodyTopRichText","bodyBottom","bodyBottomRichText","draftReply","htmlTextFields","includeTextTypes","markdownTextFields","rawTextFields","timestamp","prototype","rspNamespace","attrToJsonMap","serializedAttrs","deserializedAttrs","serializers","JSONSerializers","onlyIfValue","textType","value","undefined","supportsExtraData","parseResourceData","rsp","raw_text_fields","data","call","body_top_text_type","body_bottom_text_type","body_bottom","body_top","markdown_text_fields","html_text_fields","createDiffComment","options","arguments","length","console","warn","join","id","fileDiffID","interFileDiffID","beginLineNum","endLineNum","baseFileDiffID","error","DiffComment","parentObject","createScreenshotComment","screenshotID","x","y","width","height","ScreenshotComment","createFileAttachmentComment","fileAttachmentID","diffAgainstFileAttachmentID","FileAttachmentComment","createGeneralComment","issueOpened","GeneralComment","createReply","get","ReviewReply","set","once","reviewRequest","markUpdated"],"sources":["reviewModel.es6.js"],"sourcesContent":["/**\n * A review.\n *\n * This corresponds to a top-level review. Replies are encapsulated in\n * RB.ReviewReply.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text format type to request for text in all responses.\n *\n *     shipIt (boolean):\n *         Whether this review has the \"Ship It!\" state.\n *\n *     public (boolean):\n *         Whether this review has been published.\n *\n *     bodyTop (string):\n *         The contents of the header that shows up above all comments in the\n *         review.\n *\n *     bodyTopRichText (boolean):\n *         Whether the ``bodyTop`` field should be rendered as Markdown.\n *\n *     bodyBottom (string):\n *         The contents of the footer that shows up below all comments in the\n *         review.\n *\n *     bodyBottomRichText (boolean):\n *         Whether the ``bodyBottom`` field should be rendered as Markdown.\n *\n *     draftReply (RB.ReviewReply):\n *         The draft reply to this review, if any.\n *\n *     htmlTextFields (object):\n *         The contents of any HTML-rendered text fields, if the caller fetches\n *         or posts with ``includeTextTypes=html``. The keys in this object are\n *         the field names, and the values are the HTML versions of those\n *         attributes.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in the payload when\n *         syncing the model.\n *\n *     markdownTextFields (object):\n *         The source contents of any Markdown text fields, if the caller\n *         fetches or posts with ``includeTextTypes=markdown``. The keys in\n *         this object are the field names, and the values are the Markdown\n *         source of those fields.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if the caller fetches or posts\n *         with includeTextTypes=raw. The keys in this object are the field\n *         names, and the values are the raw versions of those attributes.\n *\n *     timestamp (string):\n *         The timestamp of this review.\n */\nRB.Review = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            shipIt: false,\n            'public': false,\n            bodyTop: null,\n            bodyTopRichText: false,\n            bodyBottom: null,\n            bodyBottomRichText: false,\n            draftReply: null,\n            htmlTextFields: {},\n            includeTextTypes: null,\n            markdownTextFields: {},\n            rawTextFields: {},\n            timestamp: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'review',\n\n    attrToJsonMap: {\n        bodyBottom: 'body_bottom',\n        bodyBottomRichText: 'body_bottom_text_type',\n        bodyTop: 'body_top',\n        bodyTopRichText: 'body_top_text_type',\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types',\n        shipIt: 'ship_it'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'shipIt',\n        'bodyTop',\n        'bodyTopRichText',\n        'bodyBottom',\n        'bodyBottomRichText',\n        'public'\n    ],\n\n    deserializedAttrs: [\n        'shipIt',\n        'bodyTop',\n        'bodyBottom',\n        'public',\n        'timestamp'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        bodyTopRichText: RB.JSONSerializers.textType,\n        bodyBottomRichText: RB.JSONSerializers.textType,\n        'public': value => value ? 1 : undefined\n    },\n\n    supportsExtraData: true,\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *    rsp (object):\n     *        The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.bodyTopRichText =\n            (rawTextFields.body_top_text_type === 'markdown');\n        data.bodyBottomRichText =\n            (rawTextFields.body_bottom_text_type === 'markdown');\n\n        if (rsp.raw_text_fields) {\n            data.rawTextFields = {\n                bodyBottom: rsp.raw_text_fields.body_bottom,\n                bodyTop: rsp.raw_text_fields.body_top\n            };\n        }\n\n        if (rsp.markdown_text_fields) {\n            data.markdownTextFields = {\n                bodyBottom: rsp.markdown_text_fields.body_bottom,\n                bodyTop: rsp.markdown_text_fields.body_top\n            };\n        }\n\n        if (rsp.html_text_fields) {\n            data.htmlTextFields = {\n                bodyBottom: rsp.html_text_fields.body_bottom,\n                bodyTop: rsp.html_text_fields.body_top,\n            };\n        }\n\n        return data;\n    },\n\n    /**\n     * Create a new diff comment for this review.\n     *\n     * Args:\n     *     options (object):\n     *         Options for creating the review.\n     *\n     * Option Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     fileDiffID (number):\n     *         The ID of the FileDiff that this comment is for.\n     *\n     *     interFileDiffID (number):\n     *         The ID of the FileDiff that represents the \"new\" side of an\n     *         interdiff. If this is specified, the ``fileDiffID`` argument\n     *         represents the \"old\" side.\n     *\n     *         This option is mutually exclusive with ``baseFileDiffID``.\n     *\n     *     beginLineNum (number):\n     *         The line number of the start of the comment.\n     *\n     *     endLineNum (number):\n     *         The line number of the end of the comment.\n     *\n     *     baseFileDiffID (number):\n     *         The ID of the base FileDiff in the cumulative diff that the\n     *         comment is to be made upon.\n     *\n     *         This option is mutually exclusive with ``interFileDiffID``.\n     *\n     * Returns:\n     *     RB.DiffComment:\n     *     The new comment object.\n     */\n    createDiffComment(...args) {\n        let options;\n\n        if (args.length === 1) {\n            options = args[0];\n        } else {\n            console.warn([\n                'RB.Review.createDiffComment(id, fileDiffID, ',\n                'interFileDiffID, beginLineNum, endLineNum) is deprecated. ',\n                'Use RB.Review.createDiffComment(options) instead.',\n            ].join(''));\n\n            options = {\n                id: args[0],\n                fileDiffID: args[1],\n                interFileDiffID: args[2],\n                beginLineNum: args[3],\n                endLineNum: args[4],\n            };\n        }\n\n        if (!!options.interFileDiffID && !!options.baseFileDiffID) {\n            console.error(\n                'Options `interFileDiffID` and `baseFileDiffID` for ' +\n                'RB.Review.createDiffComment() are mutually exclusive.');\n            return;\n        }\n\n        return new RB.DiffComment(_.defaults({parentObject: this}, options));\n    },\n\n    /**\n     * Create a new screenshot comment for this review.\n     *\n     * Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     screenshotID (number):\n     *         The ID of the Screenshot that this comment is for.\n     *\n     *     x (number):\n     *         The X coordinate of the pixel for the upper left of the comment\n     *         region.\n     *\n     *     y (number):\n     *         The Y coordinate of the pixel for the upper left of the comment\n     *         region.\n     *\n     *     width (number):\n     *         The width of the comment region, in pixels.\n     *\n     *     height (number):\n     *         The height of the comment region, in pixels.\n     *\n     * Returns:\n     *     RB.ScreenshotComment:\n     *     The new comment object.\n     */\n    createScreenshotComment(id, screenshotID, x, y, width, height) {\n        return new RB.ScreenshotComment({\n            parentObject: this,\n            id: id,\n            screenshotID: screenshotID,\n            x: x,\n            y: y,\n            width: width,\n            height: height\n        });\n    },\n\n    /**\n     * Create a new file attachment comment for this review.\n     *\n     * Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     fileAttachmentID (number):\n     *         The ID of the FileAttachment that this comment is for.\n     *\n     *     diffAgainstFileAttachmentID (number):\n     *         The ID of the FileAttachment that the ``fileAttachmentID`` is\n     *         diffed against, if the comment is for a file diff.\n     *\n     * Returns:\n     *     RB.FileAttachmentComment:\n     *     The new comment object.\n     */\n    createFileAttachmentComment(id, fileAttachmentID,\n                                diffAgainstFileAttachmentID) {\n        return new RB.FileAttachmentComment({\n            parentObject: this,\n            id: id,\n            fileAttachmentID: fileAttachmentID,\n            diffAgainstFileAttachmentID: diffAgainstFileAttachmentID\n        });\n    },\n\n    /**\n     * Create a new general comment for this review.\n     *\n     * Args:\n     *     id (number):\n     *         The ID for the new model (in the case of existing comments).\n     *\n     *     issueOpened (boolean):\n     *         Whether this comment should have an open issue.\n     *\n     * Returns:\n     *     RB.GeneralComment:\n     *     The new comment object.\n     */\n    createGeneralComment(id, issueOpened) {\n        return new RB.GeneralComment({\n            parentObject: this,\n            id: id,\n            issueOpened: issueOpened\n        });\n    },\n\n    /**\n     * Create a new reply.\n     *\n     * If an existing draft reply exists, return that. Otherwise create a draft\n     * reply.\n     *\n     * Returns:\n     *     RB.ReviewReply:\n     *     The new reply object.\n     */\n    createReply() {\n        let draftReply = this.get('draftReply');\n\n        if (draftReply === null) {\n            draftReply = new RB.ReviewReply({\n                parentObject: this\n            });\n            this.set('draftReply', draftReply);\n\n            draftReply.once('published', () => {\n                const reviewRequest = this.get('parentObject');\n                reviewRequest.markUpdated(draftReply.get('timestamp'));\n                this.set('draftReply', null);\n            });\n        }\n\n        return draftReply;\n    }\n});\n"],"mappings":"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"}