{"version":3,"file":"resourceCollection.js","names":["RB","ResourceCollection","BaseCollection","extend","initialize","models","options","parentResource","extraQueryData","maxResults","hasPrev","hasNext","currentPage","totalResults","undefined","_fetchURL","_links","url","links","get","listKey","_","result","model","prototype","link","href","parse","rsp","arguments","length","total_results","fetchingAll","prev","next","page","fetch","context","data","start","reset","remove","expandedFields","expand","join","defaults","ready","call","error","isFunction","bind","fetchPrev","fetchNext","enforceHasNext","fetchAll","bindCallbacks","fetchOptions","success","_prepareModel","apply","set"],"sources":["resourceCollection.es6.js"],"sourcesContent":["/**\n * Base collection for resource models.\n *\n * ResourceCollection handles the fetching of models from resource lists\n * in the API.\n *\n * It can do pagination by using fetchNext/fetchPrev. Callers can check\n * hasNext/hasPrev to determine if they've reached the end.\n *\n * To fetch one page at a time, use fetch(). This can take an optional\n * starting point.\n *\n * Use fetchAll to automatically paginate through all items and store them\n * all within the collection.\n */\nRB.ResourceCollection = RB.BaseCollection.extend({\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial set of models for the collection.\n     *\n     *     options (object):\n     *         Options for the collection.\n     *\n     * Option Args:\n     *     parentResource (RB.BaseResource):\n     *         The parent API resource.\n     *\n     *     extraQueryData (object):\n     *         Additional attributes to include in the API request query\n     *         string.\n     */\n    initialize(models, options) {\n        this.parentResource = options.parentResource;\n        this.extraQueryData = options.extraQueryData;\n        this.maxResults = options.maxResults;\n        this.hasPrev = false;\n        this.hasNext = false;\n        this.currentPage = 0;\n\n        /*\n         * Undefined means \"we don't know how many results there are.\"\n         * This is a valid value when parsing the payload later. It\n         * may also be a number.\n         */\n        this.totalResults = undefined;\n\n        this._fetchURL = null;\n        this._links = null;\n    },\n\n    /**\n     * Return the URL for fetching models.\n     *\n     * This will make use of a URL provided by fetchNext/fetchPrev/fetchAll,\n     * if provided.\n     *\n     * Otherwise, this will try to get the URL from the parent resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL to fetch.\n     */\n    url() {\n        if (this._fetchURL) {\n            return this._fetchURL;\n        }\n\n        if (this.parentResource) {\n            const links = this.parentResource.get('links');\n            const listKey = _.result(this.model.prototype, 'listKey');\n            const link = links[listKey];\n\n            return link ? link.href : null;\n        }\n\n        return null;\n    },\n\n    /**\n     * Parse the results from the list payload.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     *     options (object):\n     *         The options that were used for the fetch operation.\n     *\n     * Option Args:\n     *     fetchingAll (boolean):\n     *         Whether we're in the process of fetching all the items.\n     *\n     *     page (number):\n     *         The page of results that were fetched.\n     */\n    parse(rsp, options={}) {\n        const listKey = _.result(this.model.prototype, 'listKey');\n\n        this._links = rsp.links || null;\n        this.totalResults = rsp.total_results;\n\n        if (options.fetchingAll) {\n            this.hasPrev = false;\n            this.hasNext = false;\n            this.currentPage = 0;\n        } else {\n            this.totalResults = rsp.total_results;\n            this.hasPrev = (this._links !== null &&\n                            this._links.prev !== undefined);\n            this.hasNext = (this._links !== null &&\n                            this._links.next !== undefined);\n            this.currentPage = options.page;\n        }\n\n        return rsp[listKey];\n    },\n\n    /**\n     * Fetch models from the list.\n     *\n     * By default, this will replace the list of models in this collection.\n     * That can be changed by providing `reset: false` in options.\n     *\n     * The first page of resources will be fetched unless options.start is\n     * set. The value is the start position for the number of objects, not\n     * pages.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     *\n     * Option Args:\n     *     start (string):\n     *         The start position to use when fetching paginated results.\n     *\n     *     maxResults (number):\n     *         The number of results to return.\n     *\n     *     reset (boolean):\n     *         Whether the collection should be reset with the newly-fetched\n     *         items, or those items should be appended to the collection.\n     *\n     *     data (object):\n     *         Data to pass to the API request.\n     *\n     *     success (function):\n     *         Callback to be called when the fetch is successful.\n     *\n     *     error (function):\n     *         Callback to be called when the fetch fails.\n     *\n     *     complete (function):\n     *         Callback to be called after either success or error.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the fetch was successfully initiated.\n     */\n    fetch(options={}, context=undefined) {\n        const data = _.extend({}, options.data);\n\n        if (options.start !== undefined) {\n            data.start = options.start;\n        }\n\n        /*\n         * There's a couple different ways that the max number of results\n         * can be specified. We'll want to support them all.\n         *\n         * If a value is passed in extraQueryData, it takes precedence.\n         * We'll just set it further down. Otherwise, options.maxResults\n         * will be used if passed, falling back on the maxResults passed\n         * during collection construction.\n         */\n        if (!this.extraQueryData ||\n            this.extraQueryData['max-results'] === undefined) {\n            if (options.maxResults !== undefined) {\n                data['max-results'] = options.maxResults;\n            } else if (this.maxResults) {\n                data['max-results'] = this.maxResults;\n            }\n        }\n\n        if (options.reset === undefined) {\n            options.reset = true;\n        }\n\n        /*\n         * Versions of Backbone prior to 1.1 won't respect the reset option,\n         * instead requiring we use 'remove'. Support this for compatibility,\n         * until we move to Backbone 1.1.\n         */\n        options.remove = options.reset;\n\n        const expandedFields = this.model.prototype.expandedFields;\n        if (expandedFields.length > 0) {\n            data.expand = expandedFields.join(',');\n        }\n\n        if (this.extraQueryData) {\n            _.defaults(data, this.extraQueryData);\n        }\n\n        options.data = data;\n\n        if (this.parentResource) {\n            this.parentResource.ready({\n                ready: () => RB.BaseCollection.prototype.fetch.call(\n                    this, options, context),\n                error: _.isFunction(options.error)\n                       ? options.error.bind(context)\n                       : undefined\n            }, this);\n\n            return true;\n        } else {\n            return RB.BaseCollection.prototype.fetch.call(this, options,\n                                                          context);\n        }\n    },\n\n    /**\n     * Fetch the previous batch of models from the resource list.\n     *\n     * This requires hasPrev to be true, from a prior fetch.\n     *\n     * The collection's list of models will be replaced with the new list\n     * after the fetch succeeds. Each time fetchPrev is called, the collection\n     * will consist only of that page's batch of models. This can be overridden\n     * by providing `reset: false` in options.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    fetchPrev(options={}, context=undefined) {\n        if (!this.hasPrev) {\n            return false;\n        }\n\n        this._fetchURL = this._links.prev.href;\n\n        return this.fetch(\n            _.defaults({\n                page: this.currentPage - 1\n            }, options),\n            context);\n    },\n\n    /**\n     * Fetch the next batch of models from the resource list.\n     *\n     * This requires hasNext to be true, from a prior fetch.\n     *\n     * The collection's list of models will be replaced with the new list\n     * after the fetch succeeds. Each time fetchNext is called, the collection\n     * will consist only of that page's batch of models. This can be overridden\n     * by providing `reset: false` in options.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    fetchNext(options={}, context=undefined) {\n        if (!this.hasNext && options.enforceHasNext !== false) {\n            return false;\n        }\n\n        this._fetchURL = this._links.next.href;\n\n        return this.fetch(\n            _.defaults({\n                page: this.currentPage + 1\n            }, options),\n            context);\n    },\n\n    /**\n     * Fetch all models from the resource list.\n     *\n     * This will fetch all the models from a resource list on a server,\n     * paginating automatically until all models are fetched. The result is\n     * a list of models on the server.\n     *\n     * This differs from fetch/fetchPrev/fetchNext, which will replace the\n     * collection each time a page of resources are loaded.\n     *\n     * This can end up slowing down the server. Use it carefully.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     */\n    fetchAll(options={}, context=undefined) {\n        options = _.bindCallbacks(options, context);\n\n        const fetchOptions = _.defaults({\n            reset: false,\n            fetchingAll: true,\n            enforceHasNext: false,\n            maxResults: 50,\n            success: () => {\n                if (this._links.next) {\n                    this._fetchURL = this._links.next.href;\n                    this.fetchNext(fetchOptions, this);\n                } else if (_.isFunction(options.success)) {\n                    options.success(this, this.models, options);\n                }\n            }\n        }, options);\n\n        this._fetchURL = null;\n\n        this.reset();\n\n        return this.fetch(fetchOptions, this);\n    },\n\n    /**\n     * Prepare the model for the collection.\n     *\n     * This overrides Collection's _prepareModel to ensure that the resource\n     * has the proper parentObject set.\n     *\n     * Returns:\n     *     Backbone.Model:\n     *     The new model.\n     */\n    _prepareModel() {\n        const model = RB.BaseCollection.prototype._prepareModel.apply(this, arguments);\n\n        model.set('parentObject', this.parentResource);\n\n        return model;\n    }\n});\n"],"mappings":"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"}