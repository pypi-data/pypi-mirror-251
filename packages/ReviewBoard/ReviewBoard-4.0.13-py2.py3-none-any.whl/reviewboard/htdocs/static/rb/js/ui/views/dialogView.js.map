{"version":3,"file":"dialogView.js","names":["RB","DialogView","Backbone","View","extend","title","body","buttons","defaultOptions","events","initialize","options","arguments","length","undefined","visible","render","show","_","result","$el","append","_makeButtons","modalBox","defaults","$buttonsList","destroy","closest","on","_onDialogKeyDown","bind","hide","data","remove","_super","call","$buttonsMap","map","buttonInfo","$button","$","val","label","attr","id","class","addClass","disabled","primary","_$primaryButton","danger","onClick","isFunction","click","_onFormSubmit","e","target","preventDefault","stopPropagation","which","ui","keyCode","ESCAPE"],"sources":["dialogView.es6.js"],"sourcesContent":["/**\n * Displays a modal dialog box with content and buttons.\n *\n * The dialog box can have a title and a list of buttons. It can be shown\n * or hidden on demand.\n *\n * This view can either be subclassed (with the contents in render() being\n * used to populate the dialog), or it can be tied to an element that already\n * contains content.\n *\n * Under the hood, this is a wrapper around $.modalBox.\n *\n * Subclasses of DialogView can specify a default title, list of buttons,\n * and default options for modalBox. The title and buttons can be overridden\n * when constructing the view by passing them as options.\n */\nRB.DialogView = Backbone.View.extend({\n    /** The default title to show for the dialog. */\n    title: null,\n\n    /** The default body to show in the dialog. */\n    body: null,\n\n    /** The default list of buttons to show for the dialog. */\n    buttons: [],\n\n    /** Default options to pass to $.modalBox(). */\n    defaultOptions: {},\n\n    /** Events handled by the view. */\n    events: {\n        'submit form': '_onFormSubmit',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * The available options are 'title' and 'buttons'.\n     *\n     * options.title specifies the title shown on the dialog, overriding\n     * the title on the class.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     body (string or function, optional):\n     *         The body to show in the dialog.\n     *\n     *     buttons (Array of object):\n     *         A list of buttons. Each button may have the following keys:\n     *\n     *         danger (boolean, optional):\n     *             Whether the button performs a dangerous operation (such as\n     *             deleting user data).\n     *\n     *         disabled (boolean, optional):\n     *             Whether the button is disabled.\n     *\n     *         id (string, required):\n     *             The ID for the button.\n     *\n     *         label (string, required):\n     *             The label for the button.\n     *\n     *         onClick (function or string, optional):\n     *             The handler to invoke when the button is clicked. If set to\n     *             a function, that function will be called. If set to a\n     *             string, it will resolve to a function with that name on the\n     *             DialogView instance. If unset, the dialog will simply close\n     *             without invoking any actions.\n     *\n     *             The callback function can return ``false`` to prevent the\n     *             dialog from being closed.\n     *\n     *         primary (boolean, optional):\n     *             Whether the button is the primary action for the dialog.\n     *\n     *     title (string):\n     *         The title for the dialog.\n     */\n    initialize(options={}) {\n        this.options = options;\n\n        if (options.title) {\n            this.title = options.title;\n        }\n\n        if (options.body) {\n            this.body = options.body;\n        }\n\n        if (options.buttons) {\n            this.buttons = options.buttons;\n        }\n\n        this.visible = false;\n    },\n\n    /**\n     * Render the content of the dialog.\n     *\n     * By default, this does nothing. Subclasses can override to render\n     * custom content.\n     *\n     * Note that this will be called every time the dialog is shown, not just\n     * when it's first constructed.\n     *\n     * Returns:\n     *     RB.DialogView:\n     *     This object, for chaining.\n     */\n    render() {\n        return this;\n    },\n\n    /**\n     * Show the dialog.\n     */\n    show() {\n        if (!this.visible) {\n            const body = _.result(this, 'body');\n\n            if (body) {\n                this.$el.append(body);\n            }\n\n            this._makeButtons();\n            this.render();\n\n            this.$el.modalBox(_.defaults({\n                title: _.result(this, 'title'),\n                buttons: this.$buttonsList,\n                destroy: () => this.visible = false,\n            }, this.options, this.defaultOptions));\n\n            this.$el.closest('.modalbox-inner')\n                .on('keydown', this._onDialogKeyDown.bind(this));\n\n            this.visible = true;\n        }\n    },\n\n    /**\n     * Hide the dialog.\n     */\n    hide() {\n        if (this.visible) {\n            /*\n             * The jQuery-UI widget can self-destruct in some cases depending\n             * on how events bubble. If that's the case, we skip an extra\n             * destroy call because otherwise we get errors on the console.\n             */\n            if (this.$el.data('uiModalBox')) {\n                this.$el.modalBox('destroy');\n            }\n\n            this.visible = false;\n        }\n    },\n\n    /**\n     * Remove the dialog from the DOM.\n     */\n    remove() {\n        this.hide();\n\n        _super(this).remove.call(this);\n    },\n\n    /**\n     * Return a list of button elements for rendering.\n     *\n     * This will take the button list that was provided when constructing\n     * the dialog and turn each into an element. The elements are also saved to\n     * a map to allow child components to access the buttons.\n     *\n     * Returns:\n     *     Array of jQuery:\n     *     An array of button elements.\n     */\n    _makeButtons() {\n        this.$buttonsMap = {};\n        this.$buttonsList = this.buttons.map(buttonInfo => {\n            const $button = $('<input type=\"button\" />')\n                .val(buttonInfo.label)\n                .attr('id', buttonInfo.id);\n\n            if (buttonInfo.class) {\n                $button.addClass(buttonInfo.class);\n            }\n\n            if (buttonInfo.disabled) {\n                $button.attr('disabled', true);\n            }\n\n            if (buttonInfo.primary) {\n                $button.addClass('primary');\n                this._$primaryButton = $button;\n            }\n\n            if (buttonInfo.danger) {\n                $button.addClass('danger');\n            }\n\n            if (buttonInfo.onClick) {\n                if (_.isFunction(buttonInfo.onClick)) {\n                    $button.click(buttonInfo.onClick);\n                } else {\n                    $button.click(this[buttonInfo.onClick].bind(this));\n                }\n            }\n\n            this.$buttonsMap[buttonInfo.id] = $button;\n\n            return $button;\n        });\n    },\n\n    /**\n     * Handle form submission events for the dialog.\n     *\n     * This will trigger the primary button if the form in the dialog does not\n     * have an explicit action.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onFormSubmit(e) {\n        if (!$(e.target).attr('action')) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (this._$primaryButton) {\n                this._$primaryButton[0].click();\n            }\n        }\n    },\n\n    /**\n     * Handle keydown events for the dialog.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onDialogKeyDown(e) {\n        if (e.which === $.ui.keyCode.ESCAPE) {\n            e.stopPropagation();\n            e.preventDefault();\n\n            this.hide();\n        }\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,UAAU,GAAGC,QAAQ,CAACC,IAAI,CAACC,MAAM,CAAC;EACjC;EACAC,KAAK,EAAE,IAAI;EAEX;EACAC,IAAI,EAAE,IAAI;EAEV;EACAC,OAAO,EAAE,EAAE;EAEX;EACAC,cAAc,EAAE,CAAC,CAAC;EAElB;EACAC,MAAM,EAAE;IACJ,aAAa,EAAE;EACnB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAAA,EAAa;IAAA,IAAZC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,CAAC,CAAC;IACjB,IAAI,CAACD,OAAO,GAAGA,OAAO;IAEtB,IAAIA,OAAO,CAACN,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,GAAGM,OAAO,CAACN,KAAK;IAC9B;IAEA,IAAIM,OAAO,CAACL,IAAI,EAAE;MACd,IAAI,CAACA,IAAI,GAAGK,OAAO,CAACL,IAAI;IAC5B;IAEA,IAAIK,OAAO,CAACJ,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGI,OAAO,CAACJ,OAAO;IAClC;IAEA,IAAI,CAACQ,OAAO,GAAG,KAAK;EACxB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI;EACf,CAAC;EAED;AACJ;AACA;EACIC,IAAIA,CAAA,EAAG;IACH,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MACf,MAAMT,IAAI,GAAGY,CAAC,CAACC,MAAM,CAAC,IAAI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"}