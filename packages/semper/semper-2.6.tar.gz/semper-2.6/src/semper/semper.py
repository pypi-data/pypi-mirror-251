import os.path

from PIL import Image

file_path = os.path.realpath(__file__)

path1 = file_path.replace('\\','/')[:-10] + '/files'

class q1:
    def files(destdir):
        

        files = [ f for f in os.listdir(destdir) if os.path.isfile(os.path.join(destdir,f)) ]

        print(files)

    def pictures(number, search=-1):#, w=200, h=300):
        path = 'q1_1'
        sklad = {0:["""
import numpy as np
def rrstr(x,n): # округление до n знаков после запятой
    fmt = '{:.'+str(n)+'f}'
    return fmt.format(x).replace('.',',')

import numpy as np
import pandas as pd
import scipy.integrate as integrate
import warnings
from scipy.stats import *
# import scipy.stats as sts

def convert(s):
    s = s.replace(',', '.').replace(';', ',')
    data = map(float, s.split(','))
    return list(data)

Z = norm()

def Phi0(x):
    return Z.cdf(x) - 1 / 2

warnings.filterwarnings("ignore")
        
        
        """,[Image.open(f'{path1}/{path}/1/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/1') if os.path.isfile(os.path.join(f'{path1}/{path}/1', f))]]],
        
        1: ["""Дайте определение случайной величины, которая имеет гамма-распределение Γ(α, λ), и выведите основные свойства гамма-расределения. Запишите формулы для математичсекого ожидания E(X) и дисперсии Var(X) гамма-распределения.
                    """, 
                    [Image.open(f'{path1}/{path}/1/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/1') if os.path.isfile(os.path.join(f'{path1}/{path}/1', f))]]],
                    2: ["""Дайте определение случайной величины, которая имеет χ2 -распределение с n степенями свободы. Запишите плотность χ 2 - распределения. Выведите формулы для математического ожидания E(X) и дисперсии Var(X) χ 2 -распределение с n степенями свободы. Найдите а) P(χ2_20 > 10.9), где χ2_20 – случайная величина, которая имеет χ2– распределение с 20 степенями свободы; б) найдите 93% (верхнюю) точку χ 2 0.93(5) хи-квадрат распределения с 5 степенями свободы. Ответ: P(χ2_20 > 10.9) = 0.948775; χ2_0.93(5) = 1.34721.
Код:

from scipy.stats import chi2
# Заданные параметры
df_20 = 20  # Степени свободы для хи-квадрат распределения
x_value = 10.9  # Значение для расчета вероятности
# Расчет вероятности P(χ2_20 > 10.9)
p_chi2_20 = 1 - chi2.cdf(x_value, df_20)
p_chi2_20

# Заданные параметры для нахождения 93% точки хи-квадрат распределения
df_5 = 5  # Степени свободы
p_value = 0.93  # Значение вероятности
# Нахождение 93% точки
chi2_93_percentile = chi2.ppf(p_value, df_5)
chi2_93_percentile
                        
                        """,
                    [Image.open(f'{path1}/{path}/2/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/2') if os.path.isfile(os.path.join(f'{path1}/{path}/2', f))]]],
                 3: ["""Дайте определение случайной величины, которая имеет распределение Стьюдента с n степенями свободы Как связаны распределение Коши и распределение Стьюдента? Запишите плотность распределения Стьюдента с четырьмя степенями свободы. Найдите а) P(−2.5 <= t5 < −1.7), где t5 – случайная величина, которая имеет распределение Стьюдента с 5 степенями свободы; б) найдите 10% (верхнюю) точку t0.1(7) распределения Стьюдента 7 степенями свободы. Ответ: а) P(−2.5 <= t5 < −1.7) = 0.0476933; t0.1(7) = 1.41492.  
                код:ф
                p = t.cdf(-1.7, 5) - t.cdf(-2.5, 5)
                round(p, 7)
                t_a = t.isf(0.1, 7)
                round(t_a,5)""", 
                    [Image.open(f'{path1}/{path}/3/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/3') if os.path.isfile(os.path.join(f'{path1}/{path}/3', f))]]],
                    4: ["""Дайте определение случайной величины, которая имеет распределение Фишера F (n, m) с n и m степенями свободы. Запишите плотность распределения Фишера F (n, m) с n и m степенями свободы. Какой закон распределения имеет случайная величина 1/F, если случайная величина F имеет распределение Фишера F (n, m) с n и m степенями свободы? Ответ необходимо обосновать. Найдите а) P(3.1 <= 1/F < 10.7), где F – случайная величина, которая имеет распределение Фишера с 3 и 5 F степенями свободы, F ∼ F (3; 5); б) найдите 5% (верхнюю) точку F0.05(13; 4) распределения Фишера с 13 и 4 степенями свободы. Ответ: P(3.1 <= 1/F < 10.7) = 0.150742; F0.05(13; 4) = 5.89114. код
import scipy.stats as stats
# Задача а)
# Распределение Фишера F(3, 5)
n, m = 3, 5
lower_bound = 10.7
upper_bound = 3.1

probability_a = stats.f.cdf(lower_bound, m, n) - stats.f.cdf(upper_bound, m, n)
print("a) P(3.1 < 1/F < 10.7) =", probability_a)

# Задача б)
# 5% (верхнюю) точку F0.05(13, 4)
alpha = 0.05
upper_quantile = stats.f.ppf(1 - alpha, 13, 4)
print("b) 5% верхняя точка F(13, 4) =", upper_quantile)
""", 
                    [Image.open(f'{path1}/{path}/4/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/4') if os.path.isfile(os.path.join(f'{path1}/{path}/4', f))]]],
                    5: ["""Дайте определения процентной точки и квантили. Укажите связь между процентными точками и квантилями. Сформулируте основные свойтсва процентных точек. Выведите формулу для нахождения процентной точки стандартного нормального закона распределения через функцию Лапласа Φ0(x). Найдите P(0.3 < Z2 < 3.7), если случайная величина Z имеет стандартное нормальное распределение, Z ∼ N(0; 1). """, 
                    [Image.open(f'{path1}/{path}/5/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/5') if os.path.isfile(os.path.join(f'{path1}/{path}/5', f))]]],
                   6: ["""Сформулируйте определение случайной выборки из конечной генеральной совокупности. Какие виды выборок вам известны? Перечислите (с указанием формул) основные характеристики выборочной и генеральной совокупностей. """, 
                    [Image.open(f'{path1}/{path}/6/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/6') if os.path.isfile(os.path.join(f'{path1}/{path}/6', f))]]],
                    7: ["""Сформулируйте определение случайной выборки из распределения. Как в этом случае определяются: выборочное среднее, начальные и центральные моменты выборки, функция распределения выборки? Что в данном контексте означает генеральное среднее? """, 
                    [Image.open(f'{path1}/{path}/7/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/7') if os.path.isfile(os.path.join(f'{path1}/{path}/7', f))]]],
                    8: ["""запишите формулы для математического ожидания и дисперсии выборочной доли в случае повторной (бесповторной) выборки. Поясните все используемые обозначения """, 
                    [Image.open(f'{path1}/{path}/8/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/8') if os.path.isfile(os.path.join(f'{path1}/{path}/8', f))]]],
                    9: ["""Сформулируйте определение выборочной функции распределения и докажите ее сходимость по вероятности к теоретической функции распределения. Выведите формулы для математического ожидания и дисперсии выборочной функции распределения. """, 
                    [Image.open(f'{path1}/{path}/9/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/9') if os.path.isfile(os.path.join(f'{path1}/{path}/9', f))]]],
                    10: ["""Дайте определение k-ой порядковой статистики. Выведение формулы для функций распределений экстремальных статистик. """, 
                    [Image.open(f'{path1}/{path}/10/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/10') if os.path.isfile(os.path.join(f'{path1}/{path}/10', f))]]],
                    11: ["""Что такое точечная статистическая оценка? Какие оценки называются несмещенными, состоятельными? Приведите пример оценки с минимальной дисперсией. """, 
                    [Image.open(f'{path1}/{path}/11/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/11') if os.path.isfile(os.path.join(f'{path1}/{path}/11', f))]]],
                    12: ["""Сформулируйте и докажите достаточное условие состоятельности оценки. """, 
                    [Image.open(f'{path1}/{path}/12/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/12') if os.path.isfile(os.path.join(f'{path1}/{path}/12', f))]]],
                    13: ["""Сформулируйте определение среднеквадратичной ошибки оценки. Какая оценка называется оптимальной? В чем заключается среднеквадратический подход к сравнению оценок? """, 
                    [Image.open(f'{path1}/{path}/13/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/13') if os.path.isfile(os.path.join(f'{path1}/{path}/13', f))]]],
                    14: ["""Сформулируйте критерий оптимальности оценки, основанный на неравенстве Рао-Крамера. """, 
                    [Image.open(f'{path1}/{path}/14/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/14') if os.path.isfile(os.path.join(f'{path1}/{path}/14', f))]]],
                    15: ["""Дайте определение информации по Фишеру и сформулируйте информационное неравенство Рао-Крамера. """, 
                    [Image.open(f'{path1}/{path}/15/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/15') if os.path.isfile(os.path.join(f'{path1}/{path}/15', f))]]],
                    16: ["""Сформулируйте определение эффективной оценки по Рао-Крамеру. Найдите эффективную оценку параметра для распределения Бернулли Bin(1,theta). """, 
                    [Image.open(f'{path1}/{path}/16/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/16') if os.path.isfile(os.path.join(f'{path1}/{path}/16', f))]]],
                    17: ["""Докажите несмещенность, состоятельность и эффективность (в классе всех линейных несмещенных оценок) выборочного среднего \bar X """, 
                    [Image.open(f'{path1}/{path}/17/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/17') if os.path.isfile(os.path.join(f'{path1}/{path}/17', f))]]],
                    18: ["""Сформулируйте определение эффективной оценки по Рао–Крамеру. Для распределения Пуассона П(lambda) предлагается оценка параметра lambda: \hat lambda = \bar X. Покажите, что эта оценка является эффективной по Рао-Крамеру. """, 
                    [Image.open(f'{path1}/{path}/18/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/18') if os.path.isfile(os.path.join(f'{path1}/{path}/18', f))]]],
                    19: ["""Сформулируйте информационное неравенство Рао–Крамера. Исследуйте на эффективность оценку \hat p = \bar X/m для биномиального распределения Bin(m;p). """, 
                    [Image.open(f'{path1}/{path}/19/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/19') if os.path.isfile(os.path.join(f'{path1}/{path}/19', f))]]],
                    20: ["""Дайте определение информации по Фишеру. Вычислите информацию Фишера для нормального закона распределения N(mu,sigma^2) (дисперсия sigma^2 известна) и проверьте, что выборочное среднее \bar X является эффективной оценкой параметра mu = E(X). """, 
                    [Image.open(f'{path1}/{path}/20/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/20') if os.path.isfile(os.path.join(f'{path1}/{path}/20', f))]]],
                    21: ["""Как производится оценка параметров абсолютно непрерывного распределения методом максимального правдоподобия? Какой вероятностный смысл в этом случае имеет функция правдоподобия? Найдите методом максимального правдоподобия оценку параметра theta равномерного распределения U([theta;theta+5]). """, 
                    [Image.open(f'{path1}/{path}/21/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/21') if os.path.isfile(os.path.join(f'{path1}/{path}/21', f))]]],
                    22: ["""Как производится оценка параметров распределения методом моментов? Найдите методом моментов оценку параметра theta равномерного распределения U([-theta;theta]). """, 
                    [Image.open(f'{path1}/{path}/22/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/22') if os.path.isfile(os.path.join(f'{path1}/{path}/22', f))]]],
                    23: ["""Сформулируйте определение доверительной оценки параметра с коэффициентом доверия gamma. Какой интервал называется асимптотически доверительным. Что такое точность доверительной оценки? """, 
                    [Image.open(f'{path1}/{path}/23/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/23') if os.path.isfile(os.path.join(f'{path1}/{path}/23', f))]]],
                    24: ["""Приведите формулы (с выводом) доверительного точного интервала для параметра сдвига theta = mu нормальной модели N(mu,sigma^2) , когда параметр масштаба sigma^2 известен. Является ли такой интервал симметричным по вероятности? Ответ обосновать. """, 
                    [Image.open(f'{path1}/{path}/24/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/24') if os.path.isfile(os.path.join(f'{path1}/{path}/24', f))]]],
                    25: ["""Приведите формулы (с выводом) доверительного точного интервала для параметра масштаба theta = sigma^2 нормальной модели N(mu,sigma^2), когда значение параметра сдвига известно. Является ли такой интервал симметричным по вероятности? Ответ обосновать. """, 
                    [Image.open(f'{path1}/{path}/25/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/25') if os.path.isfile(os.path.join(f'{path1}/{path}/25', f))]]],
                    26: ["""Приведите формулы (с выводом) доверительного точного интервала для параметра сдвига theta = mu нормальной модели N(mu,sigma^2) , когда параметр масштаба sigma^2 неизвестен. Является ли такой интервал симметричным по вероятности? Ответ обосновать. """, 
                    [Image.open(f'{path1}/{path}/26/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/26') if os.path.isfile(os.path.join(f'{path1}/{path}/26', f))]]],
                    27: ["""Приведите формулы (с выводом) доверительного точного интервала для параметра масштаба theta = sigma^2 нормальной модели N(mu,sigma^2) , когда значение параметра сдвига неизвестно. Является ли такой интервал симметричным по вероятности? Ответ обосновать. """, 
                    [Image.open(f'{path1}/{path}/27/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/27') if os.path.isfile(os.path.join(f'{path1}/{path}/27', f))]]],
                    28: ["""Сформулируйте теорему Фишера. Пусть X1,X2,...,Xn – выборка объема n из N(mu;sigma^2). Найдите 1) Cov(Xi-\bar X; \bar X) . 2) Cov(Xi - \bar X; Xj - \bar X), i!=j """, 
                    [Image.open(f'{path1}/{path}/28/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/28') if os.path.isfile(os.path.join(f'{path1}/{path}/28', f))]]],
                    29: ["""Приведите формулы (с выводом) доверительного точного интервала предсказания для X_n+1 по выборке  X1,X2,...,Xn из нормальной модели N(mu,sigma^2), когда оба параметр mu и sigma^2 – неизвестны. Является ли такой интервал симметричным по вероятности? Ответ обосновать. """, 
                    [Image.open(f'{path1}/{path}/29/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/29') if os.path.isfile(os.path.join(f'{path1}/{path}/29', f))]]],
                    30: ["""Дайте определение асимптотического доверительного интервала и приведите формулы (с выводом) асимптотического доверительного интервала для коэффициента корреляции rho по выборке (X1;Y1),...,(Xn;Yn) объема n из двумерной нормальной модели N(mu1;mu2;sigma_1^2;sigma_2^2;rho) Является ли такой интервал симметричным по вероятности? Ответ обосновать.""", 
                    [Image.open(f'{path1}/{path}/30/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/30') if os.path.isfile(os.path.join(f'{path1}/{path}/30', f))]]],
                    31: ["""Дайте определение асимптотического доверительного интервала и приведите формулы (с выводом) асимптотического доверительного интервала для параметра вероятности theta = p. Выведите уравнение доверительного эллипса.""", 
                    [Image.open(f'{path1}/{path}/31/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/31') if os.path.isfile(os.path.join(f'{path1}/{path}/31', f))]]],
                    32: ["""Пусть \vec X_j =  (X1j, X2j,...,Xnjj) –выборка объема nj из N(mu_j;sigma^2), где j = 1,...,k . Приведите формулы (с выводом) доверительного интервала для параметра sigma^2, используя в качестве несмещенной оценки параметра остаточную дисперсию  1/(n-k) sum(sum((Xij-\bar Xj)^2)). Является ли такой интервал симметричным по вероятности? Ответ обосновать. """, 
                    [Image.open(f'{path1}/{path}/32/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/32') if os.path.isfile(os.path.join(f'{path1}/{path}/32', f))]]],
                    33: ["""Пусть \vec X_j = (X1j, ... , Xnjj) –выборка объема nj из N(mu_j;sigma^2) , где j = 1,...,k . Приведите формулы (с выводом и необходимыми пояснениями в обозначениях) дисперсионного тождества. """, 
                    [Image.open(f'{path1}/{path}/33/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/33') if os.path.isfile(os.path.join(f'{path1}/{path}/33', f))]]],
                    34: ["""Пусть \vec X_j = (X1j, ... , Xnjj) –выборка объема nj из N(mu_j;sigma^2) ,где j = 1,...,k  . Дайте определение факторной дисперсии. Приведите формулу (с выводом и необходимыми пояснениями в обозначениях) математического ожидания факторной дисперсии """, 
                    [Image.open(f'{path1}/{path}/34/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/34') if os.path.isfile(os.path.join(f'{path1}/{path}/34', f))]]],
                    
                 }
        if number == -1:
            numbers = []
            for i, j in sklad.items():
                if search in j[0]:
                    numbers.append(i)
            return 'есть в этих номерах: ', numbers
        #print(sklad[number][0])
#         new_img = []
#         for a in sklad[number][1]:
#             #while height > 1000:
#             #    width /= 1.5
#             #    height /= 1.5
#             a = a.resize((w, h))
#             new_img.append(a)
        return sklad[number][0], sklad[number][1]


class q2:
    def pictures(number, search=-1, w=200, h=300):
        path = 'q2_1'
        sklad = {2: ["""Приведите вероятностную интерпретацию ошибок первого и второго рода, а также мощности критерия в случае простых нулевой и альтернативной гипотез. Привести пример критерия с выбором критического значения c0, для которого сумма ошибок первого и второго рода α + β была бы минимальной. """,
                     [Image.open(f'{path1}/{path}/2/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/2') if os.path.isfile(os.path.join(f'{path1}/{path}/2', f))]]],
                 4: ["""Сформулируйте лемму Неймана-Пирсона в случае проверки двух простых гипотез. Приведите пример построения наиболее мощного критерия. """,
                     [Image.open(f'{path1}/{path}/4/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/4') if os.path.isfile(os.path.join(f'{path1}/{path}/4', f))]]],
                 6: ["""По выборке X1, X2, . . . , Xn объема n из нормального закона распределения N(μ; σ2), когда σ2 = Var(X) – известна, проверяется на уровне значимости α основная гипотеза H0 : μ = μ0 против аль- тернативной гипотезы H1 : μ < μ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P -значения критерия. """,
                     [Image.open(f'{path1}/{path}/6/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/6') if os.path.isfile(os.path.join(f'{path1}/{path}/6', f))]]],
                 8: ["""По выборке X1, X2, . . . , Xn объема n из нормального закона распределения N(μ; σ2), когда σ2 = Var(X) – неизвестна, проверяется на уровне значимости α основная гипотеза H0 : μ = μ0 против альтернативной гипотезы H1 : μ > μ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P -значения критерия. """,
                     [Image.open(f'{path1}/{path}/8/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/8') if os.path.isfile(os.path.join(f'{path1}/{path}/8', f))]]],
                 10: ["""По выборке X1, X2, . . . , Xn объема n из нормального закона распределения N(μ; σ2), когда σ2 = Var(X) – неизвестна, проверяется на уровне значимости α основная гипотеза H0 : μ = μ0 против альтернативной гипотезы H1 : μ != μ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P -значения критерия. """,
                     [Image.open(f'{path1}/{path}/10/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/10') if os.path.isfile(os.path.join(f'{path1}/{path}/10', f))]]],
                 12: ["""По выборке X1,X2,...,Xn объема n из нормального закона распределения N(μ;σ2),когда μ=E(X) – известно, проверяется на уровне значимости α основная гипотеза H0 : σ = σ0 против альтернативной гипотезы H1 : σ < σ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P -значения критерия. """,
                     [Image.open(f'{path1}/{path}/12/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/12') if os.path.isfile(os.path.join(f'{path1}/{path}/12', f))]]],
                 14: ["""По выборке X1,X2,...,Xn объема n из нормального закона распределения N(μ;σ2),когда μ=E(X) – неизвестно, проверяется на уровне значимости α основная гипотеза H0 : σ = σ0 против альтернативной гипотезы H1 : σ > σ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P -значения критерия.""",
                     [Image.open(f'{path1}/{path}/14/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/14') if os.path.isfile(os.path.join(f'{path1}/{path}/14', f))]]],
                 16: ["""По выборке X1,X2,...,Xn объема n из нормального закона распределения N(μ;σ2),когда μ=E(X) – неизвестно, проверяется на уровне значимости α основная гипотеза H0 : σ = σ0 против альтернативной гипотезы H1 : σ != σ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P -значения критерия. """,
                     [Image.open(f'{path1}/{path}/16/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/16') if os.path.isfile(os.path.join(f'{path1}/{path}/16', f))]]],
                 18: ["""По двум независимым выборкам X1,X2,...,Xn объема n из N(μX;σX2 ) и Y1,Y2,...,Ym объема m из N(μY ;σY2 ), когда σX2 = Var(X) и σY2 = Var(Y) – известны, проверяется на уровне значимости α основная гипотеза H0 : μX = μY против альтернативной гипотезы H1 : μX != μY . 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P -значения критерия. """,
                     [Image.open(f'{path1}/{path}/18/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/18') if os.path.isfile(os.path.join(f'{path1}/{path}/18', f))]]],
                 20: ["""По двум независимым выборкам X1,X2,...,Xn объема n из N(μX;σX2 ) и Y1,Y2,...,Ym объема m из N(μY ;σY2 ) c неизвестными, но равными дисперсиями σX2 = σY2 = σ2, проверяется на уровне значимости α основная гипотеза H0 : μX = μY против альтернативной гипотезы H1 : μX != μY . 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P -значения критерия. """,
                     [Image.open(f'{path1}/{path}/20/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/20') if os.path.isfile(os.path.join(f'{path1}/{path}/20', f))]]],
                 22: ["""По двум независимым выборкам X1,X2,...,Xn объема n из N(μX;σX2 ) и Y1,Y2,...,Ym объема m из N (μY ; σY2 ) проверяется на уровне значимости α основная гипотеза H0 : σX2 = σY2 против альтерна- тивной гипотезы H1 : σX2 > σY2 . 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P -значения критерия. """,
                     [Image.open(f'{path1}/{path}/22/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/22') if os.path.isfile(os.path.join(f'{path1}/{path}/22', f))]]],
                 24: ["""По двум независимым выборкам X1,X2,...,Xn объема n из N(μX;σX2 ) и Y1,Y2,...,Ym объема m из N(μY ;σY2 ) c неизвестными, но равными дисперсиями σX2 = σY2 = σ2, проверяется на уровне значимости α основная гипотеза H0 : μX = μY против альтернативной гипотезы H1 : μX != μY . 1) Приведите необходимую статистику F – критерия однофакторного дисперсионного анализа и критическое множество для проверки H0 против H1. 2) Приведите (с выводом и необходимыми пояснениями в обозначениях) обоснование равенства процентных точек fα(1; n + m − 2) распределения Фишера и t^2α/2 (n + m − 2) распределения Стьюдента с n + m − 2 свободы. """,
                     [Image.open(f'{path1}/{path}/24/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/24') if os.path.isfile(os.path.join(f'{path1}/{path}/24', f))]]],
                 1: [""" Опишите общую схему проверки статистических гипотез. Определите понятия: критическая область, уровень значимости, мощность критерия. Какие гипотезы называются простыми (сложными)?""", 
                    [Image.open(f'{path1}/{path}/1/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/1') if os.path.isfile(os.path.join(f'{path1}/{path}/1', f))]]],
                 3: [""" Дайте определение несмещенности и состоятельности критерия. Пусть мощность критерия определяется выражением W(µ) = 1/2 − Φ0 (zα − √ n/σ*(µ − µ0))  , µ ∈ Θ1 = (µ0; +∞). Является ли критерий с такой функцией мощности несмещенным и состоятельным? Ответ обосновать""",
                     [Image.open(f'{path1}/{path}/3/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/3') if os.path.isfile(os.path.join(f'{path1}/{path}/3', f))]]],
                 5: ["""По выборке X1, X2, . . . , Xn объема n из нормального закона распределения N(µ; σ 2 ), когда σ 2 = Var(X) – известна, проверяется на уровне значимости α основная гипотеза H0 : µ = µ0 против альтернативной гипотезы H1 : µ > µ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P-значения критерия.""",
                     [Image.open(f'{path1}/{path}/5/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/5') if os.path.isfile(os.path.join(f'{path1}/{path}/5', f))]]],
                 7: ["""По выборке X1, X2, . . . , Xn объема n из нормального закона распределения N(µ; σ 2 ), когда σ 2 = Var(X) – известна, проверяется на уровне значимости α основная гипотеза H0 : µ = µ0 против альтернативной гипотезы H1 : µ != µ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P-значения критерия.""",
                     [Image.open(f'{path1}/{path}/7/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/7') if os.path.isfile(os.path.join(f'{path1}/{path}/7', f))]]],
                 9: ["""По выборке X1, X2, . . . , Xn объема n из нормального закона распределения N(µ; σ 2 ), когда σ 2 = Var(X) – неизвестна, проверяется на уровне значимости α основная гипотеза H0 : µ = µ0 против альтернативной гипотезы H1 : µ < µ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P-значения критерия.""",
                     [Image.open(f'{path1}/{path}/9/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/9') if os.path.isfile(os.path.join(f'{path1}/{path}/9', f))]]],
                 11: ["""По выборке X1, X2, . . . , Xn объема n из нормального закона распределения N(µ; σ 2 ), когда µ = E(X) – известно, проверяется на уровне значимости α основная гипотеза H0 : σ = σ0 против альтернативной гипотезы H1 : σ > σ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P-значения критерия.""",
                     [Image.open(f'{path1}/{path}/11/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/11') if os.path.isfile(os.path.join(f'{path1}/{path}/11', f))]]],
                 13: ["""По выборке X1, X2, . . . , Xn объема n из нормального закона распределения N(µ; σ 2 ), когда µ = E(X) – известно, проверяется на уровне значимости α основная гипотеза H0 : σ = σ0 против альтернативной гипотезы H1 : σ != σ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P-значения критерия.""",
                     [Image.open(f'{path1}/{path}/13/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/13') if os.path.isfile(os.path.join(f'{path1}/{path}/13', f))]]],
                 15: ["""По выборке X1, X2, . . . , Xn объема n из нормального закона распределения N(µ; σ 2 ), когда µ = E(X) – неизвестно, проверяется на уровне значимости α основная гипотеза H0 : σ = σ0 против альтернативной гипотезы H1 : σ < σ0. 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P-значения критерия.""",
                     [Image.open(f'{path1}/{path}/15/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/15') if os.path.isfile(os.path.join(f'{path1}/{path}/15', f))]]],
                 17: ["""По двум независимым выборкам X1, X2, . . . , Xn объема n из N(µ_X; σ 2_X) и Y1, Y2, . . . , Ym объема m из N(µ_Y ; σ 2_Y ), когда σ 2_X = Var(X) и σ 2_Y = Var(Y) – известны, проверяется на уровне значимости α основная гипотеза H0 : µ_X = µ_Y против альтернативной гипотезы H1 : µ_X > µ_Y . 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P-значения критерия. """,
                     [Image.open(f'{path1}/{path}/17/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/17') if os.path.isfile(os.path.join(f'{path1}/{path}/17', f))]]],
                 19: ["""По двум независимым выборкам X1, X2, . . . , Xn объема n из N(µ_X; σ 2_X) и Y1, Y2, . . . , Ym объема m из N(µ_Y ; σ 2_Y ) c неизвестными, но равными дисперсиями σ 2_X = σ 2_Y = σ 2 , проверяется на уровне значимости α основная гипотеза H0 : µ_X = µ_Y против альтернативной гипотезы H1 : µ_X > µ_Y . 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P-значения критерия.""",
                     [Image.open(f'{path1}/{path}/19/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/19') if os.path.isfile(os.path.join(f'{path1}/{path}/19', f))]]],
                 21: ["""По двум независимым выборкам X1, X2, . . . , Xn объема n из N(µ_X; σ 2_X) и Y1, Y2, . . . , Ym объема m из N(µ_Y ; σ 2_Y ) c неизвестными и не равными дисперсиями, проверяется на уровне значимости α основная гипотеза H0 : µ_X = µ_Y против альтернативной гипотезы H1 : µ_X != µ_Y (проблема БеренсаФишера). 1) Приведите статистику критерия Уэлча и критическое множество для проверки H0 против H1. 2) Приведите основное свойство статистики критерия. 3) Приведите (с выводом) выражение для P-значения критерия. """,
                     [Image.open(f'{path1}/{path}/21/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/21') if os.path.isfile(os.path.join(f'{path1}/{path}/21', f))]]],
                 23: ["""По двум независимым выборкам X1, X2, . . . , Xn объема n из N(µ_X; σ 2_X) и Y1, Y2, . . . , Ym объема m из N(µ_Y ; σ 2_Y ) проверяется на уровне значимости α основная гипотеза H0 : σ 2_X = σ 2_Y против альтернативной гипотезы H1 : σ 2_X != σ 2_Y . 1) Приведите необходимую статистику критерия и критическое множество для проверки H0 против H1. 2) Приведите (с доказательством) основные свойства критерия. 3) Приведите (с выводом) выражение для P-значения критерия. """,
                     [Image.open(f'{path1}/{path}/23/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/23') if os.path.isfile(os.path.join(f'{path1}/{path}/23', f))]]],
                }

        if number == -1:
            numbers = []
            for i, j in sklad.items():
                if search in j[0]:
                    numbers.append(i)
            return 'есть в этих номерах: ', numbers
        #print(sklad[number][0])
        new_img = []
        for a in sklad[number][1]:
            #while height > 1000:
            #    width /= 1.5
            #    height /= 1.5
            a = a.resize((w, h))
            new_img.append(a)
        return sklad[number][0], sklad[number][1]


class q3:
    def pictures(number, search=-1):#, w=200, h=300):
        path = 'q3_1'
        sklad = {1: ["""Пусть X1, X2, . . . , X6 – выборка из равномерного распределения на отрезке [5; 8], F^(x) – соответствующая выборочная функция распределения. Найдите: а) вероятность P(F^(6) = F^(8)); б) вероятность P(Fˆ(7) = 1/2)
        """, 
                    [Image.open(f'{path1}/{path}/1/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/1') if os.path.isfile(os.path.join(f'{path1}/{path}/1', f))]]],
                 2: ["""Имеется выборка X1, X2, . . . , Xn объема n из генеральной совокупности с функцией распределения F(x). Найдите функции распределения экстремальных статистик X_(1) и X_(n)""",
                     [Image.open(f'{path1}/{path}/2/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/2') if os.path.isfile(os.path.join(f'{path1}/{path}/2', f))]]],
                 3: ["""Пусть X и Y – две независимые несмещенные оценки параметра θ с дисперсиями σ^2 и 4σ^2 соответственно. a) Является ли X^2 несмещенной оценкой параметра θ^2? б) Является ли Z = X · Y несмещенной оценкой параметра θ^2?""",
                     [Image.open(f'{path1}/{path}/3/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/3') if os.path.isfile(os.path.join(f'{path1}/{path}/3', f))]]],
                 4: ["""Пусть θ^ = T(X1, . . . , Xn) оценка параметра θ, а b = (E[θ^] − θ) – смещение. Доказать формулу ∆ = Var(θ^) + b^2 , где ∆ = E[(ˆθ − θ)^2 ] – среднеквадратичная ошибка оценки.""",
                     [Image.open(f'{path1}/{path}/4/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/4') if os.path.isfile(os.path.join(f'{path1}/{path}/4', f))]]],
                 5: ["""Пусть X1, X2 – выборка объема 2 из некоторого распределения с генеральным средним θ = E(X) и дисперсией σ 2 = Var(X). В качестве оценки параметра θ используется оценка вида θb = aX_1+2aX_2. Известно отношение σ^2/θ^2 = 3/5 . Найдите оценку с наименьшей среднеквадратической ошибкой. Является ли эта оценка несмещенной?""",
                     [Image.open(f'{path1}/{path}/5/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/5') if os.path.isfile(os.path.join(f'{path1}/{path}/5', f))]]],
                 6: ["""Пусть X1, X2, . . . , Xn – выборка объема n из распределения L с моментами ν1 = ν1(X) = E(X), µ2 = µ2(X) = σ^2 = Var(X), µk = µk(X) = E[(X − E(X))^k ], k = 3, 4. Покажите, что a) µ3(X) = µ3(X) / n2 ; b) µ4(X) = µ4(X) / n3 + 3(n − 1) / n3 * µ^2_2 (X);""",
                     [Image.open(f'{path1}/{path}/6/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/6') if os.path.isfile(os.path.join(f'{path1}/{path}/6', f))]]],
                 7: ["""Пусть X1, X2, X3 – выборка из генерального распределения с математическим ожиданием µ и дисперсией θ = σ^2 . Рассмотрим две оценки параметра θ: a) θ^_1 = c_1(X_1 − X_2)^2 ; б) θ^_2 = c_2[(X_1 − X_2)^2 + (X_1−X_3)^2+(X_2−X_3)^2 ]. Найдите значения c_1 и c_2 такие, что оценки θ^_1 и θ^_2 являются несмещенными оценками параметра дисперсии σ_2 . """,
                     [Image.open(f'{path1}/{path}/7/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/7') if os.path.isfile(os.path.join(f'{path1}/{path}/7', f))]]],
                 8: ["""Пусть X1, X2, X3, X4 – выборка из N(θ; σ^2 ). Рассмотрим две оценки параметра θ: θ^_1 = (X1+2X2+3X3+4X4)/10 , (X1+4X2+4X3+X4)/10 . a) Покажите, что обе оценки являются несмещенными для параметра θ; б) Какая из этих оценок является оптимальной? """,
                     [Image.open(f'{path1}/{path}/8/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/8') if os.path.isfile(os.path.join(f'{path1}/{path}/8', f))]]],
                 9: ["""Пусть X1, X2, . . . , Xn – выборка из генерального распределения и пусть θ = E(X), σ^2 = Var(X) – математическое ожидание и дисперсия. Рассмотрим следующие оценки параметра θ: θ^_1 = (X1+X2)/2 , θ^_2 = (X1+Xn)/4 + (X2+...+Xn−1) / 2(n−2) , θb3 = X_. а) Будут ли эти оценки несмещенными для параметра θ? б) Какая из них является состоятельной для параметра θ?""",
                     [Image.open(f'{path1}/{path}/9/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/9') if os.path.isfile(os.path.join(f'{path1}/{path}/9', f))]]],
                 10: ["""Пусть X1, X2, . . . , Xn – выборка из равномерного распределения U([0; θ]) c неизвестным параметром θ > 0. Требуется оценить параметр θ. В качестве оценка параметра θ рассматриваются: θ^_1 = 2X, θ^_2 = (n+1) / n * X_(n) . а) Будут ли оценки несмещенными?; б) состоятельными? в) найдите среди них оптимальную. """,
                     [Image.open(f'{path1}/{path}/10/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/10') if os.path.isfile(os.path.join(f'{path1}/{path}/10', f))]]],
                 11: ["""Пусть X1, X2, . . . , Xn – выборка из равномерного распределения U([0; θ]) c неизвестным параметром θ > 0. Требуется оценить параметр θ. В качестве оценка параметра θ рассматриваются: θ^_1 = 2X, θ^_2 = (n+1)X_(1). а) Будут ли оценки несмещенными?; б) Состоятельными? в) Найти среди них оптимальную.""",
                     [Image.open(f'{path1}/{path}/11/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/11') if os.path.isfile(os.path.join(f'{path1}/{path}/11', f))]]],
                 12: ["""Пусть X – случайная величина, которая имеет равномерное распределение на отрезке [0, θ]. Рассмотрим выборку объема 3 и класс оценок вида θ^ = c · X неизвестного параметра θ. Найдите такое c, чтобы: a) оценка θ^– несмещенная; б) оценка θ^– эффективная в рассматриваемом классе.""",
                     [Image.open(f'{path1}/{path}/12/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/12') if os.path.isfile(os.path.join(f'{path1}/{path}/12', f))]]],
                 13: ["""Пусть X1, X2, . . . , Xn – выборка объема n из равномерного закона распределения на отрезке [−θ; θ], где θ > 0 – неизвестный параметр. В качестве оценки параметра θ^2 рассмотрим статистику θ^ = 3/n*(X^2_1 + X^2_2 + . . . + X^2_n)  . Является ли статистика θbнесмещенной оценкой параметра θ^2? Является статистика sqrt(ˆθ) несмещенной оценкой параметра sqrt(θ^2) = θ? Ответ обосновать.""",
                     [Image.open(f'{path1}/{path}/13/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/13') if os.path.isfile(os.path.join(f'{path1}/{path}/13', f))]]],
                 14: ["""Пусть Yk = βxk + εk, k = 1, . . . n, где xk – некоторые константы, а εk – независимые одинаково распределенные случайные величины, εk ∼ N(0; σ^2 ). Является ли оценка β^ = SUM(n,k=1 | Yk)/SUM(n,k=1, xi) несмещенной оценкой параметра β? Ответ обосновать""",
                     [Image.open(f'{path1}/{path}/14/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/14') if os.path.isfile(os.path.join(f'{path1}/{path}/14', f))]]],
                 15: ["""Пусть Yk = βxk + εk, k = 1, . . . n, где xk – некоторые константы, а εk – независимые одинаково распределенные случайные величины, εk ∼ N(0; σ^2 ). Является ли оценка β^ = 1/n*SUM(n,k=1 | Yk/xk)  несмещенной оценкой параметра β? Ответ обосновать""",
                     [Image.open(f'{path1}/{path}/15/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/15') if os.path.isfile(os.path.join(f'{path1}/{path}/15', f))]]],
                 16: ["""В таблице представлены данные по числу сделок на фондовой бирже за квартал для 400 инвесторов: xi 0 1 2 3 4 5 6 7 8 9 10 ni 146 97 73 34 23 10 6 3 3 3 2 В предположении, что случайное число сделок описывается распределением Пуассона, оцените параметр λ методом моментов. Определите вероятность того, что число сделок за квартал будет не менее трех, применяя: а) метод моментов; б) непосредственно по таблице.""",
                     [Image.open(f'{path1}/{path}/16/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/16') if os.path.isfile(os.path.join(f'{path1}/{path}/16', f))]]],
                 17: ["""Пусть случайная величина X равномерно распределена на отрезке [0; 4θ]. Найдите методом моментов оценку для параметра θ. Является ли оценка а) несмещенной; б) состоятельной? Ответ обосновать. """,
                     [Image.open(f'{path1}/{path}/17/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/17') if os.path.isfile(os.path.join(f'{path1}/{path}/17', f))]]],
                 18: ["""Пусть случайная величина X равномерно распределена на отрезке [a; b]. Найти методом моментов оценки для параметров a и b.""",
                     [Image.open(f'{path1}/{path}/18/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/18') if os.path.isfile(os.path.join(f'{path1}/{path}/18', f))]]],
                 19: ["""Случайная величина X (срок службы изделия) имеет распределение, плотность которого задается формулой f(x) = λe^(−λ(x−τ)) , x >= τ , λ > 0. В таблице приведены сгруппированные данные по срокам службы (в часах) для n = 423 изделий: x˜i 4,55 11,55 18,55 25,55 32,55 39,55 46,55 53,55 60,55 ni 219 98 50 25 17 7 2 4 1 Найдите методом моментов точечные оценки неизвестных параметров λ и τ распределения. Используя полученные оценки, оцените время, которое изделие прослужит с вероятностью 90,66%.""",
                     [Image.open(f'{path1}/{path}/19/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/19') if os.path.isfile(os.path.join(f'{path1}/{path}/19', f))]]],
                 20: ["""Известно, что доля возвратов по кредитам в банке имеет распределение F(x) = x^β , 0 <= x <= 1. Наблюдения показали, что в среднем она составляет 78%. Методом моментов оцените параметр β и вероятность того, что она опуститься ниже 67%. """,
                     [Image.open(f'{path1}/{path}/20/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/20') if os.path.isfile(os.path.join(f'{path1}/{path}/20', f))]]],
                 21: ["""Пусть X1, X2, . . . , Xn – выборка объема n из распределения Пуассона с параметром λ: P(X = k) = λ^k*e^(−λ)/k! , k = 0, 1, 2, . . . Найдите методом максимального правдоподобия по выборке x1, x2, . . . , xn точечную оценку неизвестного параметра λ распределения Пуассона. """,
                     [Image.open(f'{path1}/{path}/21/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/21') if os.path.isfile(os.path.join(f'{path1}/{path}/21', f))]]],
                 22: ["""Найдите методом максимального правдоподобия по выборке x1, x2, . . . , xn точечную оценку λ^ неизвестного параметра λ показательного закона распределения, плотность которого f(x) = λe^(−λx), x >= 0.""",
                     [Image.open(f'{path1}/{path}/22/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/22') if os.path.isfile(os.path.join(f'{path1}/{path}/22', f))]]],
                 23: ["""Найдите оценки параметров a и b по методу максимального правдоподобия для равномерного распределения U([a, b]).""",
                     [Image.open(f'{path1}/{path}/23/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/23') if os.path.isfile(os.path.join(f'{path1}/{path}/23', f))]]],
                 24: ["""Пусть X1, X2, . . . , Xn – выборка из дискретного распределения P(X = −1) = θ, P(X = 1) = 4θ, P(X = 2) = 2θ, P(X = 0) = 1 − 7θ, θ ∈ (0; 1/7 ). Найдите оценку параметра θ по методу максимального правдоподобия. Является ли полученная оценка: а) несмещенной; б) состоятельной. Ответ обосновать.""",
                     [Image.open(f'{path1}/{path}/24/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/24') if os.path.isfile(os.path.join(f'{path1}/{path}/24', f))]]],
                 25: ["""Пусть ˆf – оценка числа степеней свободы f вида ˆf = (s^2_X/n + s^2_Y/m)^2/(s^4_X/(n^2(n−1)) + s^4_Y/(m^2(m−1))) . Покажите, что min(n − 1; m − 1)<= ˆf <= n + m − 2. """,
                     [Image.open(f'{path1}/{path}/25/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/25') if os.path.isfile(os.path.join(f'{path1}/{path}/25', f))]]],
                 26: ["""Пусть f_α(1; m) – (верхняя) процентная точка распределения Фишера с 1 и m степенями свободы, t_α/2(m) – (верхняя) процентная точка распределения Стьюдента с m степенями свободы. Покажите, что f_α(1; m) = t^2_α/2(m). """,
                     [Image.open(f'{path1}/{path}/26/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/26') if os.path.isfile(os.path.join(f'{path1}/{path}/26', f))]]],
                 27: ["""Инвестор наблюдает за колебаниями котировок акций компаний A и B в течение 100 торговых дней (по закрытию торгов). В результате наблюдений получена следующая статистика: количество дней, когда обе котировки падали – 26;обе котировки росли – 25; котировки падали, а котировки при этом росли – 29; наоборот, котировки росли, а котировки падали – 20. При 1% -м уровне значимости проверьте гипотезу о равновероятности указанных четырех комбинаций падения и роста.""",
                     [Image.open(f'{path1}/{path}/27/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/27') if os.path.isfile(os.path.join(f'{path1}/{path}/27', f))]]],
                 28: ["""В десятичной записи числа π среди 10 002 первых десятичных знаков после запятой цифры 0; 1; . . . ; 9 встречаются соответственно 968; 1026; 1021; 974; 1012; 1047; 1022; 970; 948; 1014 раз. На 5%-ом уровне значимости проверить гипотезу о равновероятности «случайных» чисел 0; 1; . . . ; 9, т.е. согласуются ли данные с гипотезой H0 : p0 = p1 = . . . p9 = 1/10 ? Найдите P-значение критерия.
                 
Код:
from scipy.stats import chisquare, chi2


# Наблюдаемые частоты
observed_frequencies = [968, 1026, 1021, 974, 1012, 1047, 1022, 970, 948, 1014]


# Ожидаемая частота для каждой цифры
expected_frequency = sum(observed_frequencies) / 10


# Выполнение хи-квадрат теста
chi2_statistic, p_value = chisquare(observed_frequencies, [expected_frequency] * 10)


chi2_statistic, p_value, 'Не отвергаем' if chi2_statistic < chi2(10 - 1).isf(0.05) else 'Отвергаем'""",
                     [Image.open(f'{path1}/{path}/28/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/28') if os.path.isfile(os.path.join(f'{path1}/{path}/28', f))]]],
                 29: ["""Среди 10 000 «случайных чисел» 0, 1, . . . , 9, числа, не превосходящие 4, встретились k = 5089 раз. Проверить на уровне значимости α = 0,1, согласуются ли эти данные с гипотезой H0 о равновероятности чисел. При каком уровне значимости эта гипотеза отвергается. """,
                     [Image.open(f'{path1}/{path}/29/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/29') if os.path.isfile(os.path.join(f'{path1}/{path}/29', f))]]],
                 30: ["""При 8002 независимых испытаний события A, B и C, составляющие полную группу, осуществились 2014, 5008 и 980 раз соответственно. Верна ли на уровне значимости 0,05 гипотеза p(A) = 0,5 − 2θ; p(B) = 0,5 + θ; p(C) = θ (0 < θ < 0, 25)?

Код:
import sympy as sp
theta = sp.symbols('theta')
n = 8002
obs = np.array([2014, 5008, 980])
p_hat = obs / n
p_exp = np.array([0.5 - 2 * theta, 0.5 + theta, theta])
l = 3
alpha = 0.05

#вид уравнения
chif = np.sum(n / p_exp * (p_hat - p_exp) ** 2)
chif

from scipy.optimize import minimize

print(minimize(sp.lambdify(theta, chif), (0.1), method='Nelder-Mead'))
#fun: 0.18320920190988063 - Xф
#             x: [ 1.237e-01] - тета

# граница
chi2a = chi2(l - 1 - 1).isf(alpha)
chi2a
""",
                     [Image.open(f'{path1}/{path}/30/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/30') if os.path.isfile(os.path.join(f'{path1}/{path}/30', f))]]],
                 31: ["""Пусть таблица сопряженности двух признаков имеет вид (Y = y1 Y = y2) (X = x1 X = x2): [[a, b], [c, d]]. Показать, что статистика критерия χ2 Пирсона для проверки гипотезы независимости X и Y можно найти по формуле χ2 = n(ad − bc)^2/((a + b)(a + c)(b + d)(c + d))""",
                     [Image.open(f'{path1}/{path}/31/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/31') if os.path.isfile(os.path.join(f'{path1}/{path}/31', f))]]],
                 32: ["""Число π до 30 знака после запятой имеет вид: 3, 141592653589793238462643383279. Число e до 30 знака после запятой имеет вид: 2, 718281828459045235360287471352. Используя критерий однородности χ2 , проверьте на уровне значимости α = 0,05 гипотезу H0 о том, что последовательности цифр после запятой для обоих чисел принадлежат одной генеральной совокупности.

Код:
import numpy as np
import scipy.stats as sts
pi = '141592653589793238462643383279'
e = '718281828459045235360287471352'
pi_f = np.array([pi.count(str(x)) for x in range(10)])
e_f = np.array([e.count(str(x)) for x in range(10)])
chi2 = 1/30**2 * sum((30*e_f-30*pi_f)**2/(pi_f+e_f))
chi2_crit = sts.chi2.ppf(0.95,9)
""",
                     [Image.open(f'{path1}/{path}/32/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/32') if os.path.isfile(os.path.join(f'{path1}/{path}/32', f))]]],
                 33: ["""Из таблицы случайных чисел выбрано n = 150 двузначных чисел. Частоты ni чисел, попавших в интервал [10i; 10i + 9],(i = 0, 1, . . . , 9) равны: (16; 15; 19; 13; 14; 19; 14; 11; 13; 16). Проверить, используя критерий Колмогорова, гипотезу H0 о согласии выборки с законом равномерного распределения. Уровень значимости α принять равным 0,01.

Код:
import numpy as np 
import scipy.stats as stats 
 
# Входные данные 
n = 150  # общее количество чисел 
frequencies = np.array([16, 15, 19, 13, 14, 19, 14, 11, 13, 16])  # частоты для каждого интервала 
intervals = 9  # количество интервалов 
 
# Эмпирическая функция распределения (ЭФР) 
cumulative_frequencies = np.cumsum(frequencies)  # кумулятивные частоты 
empirical_distribution_function = cumulative_frequencies / n  # ЭФР 
 
# Теоретическая функция равномерного распределения (ФР) 
theoretical_distribution_function = np.arange(0, intervals + 1) / intervals 
 
# Расчет статистики Колмогорова 
D_n = np.max(np.abs(empirical_distribution_function - theoretical_distribution_function)) 
 
# Критическое значение D_alpha для alpha = 0.01 
alpha = 0.01 
D_alpha = stats.kstwobign.ppf(1 - alpha) / np.sqrt(n) 
 
# Вывод результатов 
D_n, D_alpha, D_n < D_alpha
""",
                     [Image.open(f'{path1}/{path}/33/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/33') if os.path.isfile(os.path.join(f'{path1}/{path}/33', f))]]],
                 34: ["""Число π до 30 знака после запятой имеет вид: 3, 141592653589793238462643383279. Число e до 30 знака после запятой имеет вид: 2,718281828459045235360287471352. Используя критерий однородности Колмогорова–Смиронова, проверьте на уровне значимости α = 0,05 гипотезу H0 о том, что последовательности цифр после запятой для обоих чисел принадлежат одной генеральной совокупности.""",
                     [Image.open(f'{path1}/{path}/34/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/34') if os.path.isfile(os.path.join(f'{path1}/{path}/34', f))]]],
                 35: ["""Случайная выборка из 395 человек была разделена по возрастному признаку, а также по тому, переключают ли люди телевизионные каналы во время просмотра передачи. Данные исследования представлены в следующей таблице: Переключение \ Возраст 18–24 25–34 35–49 50–64 Да 60 54 46 41 Нет 40 44 53 57 Используя приведенные данные, проверьте гипотезу о том, что переключение каналов и возраст являются независмимыми признаками в случае, когда a) α = 5%; б) α = 2, 5%. Найдите P-значение критерия. 

Код:
o1 = np.array([60,54,46,41])
o2 = np.array([40,44,53,57])
n1 = sum(o1)
n2 = sum(o2)
chi2 = 1/(n1*n2) * sum((n1*o2-n2*o1)**2/(o1+o2))
chi2_crit05 = sts.chi2.ppf(0.95,3)
chi2_crit025 = sts.chi2.ppf(0.975,3)
pv = 1 - sts.chi2.cdf(chi2,3)
""",
                     [Image.open(f'{path1}/{path}/35/{x}') for x in [f for f in os.listdir(f'{path1}/{path}/35') if os.path.isfile(os.path.join(f'{path1}/{path}/35', f))]]],

                 }
        if number == -1:
            numbers = []
            for i, j in sklad.items():
                if search in j[0]:
                    numbers.append(i)
            return 'есть в этих номерах: ', numbers
#         print(sklad[number][0])
#         new_img = []
#         for a in sklad[number][1]:
#             #while height > 1000:
#             #    width /= 1.5
#             #    height /= 1.5
#             a = a.resize((w, h))
#             new_img.append(a)
        return sklad[number][0], sklad[number][1]

class q4:
    def pictures(number, search=-1):
        sklad = {1: ["""В группе учится 22 студента. Ими были получены следующие 100-балльные оценки: 64, 41, 83, 41, 83, 53, 0, 63, 84, 98, 2, 42, 98, 57, 63, 53, 91, 28, 76, 63, 78, 83. Найдите: 1) A – среднюю положительную оценку в группе; 2) M – медиану положительных оценок в группе; 3) H – среднее гармоническое и G – среднее геометрическое оценок, которые не менее M; 4) Q – медианную оценку в той части группы, в которой студенты набрали не менее M баллов; 5) N – количество студентов, оценки которых оказались между H и Q (включая границы).

Код:
sample = np.array([89, 61, 60, 56, 29, 71, 67, 86, 78, 84, 64, 79, 54, 89, 65, 0, 86, 88, 71, 43, 41, 72, 3, 71, 79, 87, 70, 86, 0, 61])

A = np.mean(sample[sample > 0])
M = np.median(sample[sample > 0])
H = stats.hmean(sample[sample >= M])
G = stats.gmean(sample[sample >= M])
Q = np.median(sample[sample >= M])
N = sample[(sample >= min(H,Q))*(sample <= max(H,Q))].shape[0]
print(rrstr(A,1),
rrstr(M,2),
rrstr(H,1),rrstr(G,1),
rrstr(Q,2),
rrstr(N,2))
"""],
                 2: ["""Эмпирическое распределение признаков и на генеральной совокупности задано таблицей частот Из случайным образом без возвращения извлекаются 14 элементов. Пусть и – средние значения признаков на выбранных элементах. Требуется найти: 1) математическое ожидание ; 2) дисперсию ; 3) коэффициент корреляции .

Код:
vals = [(200, 1)] * 18 + [(200, 2)] * 13 + [(200, 4)] * 17 + \
[(400, 1)] * 13 + [(400, 2)] * 16 + [(400, 4)] * 23

#кол-во извлекаемых элементов
k = 14

vals = np.array(vals)
n = len(vals)

#матожидание [0] - X [1] - Y
E = vals.mean(axis=0)[0]


#станд откл Х
VarX = vals.var(axis=0)[0]
VarX = VarX / k * (n - k) / (n - 1)
stdX = np.sqrt(VarX)

#ковариация
cov = ((vals[:, 0] * vals[:, 1]).mean() - vals[:, 0].mean() * vals[:, 1].mean()) / k * (n - k) / (n - 1)

#дисперсия [1] - Y [0] - X
VarY = vals.var(axis=0)[1]
VarY = VarY / k * (n - k) / (n - 1)
stdY = np.sqrt(VarY)
# корреляция
corr = cov/(stdY*stdX)

E, VarY, corr
 """],
                 3: ["""Распределение баллов на экзамене до перепроверки задано таблицей Работы будут перепроверять 7 преподавателей, которые разделили все работы между собой поровну случайным образом. Пусть – средний балл (до перепроверки) работ, попавших к одному из преподавателей. Требуется найти: 1) математическое ожидание ; 2) стандартное отклонение

Код:
vals = [2] * 71 + [3] * 35 + [4] * 4 + [5] * 16
# колво преподов
k = 6
n = len(vals)
k = n/k

vals = np.array(vals)

#матожид
E = vals.mean()
E

#станд откл
std = np.sqrt(vals.var() / k * (n-k)/ (n-1) )
std
 """],
                 4: ["""Следующие 30 чисел – это умноженные на 10000 и округленные до ближайшего целого дневные логарифмические доходности акции компании АВС: -956, 744, 1024, -794, 17, -252, -1122, -853, 65, -200, 991, 277, 59, -105, -95, 729, 20, 584, -832, -232, -490, -590, 197, -20, -278, -123, -275, -72, -416, -165. Будем называть их преобразованными доходностями (ПД). Финансовый аналитик Глеб предполагает, что преобразованные доходности (как и исходные) приближенно распределены по нормальному закону. Чтобы проверить свое предположение Глеб нашел нижнюю квартиль L и верхнюю квартиль H нормального распределения , для которого – это среднее арифметическое ПД, а – эмпирическое стандартное отклонение ПД. Затем Глеб подсчитал количество ПД, попавших в интервал от L до H (надеясь, что в этот интервал попадет половина ПД). Результат этого вычисления показался ему недостаточно убедительным. Чтобы окончательно развеять сомнения относительно нормальности ПД, Глеб построил на одном рисунке графики функций: и , где – эмпирическая функция распределения ПД, а – функция распределения . В качестве меры совпадения двух графиков Глеб решил использовать расстояние между функциями и , которое он вычислил, исходя из определения: . В ответе укажите результаты вычислений Глеба: 1) среднее арифметическое ПД; 2) эмпирическое стандартное отклонение ПД; 3) квартили L и H; 4) количество ПД, попавших в интервал от L до H; 5) расстояние между функциями и . 

Код:
sample = np.array([157, 1170, 149, -305, 1120, 410, 645, -453, -141, 306, -294, -284, -509, 408, -726, -425, 410, 271, 331, 81, 135, -488, 866, -561, 302, 240, -211, -328, -192, 573, -34, -125, 720, -916, 572, 547, 37, 482])

#Среднее арифметическое ПД
mu = np.mean(sample)
mu

#Эмпирическое стандартное отклонение ПД
std = np.std(sample)
std

#Квартиль L; квартиль Н
N = stats.norm(mu,std)
L = N.ppf(0.25)
H = N.ppf(0.75)
L,H

#Количество ПД, попавших в интервал от L до H 
L_H = len(sample[(sample >= L)*(sample <=H)])
L_H

#Расстояние между функциями распределений
def F(x,sample):
    return sum(sample<=x)/sample.shape[0]

D = max([abs(F(x,sample) - N.cdf(x)) for x in sample])
D
 """],
                 5: ["""Две игральные кости, красная и синяя, подбрасываются до тех пор, пока не выпадет 11 различных (с учетом цвета) комбинаций очков. Пусть – число очков на красной кости, а – число очков на синей кости в комбинации с номером . Случайные величины задаются соотношениями: . Среднее арифметическое этих величин обозначим . Требуется найти: 1) математическое ожидание ; 2) стандартное отклонение . 

Код:
#k - колво комбинаций;
k = 11
n = 36

combs = [(r, b) for r in range(1, 7) for b in range(1, 7)]
combs = np.array(combs)
mean, var = combs.mean(axis=0), combs.var(axis=0)


# 15-коэф перед R_i; 7 - коэф перед B_i
E = 15 * mean[0] - 7 * mean[1]
#матожидание
E

# 15-коэф перед R_i; 7 - коэф перед B_i. тут нужен квадрат
Var = 15**2 * var[0] + 7**2 * var[1]
Var = Var / k * (n - k) / (n - 1)
std = np.sqrt(Var)
# станд откл
std
 """],
                 6: ["""В группе учатся 27 студентов, Ω = {1, 2, . . . , 27}. Пусть X(i) – 100-балльная оценка студента . Из группы случайным образом раз выбирается студент . Повторный выбор допускается. Пусть – студент, полученный после выбора , – его оценка. Среднюю оценку на случайной выборке обозначим . Оценки в группе даны: 95, 12, 0, 3, 63, 64, 0, 63, 100, 96, 54, 79, 0, 98, 71, 68, 95, 97, 89, 78, 79, 89, 100, 67, 0, 63, 80, 64. Требуется найти: 1) дисперсию ; 2) центральный момент .

Код:
marks = np.array([2, 58, 100, 71, 71, 63, 67, 63, 100, 100, 78, 92, 65, 86, 89, 66, 65, 77, 53, 2, 95, 95, 46, 100, 96])
# сколько раз выбирается студент
k = 6
n = len(marks)

E_x = np.mean(marks)
#повторный выбор НЕ допускается смотри на задание!
# Var = marks.var() / k * (n - k) / (n - 1)
#повторный выбор допускается
# Var = marks.var() / k
mu3 = 1/marks.shape[0] * sum((marks-E_x)**3)
bar_mu3 = mu3/k**2

#смотри что нужно в ответе! 
rrstr(E_x,4),rrstr(Var,4),rrstr(bar_mu3,4)
 """],
                 7: ["""В группе учатся студенты: ω1, . . . , ω30. Пусть и – 100-балльные экзаменационные оценки по математическому анализу и теории вероятностей. Оценки студента обозначаются: и , . Все оценки известны: , , , , , , , , , , , , , , , , , , , , , , , , , , , , , . Требуется найти следующие условные эмпирические характеристики: 1) ковариацию и при условии, что одновременно и ; 2) коэффициент корреляции и при том же условии.

Код:
text = '''x1 = 73, y1 = 69 x2 = 39, y2 = 43 x3 = 87, y3 = 88 x4 = 60, y4 = 41
x5 = 79, y5 = 95 x6 = 86, y6 = 98 x7 = 47, y7 = 46 x8 = 42, y8 = 58 x9 = 44, y9 = 43 x10 = 66, y10 = 56
x11 = 47, y11 = 47 x12 = 80, y12 = 85 x13 = 39, y13 = 35 x14 = 73, y14 = 65 x15 = 62, y15 = 77
x16 = 44, y16 = 55 x17 = 44, y17 = 60 x18 = 56, y18 = 43 x19 = 39, y19 = 44 x20 = 86, y20 = 64
x21 = 40, y21 = 39 x22 = 84, y22 = 82 x23 = 74, y23 = 56 x24 = 73, y24 = 68 x25 = 51, y25 = 34
x26 = 38, y26 = 52 x27 = 65, y27 = 65 x28 = 57, y28 = 53 x29 = 33, y29 = 50 x30 = 72, y30 = 94'''

arr = [_ for _ in text.replace(',','').replace('\n',' ').split(' ') if _.isdigit()]
x = np.array([int(_) for _ in arr[::2]])
y = np.array([int(_) for _ in arr[1::2]])
xy = np.array([(i,j) for i,j in zip(x,y)])

#фильтруем по условию
#т.е. у нас это не отдельные массивы, а двумерный 
# поэтому если хоть одно не совпадает - убираем
vals = xy[(xy >= 50).sum(axis=1) == 2]


cov = ((vals[:, 0] * vals[:, 1]).mean() - vals[:, 0].mean() * vals[:, 1].mean())
stdX = vals.std(axis=0)[0]
stdY = vals.std(axis=0)[1]
corr = cov/(stdX*stdY)
rrstr(cov,2),rrstr(corr,4)
 """],
                 8: ["""Поток состоит из групп: Ω1, . . . , Ωk k = 5 . На потоке учатся n = n1+. . . +nk студентов, где ni – число студентов в группе , . Пусть – 100-балльная оценка студента . Далее используются следующие обозначения: – среднее значение, – (эмпирическое) стандартное отклонение признака на группе . Дано: n1 = 22 n2 = 29 n3 = 28 n4 = 25n5 = 20 ¯x¯¯1 = 74 ¯x¯¯2 = 73 ¯x¯¯3 = 72 ¯x¯¯4 = 79 ¯x¯¯5 = 80 σ1 = 9 σ2 = 4 σ3 = 7 σ4 = 3 σ5 = 8. Требуется найти: 1) среднее значение на потоке ; 2) (эмпирическое) стандартное отклонение на потоке . 

Код:
n = np.array([22,29,28,25,20])
x = np.array([74,73,72,79,80])
#стдшки
s = np.array([9,4,7,3,8])

N = sum(n)
k = len(n)

# Вычисление матожидания X для всего потока Ω
x_b = (n*x).sum()/N

var = (1/N)*sum(n*s**2) + (1/N)*sum(n*(x-x_b)**2)
sigma = var**0.5

rrstr(x_b,2), rrstr(sigma,4)
 """]
                 
                 }
        if number == -1:
            numbers = []
            for i, j in sklad.items():
                if search in j[0]:
                    numbers.append(i)
            return 'есть в этих номерах: ', numbers
        return sklad[number][0]
class q5:
    def pictures(number, search=-1):
        sklad = {1: ["""Пусть х = (x1,, x25) - реализация случайной выборки X = (X1, …, X25) из нормального распределения N(mu_x; 0,8^2), а у = (y1,…, y35) - реализация случайной выборки Y = (Y1,, Y35) из нормального распределения N(mu_y; 1,4^2). Известно, что Х и Y независимы. Проверяется гипотеза H0: mu_x  =  mu_y против альтернативной гипотезы H1 : mu_x > mu_y . При уровне значимости alpha применяется критерий с критической областью {Z > A}, где статистика критерия Z = Z(X, Y) - это нормированная разность X - Y, A = Aa - зависящее от а критическое значение. Соответствующее критическое множество имеет вид Ка = (A_alpha; +inf). 1) Найдите значение статистики критерия Zнабл. = Z(x, у). 2) Найдите Р-значение критерия. 3) Найдите критическое значение А, критическое множество Ка и проверьте гипотезу Н0 при а = 0,03. 4) Найдите мощность критерия W в случае mu_x - mu_y = 0,6 и a = 0,03.

Код:
x = "4,092; 3,604; 3,374; 5,05; 7,174; 3,794; 2,898; 3,02; 5,004; 3,786; 5,115; 4,194; 2,789; 4,258; 1,856; 3,104; 4,012; 4,452; 4,15; 2,342"
y = "4,551; -0,598; 2,481; 3,357; 0,997; 3,676; 3,845; 3,006; 3,142; 3,464; 3,83; 3,474; 6,008; 4,216; 2,392; 6,141; 5,39; 3,286; 3,868; 3,591; 3,527; 3,342; 3,173; 6,499; 3,335; 4,123; 5,002; 3,911; 4,417; 0,245; 4,13; 1,891; 1,93; 5,032; 4,37"


x = np.array(convert(x))
n = x.shape[0]
y = np.array(convert(y))
m = y.shape[0]


sigma_x = 0.9
sigma_y = 1.7
alpha = 0.03
#delta это mu_x - mu_y = …
delta = 0.8

z = (x.mean() - y.mean()) / np.sqrt(sigma_x ** 2 / n + sigma_y ** 2 / m)
P = Z.sf(z)
A = Z.isf(alpha)
beta = 1 / 2 + Phi0(A - np.sqrt(m * n) / np.sqrt(m * sigma_x ** 2 + n * sigma_y ** 2) * delta)
W = 1 - beta

rrstr(z,3),rrstr(P,3),rrstr(A,3),rrstr(W,3), 'H0 отвергается' if z > A else "Н0 не отвергается"
"""],
                 2: ["""оценка - матожид и неизв стд (10) Пусть х = (x1,...,x20) - реализация случайной выборки X = (X1,..., X20) из нормального распределения N(mu;sigma2). Проверяется на уровне значимости а = 0,04 основная гипотеза Н0: mu0 = 1,45 против альтернативной гипотезы Н1: mu0 != 1,45 с критическим множеством вида Ка = (-inf, -A) U (A, +inf). 1) Найдите значение статистики критерия t = Табл = T(x). 2) Найдите границу А критического множества. 3) Найдите Р-значение критерия и сделайте выводы. 4) Найдите мощность W критерия для H1: mu1 = 1,34
                 
Код:
x = "1,494; 0,274; 10,106; 1,165; 1,411; -0,809; 0,617; 4,121; 6,242; -3,752; 0,98; 0,884; 6,619; 1,781; 6,055; -3,969; 1,481; 4,778; -4,171; 1,672"
x = np.array(convert(x))
n = x.shape[0]
alpha = 0.04
# внимательно смотрите что дано в гипотезе sigma или mu
mu0 = 1.45
# 4 пункт там H1: mu1 =...
mu1 = 1.34
s = np.sqrt((1/(n-1))*sum((x-x.mean())**2))
T = np.sqrt(n)*(x.mean() - mu0)/s
A = t(n - 1).isf(alpha / 2)
P = 2 * min(t(n - 1).cdf(T), t(n - 1).sf(T))
delta = np.sqrt(n - 1) * (mu1 - mu0) / x.std()
t2 = t(n - 1).isf(alpha / 2)
beta = nct(n - 1, delta).cdf(t2) - nct(n - 1, delta).cdf(-t2)
W = 1 - beta
rrstr(T,4),rrstr(A,4),rrstr(P,4),rrstr(W,4),'H0 отвергается' if (T<-A) or (T > A) else "Н0 не отвергается"                 
                  """],
                 3: ["""известно стд оценка матожид (10) Пусть х = (x1,...,x20) - реализация случайной выборки X = (X1,..., X20) из нормального распределения N(mu;3.6^2). Проверяется на уровне значимости а = 0,04 основная гипотеза H0: mu0 = 1,91 против альтернативной гипотезы Н1: mu0 != 1,91 с критическим множеством вида Ка = (-inf, -A) U (A, +inf). 1) Найдите значение статистики критерия z = Табл = Z(x). 2) Найдите границу А критического множества. 3) Найдите Р-значение критерия и сделайте выводы. 4) Найдите мощность W критерия для H1 mu1 = 1,78. 
Код:

x = "1,943; -1,37; 0,323; 3,293; 1,332; 3,173; 2,409; 4,521; 5,488; 2,914; 4,19; 4,483; 3,192; 7,648; 0,835; 2,648; 2,264; -5,505; -0,958; 5,399"
x = np.array(convert(x)) n = x.shape[0]
alpha = 0.01
# внимательно смотрите что дано в гипотезе sigma или mu
mu0 = 1.91
# 4 пункт там H1: mu1 =...
mu1 = 1.78
s = 3.6
z = np.sqrt(n)*(x.mean() - mu0)/s A = Z.isf(alpha / 2)
P = 2 * min(Z.cdf(z), Z.sf(z))
stat = np.sqrt(n)*(mu1-mu0)/s
beta = Phi0(A - stat) + Phi0(A + stat)
W = 1 - beta
rrstr(T,4),rrstr(A,4),rrstr(P,4),rrstr(W,4),'H0 отвергается' if (z<-A) or (z > A) else "Н0 не отвергается"
                 
                 """],
                 4: ["""известно матожидание оценка - дисперсия Пусть x⃗ =(x1,...,x45) – реализация случайной выборки X⃗ =(X1,...,X45) из нормального распределения N(1,91;sigma2). Проверяется на уровне значимости alpha =0,02 гипотеза H0:sigma=1,19 против альтернативной гипотезы H1:sigma != 1,19 с критическим множеством вида Ka =(0;A)∪(B;+inf). 1) Найдите значение статистики критерия χ2_0. 2) Найдите границы А и В критического множества и проверьте гипотезу H0. 3) Найдите P-значение критерия. 4) Найдите вероятность ошибки второго рода beta для sigma1 = 1,29.
Код:

x = "3,439; 1,538; 1,494; 2,559; -1,154; 4,125; 1,188; 3,381; 0,973; 2,891; 1,834; 3,142; 2,134; 0,39; -0,48; 0,493; 2,402; -0,168; 1,743; 4,998; 1,263; 1,833; -0,84; 1,576; 0,297; 2,212; 2,459; 2,817; 1,547; 3,182; 1,128; -1,268; 2,558; 1,142; 1,909; 1,046; 2,775; 1,635; 0,558; 1,349; 0,637; 0,947; 0,367; 0,313; 2,345"
x = np.array(convert(x))
n = x.shape[0]
mu = 1.91
sigma0 = 1.19
sigma1 = 1.29
alpha = 0.02

# s0 уже является квадратом
s0 = 1/n * sum((x-mu)**2)
chi2_0 = n*s0/sigma0**2
A = chi2(n).isf(1-alpha/2)
B = chi2(n).isf(alpha/2)
P = 2*min(chi2(n).cdf(chi2_0), chi2(n).sf(chi2_0))
beta = chi2(n).cdf(sigma0**2/sigma1**2 * chi2(n).isf(alpha/2)) - chi2(n).cdf(sigma0**2/sigma1**2 * chi2(n).isf(1-alpha/2))
# Вероятность ошибки 2 рода beta
# Мощность критерия это 1-beta
rrstr(chi2_0,3), rrstr(A,3),rrstr(B,3),rrstr(P,3),rrstr(beta,3),'H0 отвергается' if (0<chi2_0<A) or (chi2_0 > B) else "Н0 не отвергается"

                 
                 
                 """],
                 5: ["""оценка дисперсии матожид неизв пусть X-> =(x1,...,x30) – реализация случайной выборки X-> =(X1,...,X30) из нормального распределения N(μ;σ2) . Проверяется на уровне значимости α=0,02 гипотеза H0:σ=1,14 против альтернативной гипотезы H1:σ≠1,14 с критическим множеством вида Kα=(0;A)∪(B;+∞) . 1) Найдите значение статистики критерия χ2 . 2) Найдите границы А и В критического множества и проверьте гипотезу H0 . 3) Найдите P -значение критерия. 4) Найдите вероятность ошибки второго рода β для σ1=1,24 
                 
код:

x = "0,889; 1,514; 2,846; 2,811; 0,84; 0,945; 0,02; -0,441; -0,796; 3,739; 0,688; 0,777; -0,233; 2,284; -0,681; 1,056; 0,21; 1,8; 0,687; -0,144; 1,285; 1,851; 1,402; 1,695; 0,533; 0,87; 0,486; 0,874; 0,312; -0,821"
x = np.array(convert(x))
n = x.shape[0]
sigma0 = 1.14
sigma1 = 1.24
alpha = 0.02
s = np.sqrt((1/(n-1) * sum((x-x.mean())**2)))
chi2_0 = (n-1)*s**2/sigma0**2
A = chi2(n-1).isf(1-alpha/2)
B = chi2(n-1).isf(alpha/2)
P = 2*min(chi2(n-1).cdf(chi2_0),chi2(n-1).sf(chi2_0))
beta = chi2(n-1).cdf(sigma0**2/sigma1**2 * chi2(n-1).isf(alpha/2)) - chi2(n-1).cdf(sigma0**2/sigma1**2 * chi2(n-1).isf(1-alpha/2))
# Вероятность ошибки 2 рода beta
# Мощность критерия это 1-beta
rrstr(chi2_0,3), rrstr(A,3),rrstr(B,3),rrstr(P,3),rrstr(beta,3),'H0 отвергается' if (0<chi2_0<A) or (chi2_0 > B) else "Н0 не отвергается"

                 ."""],
                 6: ["""Для трех групп финансовых показателей А, В, С проверяется гипотеза о совпадении ожидаемых значений показателей. Предполагается, что все показатели Xij независимы и распределены по нормальному закону N(mu_j, sigma^2) с одинаковой неизвестной дисперсией Var(Xij) = sigma^2, причем для каждой группы E(Xij) = mu_j,j = 1,2,3. 1) По данным значениям (файл ds5.9.8.csv) найдите межгрупповую и среднюю групповую дисперсии. 2) Найдите 91% доверительные интервалы для ожидаемых значений показателей pj, j = 1, 2, 3. 3) Найдите значение статистики критерия fo = Fнабл., критическое множество Ка и на 3% уровне значимости проверьте гипотезу о совпадении ожидаемых значений показателей, mu1=mu2=mu3. 4) Найдите Р-значение критерия и сделайте выводы. 
код
path = '/Users/parlorsky/Downloads/DataSets/ds5.9.8.csv'
xyz=pd.read_csv(path, header=None, decimal=',', sep=';',encoding='cp1251')
#дисперсия равна но неизвестна гипотеза о равенстве 3 матожиданий
# эта альфа для критического множества K_alpha (3 пункт задания вроде) 
alpha = 0.03
#эта альфа для доверит интервала. если интервал 91% то альфа 0.09
alpha_mu = 0.09
xyz_all = np.concatenate([xyz[0].dropna(),xyz[1].dropna(),xyz[2].dropna()])
n1 = xyz[0].dropna().shape[0]
n2 = xyz[1].dropna().shape[0]                 
n3 = xyz[2].dropna().shape[0]
n = [n1, n2, n3]
N = sum(n)
k=3
#межгрупповая дисперсия
d2 = np.sum((xyz.mean() - xyz_all.mean()) ** 2 * n) / N 
#средняя групповая дисперсия
meanvar = np.sum(xyz.var(ddof=0) * n) / N
SSE = N * meanvar 
MSE = SSE / (N - k) 
SSTR = N * d2
MSTR = SSTR / (k - 1) 
#f0 оно же F_набл
F = MSTR / MSE
F_crit = f(k - 1, N - k).isf(alpha)
P = f(k - 1, N - k).sf(F)
#доверительные оценки уровня alpha_mu
mu1_l = xyz[0].mean() - t(N-k).isf(alpha_mu/2)*np.sqrt(MSE/n1)
mu1_r = xyz[0].mean() + t(N-k).isf(alpha_mu/2)*np.sqrt(MSE/n1)
mu2_l = xyz[1].mean() - t(N-k).isf(alpha_mu/2)*np.sqrt(MSE/n2)
mu2_r = xyz[1].mean() + t(N-k).isf(alpha_mu/2)*np.sqrt(MSE/n2)
mu3_l = xyz[2].mean() - t(N-k).isf(alpha_mu/2)*np.sqrt(MSE/n3)
mu3_r = xyz[2].mean() + t(N-k).isf(alpha_mu/2)*np.sqrt(MSE/n3)
#заметим что P у нас 5.482511607950309e-06 это 5 * 10**-6 поэтому не надо rrstr 
print(rrstr(d2,4),rrstr(meanvar,4),rrstr(F,4),'крит обл(',rrstr(F_crit,4),np.inf,')',P)
print('H0 опроверг тк F_набл в крит области' if F >= F_crit else 'H0 не опроверг') 
print("H0 опроверг тк альфа > p-value" if alpha > P else "H0 не опроверг") 
print('интервал для mu1', mu1_l,mu1_r)
print('интервал для mu2', mu2_l,mu2_r) 
print('интервал для mu3', mu3_l,mu3_r)
                 """],
                 7: ["""(10) Для трех групп финансовых показателей А: (X1; ...; X35), В: (Y1;...; Y29), С: (Z1; ...; Z31), которые по предположению независимы и распределены, соответственно, по трем нормальным законам N(mu_x,sigma2), N(mu_y,sigma2), N(mu_z, sigma2) (с одинаковой неизвестной дисперсией sigma2) на уровне значимости а = 0,01 с помощью F-критерия (Фишера) проверяется гипотеза Н0 : mu_x = mu_y = mu_z о совпадении ожидаемых значений показателей. Конкретные значения всех показателей указаны ниже. 1) По данным значениям показателей найдите межгрупповую дисперсию. 2) По этим же данным найдите среднюю групповую дисперсию. 3) Найдите значение статистики F-критерия, критическое множество Ка и проверьте гипотезу H0. 4) Найдите Р-значение критерия и сделайте выводы.
код:

A = "-2,63; 2,812; 3,354; -1,754; 3,732; 0,411; 4,594; 8,272; 0,437; 10,205; 5,254; -0,846; 0,729; 3,799; 1,174; 2,885; 1,489; -3,153; 2,788; 1,361; -0,556; 3,637; 0,484; -3,043; 0,471; 1,513; 4,164; 2,327; 3,715; 1,989; 3,666; 5,35; 4,509; 7,537; 0,258"
B = "0,024; -1,306; 2,986; 2,237; 3,289; 5,557; 1,174; 2,651; 3,268; 2,492; 2,516; 0,924; 5,502; 4,909; -0,901; -0,13; 0,28; -1,594; 1,728; 1,737; 1,491; 1,43; -1,218; 2,952; -0,516; 2,881; 1,591; 2,129; 0,819"
C = "-0,638; 2,623; 6,466; -1,684; 4,656; -0,655; 2,152; 1,103; 0,503; 4,185; 0,627; -0,555; -0,98; 0,852; -1,945; 5,233; 3,124; -4,2; 0,958; 4,156; 0,936; -1,321; 0,573; 0,164; 1,11; 5,099; 0,084; 0,934; 0,941; -1,156; -2,437"
x = np.array(convert(A))
n1 = x.shape[0]
y = np.array(convert(B))
n2 = y.shape[0]
z = np.array(convert(C))
n3 = z.shape[0]

#дисперсия равна но неизвестна alpha = 0.01
xyz = pd.DataFrame([x, y, z]).T
xyz_all = np.concatenate([x, y, z])
n = [n1, n2, n3]
N = sum(n) k=3
#межгрупповая дисперсия
d2 = np.sum((xyz.mean() - xyz_all.mean()) ** 2 * n) / N 
#средняя групповая дисперсия
meanvar = np.sum(xyz.var(ddof=0) * n) / N
SSE = N * meanvar
MSE = SSE / (N - k)
SSTR = N * d2
MSTR = SSTR / (k - 1)
F = MSTR / MSE
F_crit = f(k - 1, N - k).isf(alpha)
P = f(k - 1, N - k).sf(F)
# если не уверены в отвержении по F > F_crit,
# то если альфа < P то не отвергается
rrstr(d2,4),rrstr(meanvar,4),rrstr(F,4),rrstr(P,4), 'H0 отвергается' if F > F_crit else "Н0 не отвергается"

                 
                  """]
                 
                 }
        if number == -1:
            numbers = []
            for i, j in sklad.items():
                if search in j[0]:
                    numbers.append(i)
            return 'есть в этих номерах: ', numbers
        return sklad[number][0]


class q6:
    def pictures(number, search=-1):
        sklad = {1: ["""По содержащейся в файле ds6.4.12.csv реализации случайной выборки из двумерного нормального Var(X) Cov(X,Y) распределения N ((E(X); E(Y));= N ((2;2); c неизвестными параметрами p€ (-1; 1) и о > 0: 1) запишите логарифм функции правдоподобия, In L(p,0); 2) найдите оценки максимального правдободобия ри о.

Код:
from scipy.stats import multivariate_normal
from scipy.optimize import minimize
from sympy import symbols, log, pi, sqrt, summation, IndexedBase, Function, Rational

path = '/Users/parlorsky/Downloads/DataSets/ds6.4.8.csv'
data=pd.read_csv(path, header=None, decimal=',', sep=';',encoding='cp1251') 

rho, sigma, i = symbols('rho sigma i', real=True)
X = Function('X')(i)
Y = Function('Y')(i)
n = symbols('n', integer=True, positive=True)
#мю из условия
mu_X = -3
mu_Y = -4

#  функция правдоподобия для bivariate normal distribution
L = (-log(2 * pi) - log(sigma**2) - 1/2 * log(1 - rho**2) - 
     1/(2 * (1 - rho**2) * sigma**2) * 
     summation(((X - mu_X)**2 + (Y - mu_Y)**2 - 2 * rho * (X - mu_X) * (Y - mu_Y)), (i, 1, n)))


def log_likelihood(params, data, mu):
    rho, sigma = params
    sigma_squared = sigma**2
    # в задании ков матрица так выглядит
    cov_matrix = [[sigma_squared, rho*sigma_squared], [rho*sigma_squared, sigma_squared]]
    log_likelihood = np.sum(multivariate_normal.logpdf(data, mean=mu, cov=cov_matrix))
    return -log_likelihood

#предположения для оценок
initial_guesses = [0, 1]

#границы для корр и стд
bounds = [(-0.999, 0.999), (1e-5, None)]

result = minimize(log_likelihood, initial_guesses, args=(data.values,[mu_X,mu_Y]), bounds=bounds)

#то что в числителе вместо суммы
sum_of_squares_with_rho = sum(2 * rho * (x - mu_X) * (y - mu_Y) + (x - mu_X)**2 + (y - mu_Y)**2 for x, y in zip(data[0], data[1]))/data.shape[0]
sum_of_squares_with_rho

rho_estimate_mle, sigma_estimate_mle = result.x
rho_estimate_mle, sigma_estimate_mle

# отдельная ячейка
L
# отдельная ячейка
sum_of_squares_with_rho
"""],
                 2: ["""(10) Пусть (x1, У1);...; (x36,У36) - реализация случайной выборки (X1, Y1);...; (X36, Y36) из двумерного нормального распределения N(mu_x;mu_y;sigmax^2;sigmay^2;rho). Используя векторы x = (x1;.; x36) и у = (y1; ; e36), постройте асимптотический 0,73-доверительный интервал (theta1;theta2) для коэффициента корреляции р. В ответе укажите: 1) выборочный коэффициент корреляции р; 2) верхнюю границу theta2 построенного доверительного интервала для р. 
x = "-0,82; -0,904; 0,365; 2,869; -0,484; 1,566; 0,917; 1,973; 0,445; 0,783; -0,63; -0,213; 0,201; -0,332; -0,056; 0,094; -0,426; -0,164; 1,28; 0,724; -0,102; 0,793; 0,129; -0,709; 1,223; -0,502; 0,228; -0,932; 1,543"
y = "-0,763; -0,607; 0,755; 2,391; -0,548; 2,332; 1,308; 1,682; 0,468; 1,395; -0,62; 0,308; 1,169; -0,332; 0,679; -0,185; -0,217; -0,367; 0,671; 0,146; -0,388; 1,075; 0,033; -0,523; 0,485; -0,602; 0,608; -0,903; 1,903"
x = np.array(convert(x))
y = np.array(convert(y))
n1 = x.shape[0]
n2 = y.shape[0]
# 94% довер интервал в условии
alpha = 1 - 0.94
sample_cov = sum((x-x.mean())*(y-y.mean()))
std_x = np.sqrt(sum((x-x.mean())**2))
std_y = np.sqrt(sum((y-y.mean())**2))
sample_rho = sample_cov/(std_x*std_y)
arth_rho = 1/2 * np.log((1+sample_rho)/(1-sample_rho))
theta_1 = np.tanh(arth_rho - 1/(np.sqrt(n1-3))*Z.isf(alpha/2))
theta_2 = np.tanh(arth_rho + 1/(np.sqrt(n1-3))*Z.isf(alpha/2))
rrstr(sample_rho,4),rrstr(theta_1,4), rrstr(theta_2,4)                 
                 
                 """],
                 3: ["""(10) Влад и Ева исследуют эффективность лекарственного препарата АВС. Влад, используя модель Евы, создал компьютерную программу, вычисляющую по заданным генетическим факторам вероятность (в процентах) успешного применения АВС. Программа Влада накапливает полученные вероятности и в итоге выдает набор частот: по, п1,, N100- Например, 175 - это число случаев, в которых программа Влада получила вероятность 75%. Обработав 900 образцов генетического материала, Ева нашла значения факторов и ввела их в программу. В результате был получен следующий набор частот: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 3, 2, 4, 2, 3, 8, 10, 6, 7, 14, 13, 15, 14, 17, 15, 24, 22, 34, 35, 34, 44, 45, 55, 36, 48, 38, 46, 40, 49, 48, 39, 39, 21, 18, 18, 10, 5, 6, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0. Для завершения этапа исследования необходим было подобрать распределение, соответствующее полученным частотам. Ева решила использовать распределение на отрезке [0,1] с плотностью f(x) = f(x;a,b) = abx^(a-1)*(1- x^a)^(b-1) и целочисленными параметрами a,b в диапазоне от 1 до 20. В результате максимизации функции правдоподобия (при указанных ограничениях) Владом были получены значения параметров: а = A и b = В. Задача: пусть X - случайная величина, распределения на отрезке [0, 1] с плотностью f(x) = f(x; à, b), F(x) - ee функция распределения. Требуется найти математическое ожидание E(X) и X_0,2 = F^-1(0,2) - квантиль уровня 0,2. Какой смысл для всей популяции имеют E(X) и X0.2? В ответе укажите: 1) значение А; 2) значение В; 3) математическое ожидание E(X); 4) квантиль X0,2.
код:
fr = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2, 1, 1, 0, 2, 1, 3, 5, 5, 3, 6, 3, 5, 8, 7, 6, 4, 7, 17, 15, 15, 13, 13, 12, 21, 24, 17, 26, 21, 27, 34, 29, 19, 22, 22, 22, 16, 13, 9, 11, 5, 2, 3, 0, 0, 0, 0, 0
N = sum(fr)
quantil = 0.2
sample = []
for i in range(len(fr)):
    temp = [i]*fr[i]
    sample.extend(temp)
sample = np.array(sample) / 100
def log_likelihood(p,data):
    n = len(data)
    a, b = p
    return n * np.log(a * b) + (a - 1) * np.sum(np.log(data)) + (b - 1) *
np.sum(np.log(1-data**a))
arr = []
for a in range(1,21):
    for b in range(1,21):
        p = (a,b)
        lgl = log_likelihood(p,sample) 
        arr += [[a,b,lgl]]
arr = sorted(arr, key = lambda x: -x[2])
a_h,b_h = arr[0][0], arr[0][1]
print('a',rrstr(a_h,4), 'b',rrstr(b_h,4))
class distr(rv_continuous):
    def _pdf(self,x):
    if 0 <= x <= 1:
        return round(a_h) * round(b_h) * x ** (round(a_h) - 1) * (1 - x ** round(a_h)) ** (round(b_h) - 1) 
    return 0
X = distr()                 
print('матожид', rrstr(integrate.quad(lambda x: x * X.pdf(x),0,1)[0],4))     
cur = 0 
precision = 15 
p=0
d=1
while p < precision:
    if X.cdf(cur) <= quantil:
        cur += d 
    else:
        cur -= d 
        d /= 10
        p += 1
print('quantile', rrstr(cur,4))

                  """]

                 
                 
                 }
        if number == -1:
            numbers = []
            for i, j in sklad.items():
                if search in j[0]:
                    numbers.append(i)
            return 'есть в этих номерах: ', numbers
        return sklad[number][0]