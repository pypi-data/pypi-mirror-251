{
    "DocTestCode": {
        "description": "Creates a DocTestCode editor for entering, editing or viewing code.",
        "members": {
            "__init__": {
                "value": {
                    "type": "str | tuple[str] | None",
                    "default": "None",
                    "description": "Default value to show in the code editor. If callable, the function will be called whenever the app loads to set the initial value of the component."
                },
                "language": {
                    "type": "Literal[\n        \"python\",\n        \"markdown\",\n        \"json\",\n        \"html\",\n        \"css\",\n        \"javascript\",\n        \"typescript\",\n        \"yaml\",\n        \"dockerfile\",\n        \"shell\",\n        \"r\",\n    ]\n    | None",
                    "default": "None",
                    "description": "The language to display the code as. Supported languages listed in `gr.Code.languages`."
                },
                "every": {
                    "type": "float | None",
                    "default": "None",
                    "description": "If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. Queue must be enabled. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute."
                },
                "lines": {
                    "type": "int",
                    "default": "5",
                    "description": null
                },
                "label": {
                    "type": "str | None",
                    "default": "None",
                    "description": "The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to."
                },
                "interactive": {
                    "type": "bool | None",
                    "default": "None",
                    "description": "Whether user should be able to enter code or only view it."
                },
                "show_label": {
                    "type": "bool | None",
                    "default": "None",
                    "description": "if True, will display label."
                },
                "container": {
                    "type": "bool",
                    "default": "True",
                    "description": "If True, will place the component in a container - providing some extra padding around the border."
                },
                "scale": {
                    "type": "int | None",
                    "default": "None",
                    "description": "relative width compared to adjacent Components in a Row. For example, if Component A has scale=2, and Component B has scale=1, A will be twice as wide as B. Should be an integer."
                },
                "min_width": {
                    "type": "int",
                    "default": "160",
                    "description": "minimum pixel width, will wrap if not sufficient screen space to satisfy this value. If a certain scale value results in this Component being narrower than min_width, the min_width parameter will be respected first."
                },
                "visible": {
                    "type": "bool",
                    "default": "True",
                    "description": "If False, component will be hidden."
                },
                "elem_id": {
                    "type": "str | None",
                    "default": "None",
                    "description": "An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles."
                },
                "elem_classes": {
                    "type": "list[str] | str | None",
                    "default": "None",
                    "description": "An optional list of strings that are assigned as the classes of this component in the HTML DOM. Can be used for targeting CSS styles."
                },
                "render": {
                    "type": "bool",
                    "default": "True",
                    "description": "If False, component will not render be rendered in the Blocks context. Should be used if the intention is to assign event listeners now but render the component later."
                }
            },
            "postprocess": {
                "value": {
                    "type": "tuple | str | None",
                    "description": null
                }
            },
            "preprocess": {
                "return": {
                    "type": "typing.Any",
                    "description": null
                },
                "value": null
            }
        },
        "events": {
            "change": {
                "type": null,
                "default": null,
                "description": "Triggered when the value of the DocTestCode changes either because of user input (e.g. a user types in a textbox) OR because of a function update (e.g. an image receives a value from the output of an event trigger). See `.input()` for a listener that is only triggered by user input."
            },
            "input": {
                "type": null,
                "default": null,
                "description": "This listener is triggered when the user changes the value of the DocTestCode."
            },
            "focus": {
                "type": null,
                "default": null,
                "description": "This listener is triggered when the DocTestCode is focused."
            },
            "blur": {
                "type": null,
                "default": null,
                "description": "This listener is triggered when the DocTestCode is unfocused/blurred."
            }
        }
    },
    "__meta__": {
        "additional_interfaces": {},
        "user_fn_refs": {
            "DocTestCode": []
        }
    }
}