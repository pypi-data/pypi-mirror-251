[tool.poetry]
name = "py-multiauth"
version = "3.0.4"
description = "Python package to interact with multiple authentication services"
authors = ["Escape Technologies SAS <ping@escape.tech>"]
maintainers = [
    "Antoine Carossio <antoine@escape.tech>",
    "Swan <swan@escape.tech>",
    "Maxence <maxence@escape.tech>",
]
license = "MIT"
packages = [{ include = "multiauth" }]
readme = "README.md"
"homepage" = "https://escape.tech/"
"repository" = "https://github.com/Escape-Technologies/py-multiauth"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/Escape-Technologies/py-multiauth/issues"

[tool.poetry.scripts]
mh = 'multiauth.cli.cli:cli'
multiauth = 'multiauth:cli'

[tool.poetry.group.dev.dependencies]
mypy = "^1.8.0"

[tool.coverage.run]
parallel = true
omit = ['tests/*', 'examples/*']

[tool.pytest.ini_options]
asyncio_mode = 'strict'
addopts = []
filterwarnings = [
    "ignore:Module already imported.*:pytest.PytestAssertRewriteWarning",
    "ignore::DeprecationWarning",
]


[tool.poetry.dependencies]
python = "^3.11"
selenium = "^4.16.0"
selenium-wire = "^5.1.0"
pydantic = "^2.5.3"
deepmerge = "^1.1.1"
httpx = { extras = ["http2"], version = "^0.26.0" }

[tool.poetry.dev-dependencies]
mypy = "^1.8.0"
black = "^23.12.1"
pytest = "^7.4.4"
ruff = "^0.1.3"
toml = "^0.10.2"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-asyncio = "^0.23.2"
pytest-timeout = "^2.2.0"
setuptools = "^67.8.0"
types-boto3 = "^1.0.2"
types-requests = "^2.31.0.20240106"
types-selenium = "^3.141.9"
types-setuptools = "^68.2.0.2"
types-PyYAML = "^6.0.12.12"
types-protobuf = "^4.24.0.20240106"
types-toml = "^0.10.8.6"
types-jsonschema = "^4.20.0.20240105"
yamllint = "1.32.0"
vulture = "^2.10"
mkdocs = "^1.5.3"
mkdocstrings = "^0.24.0"
mkdocs-material = "^9.5.4"
jsonschema2md = "^1.1.0"
Jinja2 = "^3.1.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
skip-string-normalization = true

[tool.ruff]
unfixable = ["F841"]
select = [
    ## Here are all available rules
    # https://beta.ruff.rs/docs/rules/
    # Please, comment or uncomment lines but do not remove them

    "F",   # Pyflakes                          https://beta.ruff.rs/docs/rules/#pyflakes-f
    "E",   # pycodestyle - Error               https://beta.ruff.rs/docs/rules/#error-e
    "W",   # pycodestyle - Warning             https://beta.ruff.rs/docs/rules/#warning-w
    "C90", # mccabe                            https://beta.ruff.rs/docs/rules/#mccabe-c90
    "I",   # isort                             https://beta.ruff.rs/docs/rules/#isort-i
    # "N",          # pep8-naming                   x   https://beta.ruff.rs/docs/rules/#pep8-naming-n
    # "D",          # pydocstyle                    x   https://beta.ruff.rs/docs/rules/#pydocstyle-d
    # "UP",         # pyupgrade                     x   https://beta.ruff.rs/docs/rules/#pyupgrade-up
    "YTT", # flake8-2020                       https://beta.ruff.rs/docs/rules/#flake8-2020-ytt
    # "ANN",        # flake8-annotations                https://beta.ruff.rs/docs/rules/#flake8-annotations-ann
    "S", # flake8-bandit                     https://beta.ruff.rs/docs/rules/#flake8-bandit-s
    # "BLE",        # flake8-blind-except               https://beta.ruff.rs/docs/rules/#flake8-blind-except-ble
    # "FBT",        # flake8-boolean-trap               https://beta.ruff.rs/docs/rules/#flake8-boolean-trap-fbt
    "B", # flake8-bugbear                    https://beta.ruff.rs/docs/rules/#flake8-bugbear-b
    # "A",          # flake8-builtins              x    https://beta.ruff.rs/docs/rules/#flake8-builtins-a
    "COM", # flake8-commas                     https://beta.ruff.rs/docs/rules/#flake8-commas-com
    "C4",  # flake8-comprehensions             https://beta.ruff.rs/docs/rules/#flake8-comprehensions-c4
    # "DTZ",        # flake8-datetimez                  https://beta.ruff.rs/docs/rules/#flake8-datetimez-dtz
    # "T10",        # flake8-debugger                   https://beta.ruff.rs/docs/rules/#flake8-debugger-t10
    # "DJ",         # flake8-django                     https://beta.ruff.rs/docs/rules/#flake8-django-dj
    # "EM",         # flake8-errmsg                     https://beta.ruff.rs/docs/rules/#flake8-errmsg-em
    # "EXE",        # flake8-executable                 https://beta.ruff.rs/docs/rules/#flake8-executable-exe
    "ISC", # flake8-implicit-str-concat        https://beta.ruff.rs/docs/rules/#flake8-implicit-str-concat-isc
    "ICN", # flake8-import-conventions         https://beta.ruff.rs/docs/rules/#flake8-import-conventions-icn
    # "G",          # flake8-logging-format             https://beta.ruff.rs/docs/rules/#flake8-logging-format-g
    "INP", # flake8-no-pep420                  https://beta.ruff.rs/docs/rules/#flake8-no-pep420-inp
    "PIE", # flake8-pie                        https://beta.ruff.rs/docs/rules/#flake8-pie-pie
    "T20", # flake8-print                      https://beta.ruff.rs/docs/rules/#flake8-print-t20
    "PYI", # flake8-pyi                        https://beta.ruff.rs/docs/rules/#flake8-pyi-pyi
    "PT",  # flake8-pytest-style               https://beta.ruff.rs/docs/rules/#flake8-pytest-style-pt
    "Q",   # flake8-quotes                     https://beta.ruff.rs/docs/rules/#flake8-quotes-q
    "RSE", # flake8-raise                      https://beta.ruff.rs/docs/rules/#flake8-raise-rse
    "RET", # flake8-return                     https://beta.ruff.rs/docs/rules/#flake8-return-ret
    # "SLF",        # flake8-self                       https://beta.ruff.rs/docs/rules/#flake8-self-slf
    # "SIM",        # flake8-simplify              x    https://beta.ruff.rs/docs/rules/#flake8-simplify-sim
    "TID", # flake8-tidy-imports               https://beta.ruff.rs/docs/rules/#flake8-tidy-imports-tid
    # "TCH",        # flake8-type-checking              https://beta.ruff.rs/docs/rules/#flake8-type-checking-tch
    "ARG", # flake8-unused-arguments           https://beta.ruff.rs/docs/rules/#flake8-unused-arguments-arg
    # "PTH",        # flake8-use-pathlib           x    https://beta.ruff.rs/docs/rules/#flake8-use-pathlib-pth
    # "ERA",        # eradicate                         https://beta.ruff.rs/docs/rules/#eradicate-era
    # "PD",         # pandas-vet                        https://beta.ruff.rs/docs/rules/#pandas-vet-pd
    "PGH", # pygrep-hooks                      https://beta.ruff.rs/docs/rules/#pygrep-hooks-pgh
    # "PL",         # Pylint                       x    https://beta.ruff.rs/docs/rules/#pylint-pl
    "PLC", # Pylint - Convention               https://beta.ruff.rs/docs/rules/#convention-plc
    "PLE", # Pylint - Error                    https://beta.ruff.rs/docs/rules/#error-ple
    # "PLR",        # Pylint - Refactor            x    https://beta.ruff.rs/docs/rules/#refactor-plr
    "PLW", # Pylint - Warning                  https://beta.ruff.rs/docs/rules/#warning-plw
    # "TRY",        # tryceratops                  x    https://beta.ruff.rs/docs/rules/#tryceratops-try                      
    "NPY",   # NumPy-specific rules              https://beta.ruff.rs/docs/rules/#numpy-specific-rules-npy
    "RUF",   # Ruff-specific rules               https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf
    "TD002", # flake8-missing-todo-author               https://beta.ruff.rs/docs/rules/#flake8-todos-td
    "TD004", # flake8-missing-todo-colon                https://beta.ruff.rs/docs/rules/#flake8-todos-td
    "TD005", # flake8-missing-todo-description              https://beta.ruff.rs/docs/rules/#flake8-todos-td
    "TD007", # flake8-missing-space-after-todo-colon        https://beta.ruff.rs/docs/rules/#flake8-todos-td
]
exclude = [
    ".venv",
    "poetry.lock",
    "__pycache__",
    "sdk/go_",
    "web",
    "pyproject.toml",
    "sdk/py_protocol/protocol/*/v1",
]
ignore = ["E999", "UP015", "S311", "S105"]
line-length = 120
target-version = "py311"
ignore-init-module-imports = true
task-tags = ["TODO"]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401", # Module imported but unused 
    "F403", # 'from module import *' used; unable to detect undefined names
]
"*_test.py" = [
    "S101", # Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
]
"*/test/*" = [
    "INP001", # is part of an implicit namespace package, missing __init__.py
]
"*test_*.py" = [
    "S101", # Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.pylint]
max-args = 4
max-branches = 5
max-statements = 5

[tool.ruff.pycodestyle]
max-doc-length = 160
ignore-overlong-task-comments = true

[tool.ruff.mccabe]
max-complexity = 20

[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = false
strict_equality = true
show_error_codes = true
warn_unreachable = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
namespace_packages = true
pretty = true
files = ["multiauth"]
exclude = [
    ".venv",
    ".git",
    ".tox",
    "dist",
    "build",
    "docs",
    "node_modules",
    "sdk/py_protocol/protocol/*",
]

[[tool.mypy.overrides]]
module = "opentelemetry.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "networkx.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "boto3.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "botocore.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "confluent_kafka.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aenum.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pydash.*"
ignore_missing_imports = true
