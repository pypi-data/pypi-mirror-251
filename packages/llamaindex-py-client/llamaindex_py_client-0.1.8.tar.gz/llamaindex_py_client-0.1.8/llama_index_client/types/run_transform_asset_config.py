# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class RunTransformAssetConfig(pydantic.BaseModel):
    """
    Dagster asset configuration for run_transform asset.
    """

    pipeline_id: str
    configured_transformation_id: str
    should_initiate_next_transform: typing.Optional[bool] = pydantic.Field(
        description="Whether to kick of the job to run the next configured transformation in the pipeline after this one succeeds"
    )
    loaded_file_ids: typing.Optional[typing.List[str]] = pydantic.Field(
        description="List of LoadedFile IDs to run the transform on. If None or empty, all LoadedFiles from connected data-sources will be used."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
