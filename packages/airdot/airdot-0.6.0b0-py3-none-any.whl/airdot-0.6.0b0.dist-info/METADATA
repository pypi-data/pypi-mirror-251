Metadata-Version: 2.1
Name: airdot
Version: 0.6.0b0
Summary: A code base for deploying ml api 
Home-page: https://github.com/airdot-io/airdot-Deploy/
Author: airdot-io
Author-email: airdot-io <abhinav199530singh@gmail.com>
License: MIT License
        
        Copyright (c) 2023 Airdot
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/airdot-io/airdot-Deploy
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.7.0
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: google-api-python-client ==2.78
Requires-Dist: google-cloud-core ==2.3
Requires-Dist: google-cloud-storage ==2.7
Requires-Dist: google-auth
Requires-Dist: boto ==2.49
Requires-Dist: botocore ==1.29
Requires-Dist: boto3 ==1.26
Requires-Dist: docker ==6.1
Requires-Dist: redis ==4.5
Requires-Dist: pydantic ==1.10.8
Requires-Dist: kubernetes
Requires-Dist: tabulate
Provides-Extra: dev
Requires-Dist: black ==22.6.0 ; extra == 'dev'
Requires-Dist: pytest ==7.1.2 ; extra == 'dev'
Requires-Dist: google-api-python-client ==2.78.0 ; extra == 'dev'
Requires-Dist: google-cloud-core ==2.3.2 ; extra == 'dev'
Requires-Dist: google-cloud-storage ==2.7.0 ; extra == 'dev'
Requires-Dist: google-auth ; extra == 'dev'
Requires-Dist: zstd ==1.5.2.6 ; extra == 'dev'
Requires-Dist: boto ==2.49.0 ; extra == 'dev'
Requires-Dist: botocore ==1.29.127 ; extra == 'dev'
Requires-Dist: boto3 ==1.26 ; extra == 'dev'
Requires-Dist: docker ==6.1.2 ; extra == 'dev'
Requires-Dist: redis ==4.5.5 ; extra == 'dev'
Requires-Dist: pydantic ==1.10.8 ; extra == 'dev'
Requires-Dist: kubernetes ==26 ; extra == 'dev'

# ðŸš€ Airdot Deployer


[![Python](https://img.shields.io/badge/PythonVersion-3.7%20%7C%203.8%20%7C%203.9-blue)](https://www.python.org/downloads/release/python-360/)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

Deploy your ML models in **minutes**, not **weeks**.

Detailed documentation can be found [here](https://airdot-io.github.io/airdot-deployer/)

Airdot Deployer will automatically:

1. Restructure your Python code (from Jupyter Notebook/local IDEs) into modules.
2. Builds a REST API around your code.
3. Conterize the app.
4. Spins up the required hardware (local or K8s or cloud).
5. Monitors for model/data drift and performance (in development)

## Take your ML model from Local to Production with one-line of code

```python
from airdot.deployer import Deployer
deployer_obj = Deployer().run(<your-ml-predictor>)
```

Once deployed, your model will be up and running on the intra/internet, accessible to your users. No more worrying about complex server setups or manual configuration. Airdot Deployer does all the heavy lifting for you.

```bash
curl -XPOST <url> -H 'Content-Type: application/json' -d '{"args": "some-value"}'
```

Whether you're a data scientist, developer, or tech enthusiast, Airdot Deployer empowers you to showcase your machine learning prowess and share your creations effortlessly.



## What does Airdot Deployer supports ?

* Local Deployment with Docker ![docker](/icon/docker.png)
* K8s Deployment with seldon core  ![core](/icon/seldon-core.webp)

# Want to try Airdot ? follow setup instructions

## ðŸ“‹ Setup Instructions

Before we get started, you'll need to have Docker, Docker Compose, and s2i installed on your machine. If you don't have these installed yet, no worries! Follow the steps below to get them set up:


### Docker Install
Please visit the appropriate links to install Docker on your machine:
- For macOS, visit [here](https://docs.docker.com/desktop/install/mac-install/)
- For Windows, visit [here](https://docs.docker.com/desktop/install/windows-install/)
- For Linux, visit [here](https://docs.docker.com/desktop/install/linux-install/)

#### S2I install
For Mac
You can either follow the installation instructions for Linux (and use the darwin-amd64 link) or you can just install source-to-image with Homebrew:

```$ brew install source-to-image```

For Linux just run following command

```bash
curl -s https://api.github.com/repos/openshift/source-to-image/releases/latest| grep browser_download_url | grep linux-amd64 | cut -d '"' -f 4  | wget -qi -
```
For Windows please follow instruction [here](https://github.com/openshift/source-to-image#for-windows)


## ðŸ’» Airdot Deployer Installation
Install the Airdot Deployer package using pip:

```bash
pip install "git+https://github.com/airdot-io/airdot-deployer.git@main#egg=airdot"
```

## or

```bash
pip install airdot
```

## ðŸŽ¯ Let's try out

### Local Deployments

#### Run following in terminal to setup minio and redis on your machine

```bash
docker network create minio-network && wget  https://raw.githubusercontent.com/airdot-io/airdot-deployer/main/docker-compose.yaml && docker-compose -p airdot up
```

### Train your model

```python
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from airdot.deployer import Deployer
from sklearn import datasets
import pandas as pd
import numpy as np

iris = datasets.load_iris()
iris = pd.DataFrame(
    data= np.c_[iris['data'], iris['target']],
    columns= iris['feature_names'] + ['target']
)
X = iris.drop(['target'], axis=1)
X = X.to_numpy()[:, (2,3)]
y = iris['target']
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.5, random_state=42)
log_reg = LogisticRegression()
log_reg.fit(X_train,y_train)
```

### Test your model

```python
def predict(value):
    return log_reg.predict(value)
```

### Deploy in one step ðŸ¤¯

```python
deployer_obj = Deployer().run(predict)
```

### Use your deployed Model

```bash
curl -XPOST http://127.0.0.1:8000 -H 'Content-Type: application/json' -d '{"value": [[4.7, 1.2]]}'
```

### Want to stop your deployment

```python
deployer.stop('predict') # to stop container
```

## Deployment on k8s using seldon-core deployment

**Note - This method will use your current cluster and uses seldon-core to deploy**

```python
from airdot import Deployer
import pandas as pd

# this is using default seldon-deployment configuration.
config = {
        'deployment_type':'seldon',
        'bucket_type':'minio',
        'image_uri':'<registry>/get_value_data:latest'
        }
deployer = Deployer(deployment_configuration=config) 


df2 = pd.DataFrame(data=[[10,20],[10,40]], columns=['1', '2'])
def get_value_data(cl_idx='1'):
    return df2[cl_idx].values.tolist()

deployer.run(get_value_data) 
```

#### you can also deploy using seldon custom configuration  

```python
from airdot import Deployer
import pandas as pd

# this is using default seldon-deployment configuration.
config = {
        'deployment_type':'seldon',
        'bucket_type':'minio',
        'image_uri':'<registry>/get_value_data:latest',
        'seldon_configuration': '' # your custom seldon configuration
        }
deployer = Deployer(deployment_configuration=config) 


df2 = pd.DataFrame(data=[[10,20],[10,40]], columns=['1', '2'])
def get_value_data(cl_idx='1'):
    return df2[cl_idx].values.tolist()

deployer.run(get_value_data) 
```
