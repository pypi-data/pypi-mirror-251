[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "pybind11>=2.9.2",
    "cmake>=3.22, !=3.25.0",  # cmake 3.25.0 is buggy and fails with OpenCV (see https://github.com/opencv/opencv/issues/22784)
    "scikit-build>=0.14.1",
    "ninja; platform_system!='Windows'",
    "patch>=1.16",
    "conan>=1.5",
    "distro<=1.7.0,>=1.0.2",
]
build-backend = "setuptools.build_meta"

[tool.isort]
profile = "black"



[tool.cibuildwheel]
build-verbosity = 1

# Target python versions:
build = ["cp310-*", "cp311-*", "cp312-*"]

# Tests
test-requires = "pytest"
test-command = "pytest {project}/tests"  # cibuildwheel doc says pytest {package}/tests !


#####################################
# macos wheels options
#####################################
[tool.cibuildwheel.macos]
# identify whether this is a M1 or intel
before-build = "uname -a"
# Skip trying to test arm64 builds on Intel Macs
# test-skip = ["*-macosx_arm64 *-macosx_universal2:arm64"]
#
# Skip trying to test x86_64 builds on Mac M1
# test-skip = ["*-macosx_x86_64 *-macosx_universal2:x86_64"]
# test-skip = ["*-macosx_arm64 *-macosx_universal2:arm64"]
test-skip = ["*"]
# Environment variables
# IMGUIBUNDLE_OPENCV_FETCH_SOURCE => Will fetch, build and install a very-minimalist OpenCV
environment = { MACOSX_DEPLOYMENT_TARGET="11.0" }

# Architectures
# -------------
# archs = ["universal2"] # building universal2 fails miserably at this time: see comment in external/immvision/find_opencv.cmake
# So, we build separately for x86_64 and arm64
# archs = ["x86_64", "arm64"]
# Actually, we (temporarily) do not build for arm64 on github's CI, since it succeeds to build a wheel,
# however the resulting wheel wants to link to intel IPP, which is not available on arm.
# => mac arm61 will need to be built and uploaded from an M1 mac
archs = ["x86_64"]

#####################################
# linux wheels options
#####################################
[tool.cibuildwheel.linux]
skip = ["*i686"]
test-skip = ["cp311-musllinux_x86_64"] #  opencv-python not yet available there
# Environment variables
# IMGUIBUNDLE_OPENCV_FETCH_SOURCE => Will fetch, build and install a very-minimalist OpenCV
# environment = { IMGUIBUNDLE_OPENCV_FETCH_SOURCE="ON" }
environment-pass = ["IMMVISION_OPENCV_GIT_REPO"]  # pass alternative git repo to docker build containers


# Install glfw dev packages on manylinux:
# --------------------------------------
# https://www.glfw.org/docs/3.3/compile.html#compile_deps
# https://iscinumpy.dev/post/cibuildwheel-2-2-0/
# cibuildwheel has added a new platform: musllinux
# Remember, the manylinux1 image has been in maintenance mode, has no support for Python 3.10,
# and will be fully retired at the end of 2021.
#
# This also means that installing things inside the images can vary even further;
# * manylinux1 (CentOS 5), manylinux2010 (CentOS 6), and manylinux2014 (CentOS 7) all use yum;
#     => yum install -y libXcursor-devel libXi-devel libXinerama-devel libXrandr-devel
# * manylinux_2_24 (Debian 8) uses apt (and is stuck on GCC 6),
#     => apt install xorg-dev
# * musllinux_1_1 MUSL based distributions of Linux (like Alpine). uses apk
before-all = "yum install -y libXcursor-devel libXi-devel libXinerama-devel libXrandr-devel"
[[tool.cibuildwheel.overrides]]
select = "*-musllinux*"
before-all = "apk add xorg-server-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev"

#####################################
# windows wheels options
#####################################
[tool.cibuildwheel.windows]
skip = ["*win32"]

# Environment variables
# IMGUIBUNDLE_OPENCV_FETCH_SOURCE => Download a precompiled version of opencv4.6.0
# environment = { IMGUIBUNDLE_OPENCV_WIN_USE_OFFICIAL_PREBUILT_460="ON" }
