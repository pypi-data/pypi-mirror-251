{"version":3,"file":"lib_jupyterlab_index_js.cae8abdb2d1cf6a191fc.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACoJ;AACjB;AACnI,8BAA8B,mHAA2B,CAAC,4HAAqC;AAC/F;AACA,gDAAgD,wBAAwB,GAAG,oBAAoB,gCAAgC,GAAG,SAAS,iFAAiF,YAAY,OAAO,KAAK,YAAY,gCAAgC,wBAAwB,GAAG,oBAAoB,gCAAgC,GAAG,qBAAqB;AACvY;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;ACPvC;AACoJ;AACjB;AACW;AAC9I,8BAA8B,mHAA2B,CAAC,4HAAqC;AAC/F,0BAA0B,qHAAiC;AAC3D;AACA,mDAAmD,kEAAkE;AACrH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACT+C;AAC1C;AACmB;AACX;AACF;AACA;AACX;AACF;AACE;AACvC;AACA,YAAY,oBAAoB,EAAE,0DAAQ;AAC1C;AACA,kCAAkC,+CAAQ;AAC1C,IAAI,gDAAS;AACb,QAAQ,+DAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,8FAA8F,OAAO;AACrG,SAAS;AACT,KAAK;AACL,YAAY,sDAAI,CAAC,uDAAS,IAAI,UAAU,sDAAI,CAAC,qDAAa,IAAI,UAAU,sDAAI,CAAC,qDAAU,IAAI,UAAU,uDAAK,CAAC,qDAAG,IAAI,WAAW,sDAAI,CAAC,qDAAG,IAAI,UAAU,uDAAK,CAAC,8DAAY,IAAI,iCAAiC,sDAAI,CAAC,mEAAiB,IAAI,+FAA+F,oBAAoB,cAAc,2BAA2B,GAAG,sDAAI,CAAC,mEAAiB,IAAI,2FAA2F,sDAAI,CAAC,8DAAQ,IAAI,eAAe,oBAAoB,oBAAoB,cAAc,qBAAqB,IAAI,GAAG,GAAG,uDAAK,CAAC,qDAAG,IAAI,iCAAiC,sDAAI,CAAC,qDAAO,IAAI,mBAAmB,sDAAI,CAAC,uDAAQ,IAAI,kBAAkB,IAAI,IAAI,GAAG,GAAG,GAAG;AAClvB;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;;ACxBoB;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClC0C;AACgB;AAC4B;AACvB;AACd;AACkB;AAC5B;AACM;AACJ;AACM;AACU;AAC1B;AACxB,yBAAyB,oDAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B,eAAe,yEAAgB,EAAE,2DAAS,EAAE,oEAAe;AAC3D;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA,4BAA4B,+DAAa;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,iDAAK;AAC5B,qBAAqB;AACrB,qBAAqB;AACrB,yBAAyB;AACzB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oCAAoC,uDAAiB;AACrD,mCAAmC,gEAAc,GAAG,SAAS;AAC7D;AACA,oCAAoC,uFAAI;AACxC;AACA;AACA;AACA,SAAS;AACT;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,QAAQ,qDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,8FAA8F,OAAO;AACrG,SAAS;AACT;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;AC/FiD;AACpB;AACa;AACvB;AAClC,gCAAgC,6DAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAI,CAAC,uDAAS,IAAI,UAAU,sDAAI,CAAC,oDAAW,IAAI,SAAS,iFAA2B,aAAa,GAAG;AACpH;AACA;;;;;;;;;;;;;;;;;;;;;;AChBkD;AACR;AA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","sources":["webpack://@datalayer/jupyterpool/./style/base.css","webpack://@datalayer/jupyterpool/./style/index.css","webpack://@datalayer/jupyterpool/./lib/Jupyterpool.js","webpack://@datalayer/jupyterpool/./lib/jupyterlab/handler.js","webpack://@datalayer/jupyterpool/./lib/jupyterlab/index.js","webpack://@datalayer/jupyterpool/./lib/jupyterlab/widget.js","webpack://@datalayer/jupyterpool/./lib/state/mobx.js","webpack://@datalayer/jupyterpool/./lib/state/zustand.js","webpack://@datalayer/jupyterpool/./lib/tabs/AboutTab.js","webpack://@datalayer/jupyterpool/./lib/tabs/PoolTab.js","webpack://@datalayer/jupyterpool/./lib/timer/TimerView.js","webpack://@datalayer/jupyterpool/./lib/utils/Utils.js","webpack://@datalayer/jupyterpool/./style/index.css?bd75"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  overflow-y: visible;\\n}\\n\\n.dla-Container {\\n  overflow-y: auto !important;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/base.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,mBAAmB;AACrB;;AAEA;EACE,2BAA2B;AAC7B\",\"sourcesContent\":[\"body {\\n  overflow-y: visible;\\n}\\n\\n.dla-Container {\\n  overflow-y: auto !important;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/cjs.js!./base.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { ThemeProvider, BaseStyles, Box } from '@primer/react';\nimport { UnderlineNav } from '@primer/react/drafts';\nimport { PoolIcon } from '@datalayer/icons-react';\nimport { requestAPI } from './jupyterlab/handler';\nimport useStore from './state/zustand';\nimport PoolTab from './tabs/PoolTab';\nimport AboutTab from './tabs/AboutTab';\nconst Jupyterpool = (props) => {\n    const { setTab, getIntTab } = useStore();\n    const intTab = getIntTab();\n    const [version, setVersion] = useState('');\n    useEffect(() => {\n        requestAPI('config')\n            .then(data => {\n            setVersion(data.version);\n        })\n            .catch(reason => {\n            console.error(`Error while accessing the jupyter server jupyterpool extension.\\n${reason}`);\n        });\n    }, []);\n    return (_jsx(_Fragment, { children: _jsx(ThemeProvider, { children: _jsx(BaseStyles, { children: _jsxs(Box, { children: [_jsx(Box, { children: _jsxs(UnderlineNav, { \"aria-label\": \"pool\", children: [_jsx(UnderlineNav.Item, { \"aria-label\": \"pool-pool\", \"aria-current\": intTab === 0 ? \"page\" : undefined, onSelect: e => { e.preventDefault(); setTab(0.0); }, children: \"Jupyterpool\" }), _jsx(UnderlineNav.Item, { \"aria-label\": \"pool-about\", \"aria-current\": intTab === 1 ? \"page\" : undefined, icon: () => _jsx(PoolIcon, { colored: true }), onSelect: e => { e.preventDefault(); setTab(1.0); }, children: \"About\" })] }) }), _jsxs(Box, { m: 3, children: [intTab === 0 && _jsx(PoolTab, {}), intTab === 1 && _jsx(AboutTab, { version: version })] })] }) }) }) }));\n};\nexport default Jupyterpool;\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterpool', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { Token } from '@lumino/coreutils';\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { MainAreaWidget, ICommandPalette, WidgetTracker } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport icon from '@datalayer/icons-react/data2/PoolIconJupyterLab';\nimport { requestAPI } from './handler';\nimport { JupyterpoolWidget } from './widget';\nimport { Timer } from \"../state/zustand\";\nimport { TimerView } from \"../timer/TimerView\";\nimport { mobxTimer, MobxTimerView } from \"../state/mobx\";\nimport '../../style/index.css';\nexport const IJupyterpool = new Token('@datalayer/jupyterpool:plugin');\n/**\n * The command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.create = 'create-jupyterpool-widget';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the @datalayer/jupyterpool extension.\n */\nconst plugin = {\n    id: '@datalayer/jupyterpool:plugin',\n    autoStart: true,\n    requires: [ICommandPalette],\n    optional: [ISettingRegistry, ILauncher, ILayoutRestorer],\n    provides: IJupyterpool,\n    activate: (app, palette, settingRegistry, launcher, restorer) => {\n        const { commands } = app;\n        const command = CommandIDs.create;\n        const tracker = new WidgetTracker({\n            namespace: 'jupyterpool',\n        });\n        if (restorer) {\n            void restorer.restore(tracker, {\n                command,\n                name: () => 'jupyterpool',\n            });\n        }\n        const jupyterJupyterpool = {\n            timer: new Timer(),\n            TimerView,\n            mobxTimer,\n            MobxTimerView,\n        };\n        commands.addCommand(command, {\n            caption: 'Show Jupyterpool',\n            label: 'Jupyterpool',\n            icon,\n            execute: () => {\n                const content = new JupyterpoolWidget(app, jupyterJupyterpool);\n                const widget = new MainAreaWidget({ content });\n                widget.title.label = 'Jupyterpool';\n                widget.title.icon = icon;\n                app.shell.add(widget, 'main');\n                tracker.add(widget);\n            }\n        });\n        const category = 'Datalayer';\n        palette.addItem({ command, category });\n        const settingsUpdated = (settings) => {\n            const showInLauncher = settings.get('showInLauncher').composite;\n            if (launcher && showInLauncher) {\n                launcher.add({\n                    command,\n                    category,\n                    rank: 5.3,\n                });\n            }\n        };\n        if (settingRegistry) {\n            settingRegistry\n                .load(plugin.id)\n                .then(settings => {\n                console.log('@datalayer/jupyterpool settings loaded:', settings.composite);\n                settingsUpdated(settings);\n                settings.changed.connect(settingsUpdated);\n            })\n                .catch(reason => {\n                console.error('Failed to load settings for @datalayer/jupyterpool.', reason);\n            });\n        }\n        requestAPI('config')\n            .then(data => {\n            console.log(data);\n        })\n            .catch(reason => {\n            console.error(`Error while accessing the jupyter server jupyterpool extension.\\n${reason}`);\n        });\n        console.log('JupyterLab plugin @datalayer/jupyterpool:plugin is activated.');\n        return jupyterJupyterpool;\n    }\n};\nexport default plugin;\n","import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { JupyterLabAppAdapter } from '@datalayer/jupyter-react';\nimport Jupyterpool from '../Jupyterpool';\nexport class JupyterpoolWidget extends ReactWidget {\n    _app;\n    //  private _jupyterJupyterpool: IJupyterpool;\n    constructor(app, jupyterJupyterpool) {\n        super();\n        this._app = app;\n        //    this._jupyterJupyterpool = jupyterJupyterpool;\n        this.addClass('dla-Container');\n    }\n    render() {\n        return (_jsx(_Fragment, { children: _jsx(Jupyterpool, { adapter: JupyterLabAppAdapter.create(this._app) }) }));\n    }\n}\n","import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { makeAutoObservable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nexport class MobxTimer {\n    secondsPassed = 0;\n    constructor() {\n        makeAutoObservable(this);\n    }\n    reset() {\n        this.secondsPassed = 0;\n    }\n    increaseTimer() {\n        this.secondsPassed += 1;\n    }\n}\nexport const mobxTimer = new MobxTimer();\nsetInterval(() => {\n    mobxTimer.increaseTimer();\n}, 1000);\nexport const MobxTimerView = observer(({ mobxTimer }) => (_jsxs(\"button\", { onClick: () => mobxTimer.reset(), children: [\"Jupyterpool Mobx: \", mobxTimer.secondsPassed] })));\n","import { create } from 'zustand';\nexport class Timer {\n    _secondsPassed = 0;\n    constructor() {\n    }\n    reset() {\n        this._secondsPassed = 0;\n    }\n    increaseTimer() {\n        this._secondsPassed += 1;\n    }\n    get secondsPassed() {\n        return this._secondsPassed;\n    }\n}\nexport const useStore = create((set, get) => ({\n    tab: 0.0,\n    getIntTab: () => Math.floor(get().tab),\n    setTab: (tab) => set((state) => ({ tab })),\n    timer: new Timer(),\n    increaseTimer: () => {\n        get().timer.increaseTimer();\n        set((state) => ({ secondsPassed: get().timer.secondsPassed }));\n    },\n    secondsPassed: 0,\n}));\nexport default useStore;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Pagehead, Label, Text, Link, Box } from '@primer/react';\nimport { ECharlesIcon } from '@datalayer/icons-react/eggs';\nconst AboutTab = (props) => {\n    const { version } = props;\n    const [egg, setEgg] = useState(false);\n    return (_jsxs(_Fragment, { children: [_jsxs(Pagehead, { as: \"h2\", children: [\"\\uD83E\\uDE90 \\uD83C\\uDFB1 Jupyterpool\", _jsx(Label, { sx: { marginLeft: 1 }, children: version })] }), _jsx(Box, { children: _jsx(Text, { children: \"A pool of Jupyter pre-warmed and pre-mounted kernels.\" }) }), _jsx(Box, { mt: 3, children: !egg ? (_jsx(\"img\", { src: \"https://assets.datalayer.tech/releases/datalayer-0.3.0-black-snake_1024.png\", onClick: e => setEgg(true), style: { width: '100%' } })) : (_jsx(ECharlesIcon, { size: 300, onClick: e => setEgg(false) })) }), _jsx(Box, { children: _jsx(Link, { href: \"https://datalayer.tech/docs/releases/0.3.0-black-snake\", target: \"_blank\", children: _jsx(Text, { as: \"h4\", children: \"Datalayer 0.3.0 Black Snake Release\" }) }) }), _jsx(Box, { children: _jsx(Link, { href: \"https://github.com/datalayer/jupyterpool\", target: \"_blank\", children: _jsx(Text, { as: \"h4\", children: \"Source code\" }) }) })] }));\n};\nexport default AboutTab;\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { Box, Text } from '@primer/react';\nimport { Table, DataTable } from '@primer/react/drafts';\nimport { requestAPI } from '../jupyterlab/handler';\nimport { strip } from '../utils/Utils';\nconst PoolTab = () => {\n    const [images, setImages] = useState(new Array());\n    useEffect(() => {\n        requestAPI('images')\n            .then(data => {\n            const images = data.images.map((image, id) => {\n                return {\n                    id,\n                    ...image,\n                };\n            });\n            setImages(images.filter(image => image.RepoTags.length > 0));\n        })\n            .catch(reason => {\n            console.error(`Error while accessing the jupyter server jupyterpool extension.\\n${reason}`);\n        });\n    }, []);\n    return (_jsx(_Fragment, { children: _jsx(Box, { children: _jsxs(Table.Container, { children: [_jsx(Table.Title, { as: \"h2\", id: \"images\", children: \"Jupyterpool images\" }), _jsx(Table.Subtitle, { as: \"p\", id: \"images-subtitle\", children: \"List of Jupyterpool images.\" }), _jsx(DataTable, { \"aria-labelledby\": \"images\", \"aria-describedby\": \"images-subtitle\", data: images, columns: [\n                            {\n                                header: 'RepoTags',\n                                field: 'RepoTags',\n                                renderCell: row => _jsx(_Fragment, { children: row.RepoTags.map(repoTag => _jsx(Box, { children: _jsx(Text, { children: strip(repoTag, 40) }) })) })\n                            },\n                            {\n                                header: 'Size',\n                                field: 'Size',\n                                renderCell: row => _jsx(Text, { children: row.Size })\n                            },\n                            {\n                                header: 'Os',\n                                field: 'Os',\n                                renderCell: row => _jsx(Text, { children: row.Os })\n                            },\n                        ] })] }) }) }));\n};\nexport default PoolTab;\n","import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport useStore from '../state/zustand';\nexport const TimerView = () => {\n    const { timer, increaseTimer, secondsPassed } = useStore();\n    useEffect(() => {\n        setInterval(() => {\n            increaseTimer();\n        }, 1000);\n    }, []);\n    return (_jsxs(\"button\", { onClick: () => timer.reset(), children: [\"Jupyterpool: \", secondsPassed] }));\n};\n","export const strip = (s, max) => {\n    if (s.length > max) {\n        return s.slice(0, max) + '...';\n    }\n    return s;\n};\n","\n      import API from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/@jupyterlab/builder/node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/cjs.js!./index.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/@jupyterlab/builder/node_modules/css-loader/dist/cjs.js!./index.css\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":[],"sourceRoot":""}