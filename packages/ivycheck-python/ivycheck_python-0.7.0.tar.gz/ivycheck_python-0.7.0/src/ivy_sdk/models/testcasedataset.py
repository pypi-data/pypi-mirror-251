"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from .evaluationdataset import EvaluationDataset
from .testcase import TestCase
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from ivy_sdk import utils
from typing import List, Optional


@dataclasses.dataclass
class TestConfig:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestCaseDataset:
    created_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by') }})
    evaluation_datasets: List[EvaluationDataset] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evaluation_datasets') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    test_cases: List[TestCase] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test_cases') }})
    time_created: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_created'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    time_updated: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_updated'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    updated_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_by') }})
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    prompt_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prompt_id') }})
    test_config: Optional[TestConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test_config') }})
    

