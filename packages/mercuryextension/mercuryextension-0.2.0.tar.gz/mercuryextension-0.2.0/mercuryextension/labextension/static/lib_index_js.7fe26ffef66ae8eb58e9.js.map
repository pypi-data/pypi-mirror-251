{"version":3,"file":"lib_index_js.7fe26ffef66ae8eb58e9.js","mappings":"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","sources":["webpack://@mljar/mercuryextension/./src/commands/index.ts","webpack://@mljar/mercuryextension/./src/icons.ts","webpack://@mljar/mercuryextension/./src/index.ts","webpack://@mljar/mercuryextension/./src/mercury/app/item/model.ts","webpack://@mljar/mercuryextension/./src/mercury/app/item/widget.ts","webpack://@mljar/mercuryextension/./src/mercury/app/model.ts","webpack://@mljar/mercuryextension/./src/mercury/app/widget.ts","webpack://@mljar/mercuryextension/./src/mercury/factory.ts","webpack://@mljar/mercuryextension/./src/mercury/index.ts","webpack://@mljar/mercuryextension/./src/mercury/panel.ts","webpack://@mljar/mercuryextension/./src/mercury/toolbar/button.ts","webpack://@mljar/mercuryextension/./src/mercury/widget.ts","webpack://@mljar/mercuryextension/./src/widgets/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { ISessionContext, ISessionContextDialogs } from '@jupyterlab/apputils';\n\nimport { INotebookTracker, Notebook, NotebookActions } from '@jupyterlab/notebook';\n\nimport { ITranslator } from '@jupyterlab/translation';\n\nfunction runAllBelow(\n  notebook: Notebook,\n  sessionContext?: ISessionContext,\n  sessionDialogs?: ISessionContextDialogs,\n  translator?: ITranslator\n) {\n  if (!notebook.model || !notebook.activeCell) {\n    return Promise.resolve(false);\n  }\n  const cellIndex = notebook.activeCellIndex;\n  notebook.activeCellIndex = notebook.activeCellIndex + 1;\n  const promise = NotebookActions.runAllBelow(\n    notebook,\n    sessionContext,\n    sessionDialogs,\n    translator\n  );\n  promise.finally(() => {\n    notebook.activeCellIndex = cellIndex;\n  });\n}\nexport const commands: JupyterFrontEndPlugin<void> = {\n  id: '@mljar/mercury-commands',\n  description: 'Commands used in Mercury',\n  autoStart: true,\n  requires: [INotebookTracker],\n  activate: (app: JupyterFrontEnd, notebookTracker: INotebookTracker) => {\n    const commandID = '@mljar/mercury-execute-below';\n    app.commands.addCommand(commandID, {\n      label: 'Execute cells below',\n      execute: () => {\n        const nb = notebookTracker.currentWidget;\n        if (nb) {\n          console.log('Run all below');\n          runAllBelow(nb.content, nb.context.sessionContext);\n        }\n      }\n    });\n  }\n};\n","import { LabIcon } from '@jupyterlab/ui-components';\n\n// icon svg import statements\nimport party from '../style/icons/party.svg';\n\nexport const partyIcon = new LabIcon({\n  name: '@mljar/party-icon',\n  svgstr: party\n});\n","import { JupyterFrontEndPlugin } from '@jupyterlab/application';\n\nimport { mercury } from './mercury';\n\nimport { widgets } from './widgets';\n\nimport { commands } from './commands';\n\nconst plugins: JupyterFrontEndPlugin<any>[] = [mercury, widgets, commands];\n\nexport default plugins;\n","import { Widget } from '@lumino/widgets';\nimport { Signal } from '@lumino/signaling';\n\nexport class CellItemModel {\n  constructor(options: CellItemModel.IOptions) {\n    this._cellId = options.cellId;\n    this._sidebar = options.sidebar;\n  }\n\n  get cellId(): string {\n    return this._cellId;\n  }\n  get sidebar(): boolean {\n    return this._sidebar;\n  }\n  dispose() {\n    Signal.clearData(this);\n  }\n  private _cellId = '';\n  // place cell in the sidebar or not\n  private _sidebar = false;\n}\n\nexport namespace CellItemModel {\n  export interface IOptions {\n    cellId: string;\n    cellWidget: Widget;\n    /**\n     * Place cell in the sidebar.\n     */\n    sidebar: boolean;\n  }\n}\n","import { Widget, Panel } from '@lumino/widgets';\n\nimport { CellItemModel } from './model';\n\nexport class CellItemWidget extends Panel {\n  constructor(cell: Widget, options: CellItemModel.IOptions) {\n    super();\n    this.removeClass('lm-Widget');\n    this.removeClass('p-Widget');\n    this.addClass('cell-item-widget');\n\n    this._model = new CellItemModel(options);\n\n    const content = new Panel();\n    content.addClass('cell-item-content');\n\n    cell.addClass('cell-item-widget');\n    content.addWidget(cell);\n    this.addWidget(content);\n  }\n\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n    this._model.dispose();\n    super.dispose();\n  }\n\n  get cellId(): string {\n    return this._model.cellId;\n  }\n\n  get sidebar(): boolean {\n    return this._model.sidebar;\n  }\n\n  private _model: CellItemModel;\n}\n","import {\n  CellList,\n  INotebookModel,\n  NotebookPanel,\n  StaticNotebook\n} from '@jupyterlab/notebook';\n\nimport {\n  ICellModel,\n  CodeCell,\n  CodeCellModel,\n  MarkdownCell,\n  MarkdownCellModel,\n  RawCell,\n  RawCellModel,\n  InputArea\n} from '@jupyterlab/cells';\n\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { IEditorMimeTypeService } from '@jupyterlab/codeeditor';\n\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport { SimplifiedOutputArea } from '@jupyterlab/outputarea';\n\nimport { CellChange, YNotebook, createMutex } from '@jupyter/ydoc';\n\nimport { Widget } from '@lumino/widgets';\n\nimport { Signal, ISignal } from '@lumino/signaling';\n\nimport * as Y from 'yjs';\n\nimport { CellItemWidget } from './item/widget';\n\nexport class AppModel {\n  constructor(options: AppModel.IOptions) {\n    this._context = options.context;\n    this.rendermime = options.rendermime;\n    this.contentFactory = options.contentFactory;\n    this.mimeTypeService = options.mimeTypeService;\n    this._editorConfig = options.editorConfig;\n    this._notebookConfig = options.notebookConfig;\n\n    this._ready = new Signal<this, null>(this);\n    this._cellRemoved = new Signal<this, CellChange>(this);\n    this._stateChanged = new Signal<this, null>(this);\n    this._contentChanged = new Signal<this, null>(this);\n\n    this._context.sessionContext.ready.then(() => {\n      const ymodel = this._context.model.sharedModel as YNotebook;\n      this._ystate = ymodel.ystate;\n      if (this._ystate.get('executed') !== true) {\n        ymodel.transact(() => {\n          this._ystate.set('executed', false);\n        }, false);\n      }\n\n      this._context.save().then(v => {\n        this._ready.emit(null);\n      });\n    });\n\n    this._context.model.contentChanged.connect(this._updateCells, this);\n  }\n\n  /**\n   * A signal emitted when the model is ready.\n   */\n  get ready(): ISignal<this, null> {\n    return this._ready;\n  }\n\n  /**\n   * A signal emitted when a cell is removed.\n   */\n  get cellRemoved(): ISignal<this, CellChange> {\n    return this._cellRemoved;\n  }\n\n  /**\n   * A signal emitted when the model state changes.\n   */\n  get stateChanged(): ISignal<this, null> {\n    return this._stateChanged;\n  }\n\n  /**\n   * A signal emitted when the model content changes.\n   */\n  get contentChanged(): ISignal<this, null> {\n    return this._contentChanged;\n  }\n\n  /**\n   * The rendermime instance for this context.\n   */\n  readonly rendermime: IRenderMimeRegistry;\n  /**\n   * A notebook panel content factory.\n   */\n  readonly contentFactory: NotebookPanel.IContentFactory;\n  /**\n   * The service used to look up mime types.\n   */\n  readonly mimeTypeService: IEditorMimeTypeService;\n\n  /**\n   * A config object for cell editors.\n   */\n  get editorConfig(): StaticNotebook.IEditorConfig {\n    return this._editorConfig;\n  }\n  /**\n   * A config object for cell editors.\n   *\n   * @param value - A `StaticNotebook.IEditorConfig`.\n   */\n  set editorConfig(value: StaticNotebook.IEditorConfig) {\n    this._editorConfig = value;\n  }\n\n  /**\n   * A config object for notebook widget.\n   */\n  get notebookConfig(): StaticNotebook.INotebookConfig {\n    return this._notebookConfig;\n  }\n  /**\n   * A config object for notebook widget.\n   *\n   * @param value - A `StaticNotebook.INotebookConfig`.\n   */\n  set notebookConfig(value: StaticNotebook.INotebookConfig) {\n    this._notebookConfig = value;\n  }\n\n  set executed(value: boolean) {\n    this._ystate.set('executed', value);\n  }\n\n  /**\n   * The Notebook's cells.\n   */\n  get cells(): CellList {\n    return this._context.model.cells;\n  }\n\n  /**\n   * Ids of the notebooks's deleted cells.\n   */\n  get deletedCells(): string[] {\n    return this._context.model.deletedCells;\n  }\n\n  /**\n   * Create a new cell widget from a `CellModel`.\n   *\n   * @param cellModel - `ICellModel`.\n   */\n  public createCell(cellModel: ICellModel, hideOutput = false): CellItemWidget {\n    let item: Widget;\n    let sidebar = false;\n\n    switch (cellModel.type) {\n      case 'code': {\n        const codeCell = new CodeCell({\n          model: cellModel as CodeCellModel,\n          rendermime: this.rendermime,\n          contentFactory: this.contentFactory,\n          editorConfig: this._editorConfig.code\n        });\n        codeCell.readOnly = true;\n        for (let i = 0; i < codeCell.outputArea.model.length; i++) {\n          const output = codeCell.outputArea.model.get(i);\n          const data = output.data;\n          if ('application/vnd.jupyter.widget-view+json' in data) {\n            sidebar = true;\n          }\n        }\n        if (sidebar && !hideOutput) {\n          item = new SimplifiedOutputArea({\n            model: codeCell.outputArea.model,\n            rendermime: codeCell.outputArea.rendermime,\n            contentFactory: codeCell.outputArea.contentFactory\n          });\n        } else {\n          item = codeCell;\n          if (hideOutput) {\n            const opts = {\n              config: this._editorConfig.code\n            };\n\n            //codeCell.inputArea\n            //  ?.contentFactory as InputArea.IContentFactory, // this.contentFactory,\n            item = new InputArea({\n              model: cellModel as CodeCellModel,\n              contentFactory: this.contentFactory,\n              editorOptions: opts\n            });\n          }\n        }\n\n        break;\n      }\n      case 'markdown': {\n        const markdownCell = new MarkdownCell({\n          model: cellModel as MarkdownCellModel,\n          rendermime: this.rendermime,\n          contentFactory: this.contentFactory,\n          editorConfig: this._editorConfig.markdown\n        });\n        markdownCell.inputHidden = false;\n        markdownCell.rendered = true;\n        Private.removeElements(markdownCell.node, 'jp-Collapser');\n        Private.removeElements(markdownCell.node, 'jp-InputPrompt');\n        item = markdownCell;\n        break;\n      }\n      default: {\n        const rawCell = new RawCell({\n          model: cellModel as RawCellModel,\n          contentFactory: this.contentFactory,\n          editorConfig: this._editorConfig.raw\n        });\n        rawCell.inputHidden = false;\n        Private.removeElements(rawCell.node, 'jp-Collapser');\n        Private.removeElements(rawCell.node, 'jp-InputPrompt');\n        item = rawCell;\n        break;\n      }\n    }\n    const options = {\n      cellId: cellModel.id,\n      cellWidget: item,\n      sidebar\n    };\n    const widget = new CellItemWidget(item, options);\n    return widget;\n  }\n\n  /**\n   * Execute a CodeCell.\n   *\n   * @param cell - `ICellModel`.\n   */\n  public execute(cell: ICellModel): void {\n    if (cell.type !== 'code' || this._ystate.get('executed')) {\n      return;\n    }\n    const codeCell = new CodeCell({\n      model: cell as CodeCellModel,\n      rendermime: this.rendermime,\n      contentFactory: this.contentFactory,\n      editorConfig: this._editorConfig.code\n    });\n\n    SimplifiedOutputArea.execute(\n      cell.sharedModel.source,\n      codeCell.outputArea,\n      this._context.sessionContext\n    )\n      .then(resp => {\n        if (\n          resp?.header.msg_type === 'execute_reply' &&\n          resp.content.status === 'ok'\n        ) {\n          (cell as CodeCellModel).executionCount = resp.content.execution_count;\n        }\n      })\n      .catch(reason => console.error(reason));\n  }\n\n  private readonly _mutex = createMutex();\n\n  /**\n   * Update cells.\n   */\n  private _updateCells(): void {\n    this._mutex(() => {\n      this._contentChanged.emit(null);\n      console.log('content changed');\n    });\n  }\n\n  private _context: DocumentRegistry.IContext<INotebookModel>;\n  private _editorConfig: StaticNotebook.IEditorConfig;\n  private _notebookConfig: StaticNotebook.INotebookConfig;\n  private _ystate: Y.Map<any> = new Y.Map();\n\n  private _ready: Signal<this, null>;\n  private _cellRemoved: Signal<this, CellChange>;\n  private _stateChanged: Signal<this, null>;\n  private _contentChanged: Signal<this, null>;\n}\n\nexport namespace AppModel {\n  export interface IOptions {\n    /**\n     * The Notebook context.\n     */\n    context: DocumentRegistry.IContext<INotebookModel>;\n    /**\n     * The rendermime instance for this context.\n     */\n    rendermime: IRenderMimeRegistry;\n    /**\n     * A notebook panel content factory.\n     */\n    contentFactory: NotebookPanel.IContentFactory;\n    /**\n     * The service used to look up mime types.\n     */\n    mimeTypeService: IEditorMimeTypeService;\n    /**\n     * A config object for cell editors\n     */\n    editorConfig: StaticNotebook.IEditorConfig;\n    /**\n     * A config object for notebook widget\n     */\n    notebookConfig: StaticNotebook.INotebookConfig;\n  }\n}\n\n/**\n * A namespace for private module data.\n */\nnamespace Private {\n  /**\n   * Remove children by className from an HTMLElement.\n   */\n  export function removeElements(node: HTMLElement, className: string): void {\n    const elements = node.getElementsByClassName(className);\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].remove();\n    }\n  }\n}\n","import { Panel } from '@lumino/widgets';\nimport { Message } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { AppModel } from './model';\nimport { CellItemWidget } from './item/widget';\n\nexport class AppWidget extends Panel {\n  private _left: Panel;\n  private _right: Panel;\n  constructor(model: AppModel) {\n    super();\n    this.id = 'mercury-main-panel';\n    this.addClass('mercury-main-panel');\n    this._model = model;\n\n    this._model.ready.connect(() => {\n      this._initCellItems();\n    });\n\n    this._left = new Panel();\n    this._right = new Panel();\n    this._left.addClass('mercury-left-panel');\n    this._right.addClass('mercury-right-panel');\n\n    this.addWidget(this._left);\n    this.addWidget(this._right);\n  }\n\n  private _initCellItems(): void {\n    const cells = this._model.cells;\n    for (let i = 0; i < cells?.length; i++) {\n      const model = cells.get(i);\n      const item = this._model.createCell(model);\n      this._cellItems.push(item);\n      if (item.sidebar) {\n        this._left.addWidget(item);\n        const item_only_input = this._model.createCell(model, true);\n        this._right.addWidget(item_only_input);\n        this._cellItems.push(item_only_input);\n      } else {\n        this._right.addWidget(item);\n      }\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    Signal.clearData(this);\n    super.dispose();\n  }\n\n  /**\n   * Handle `after-attach` messages sent to the widget.\n   *\n   * ### Note\n   * Add event listeners for the drag and drop event.\n   */\n  protected onAfterAttach(msg: Message): void {\n    super.onAfterAttach(msg);\n  }\n\n  /**\n   * Handle `before-detach` messages sent to the widget.\n   *\n   * ### Note\n   * Remove event listeners for the drag and drop event.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    super.onBeforeDetach(msg);\n  }\n\n  get cellWidgets(): CellItemWidget[] {\n    return this._cellItems;\n  }\n\n  executeCellItems(): void {\n    const cells = this._model.cells;\n    this._model.executed = false;\n    for (let i = 0; i < cells?.length; i++) {\n      const model = cells.get(i);\n      this._model.execute(model);\n    }\n    this._model.executed = true;\n  }\n\n  private _model: AppModel;\n  private _cellItems: CellItemWidget[] = [];\n}\n","import { DocumentRegistry, ABCWidgetFactory } from '@jupyterlab/docregistry';\n\nimport {\n  INotebookModel,\n  NotebookPanel,\n  StaticNotebook\n} from '@jupyterlab/notebook';\n\nimport {\n  IEditorFactoryService,\n  IEditorMimeTypeService\n} from '@jupyterlab/codeeditor';\n\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { MercuryWidget } from './widget';\n\nimport { MercuryPanel } from './panel';\n\nexport class MercuryWidgetFactory extends ABCWidgetFactory<\n  MercuryWidget,\n  INotebookModel\n> {\n  constructor(options: MercuryWidgetFactory.IOptions<MercuryWidget>) {\n    super(options);\n    this.rendermime = options.rendermime;\n    this.contentFactory =\n      options.contentFactory ||\n      new NotebookPanel.ContentFactory({\n        editorFactory: options.editorFactoryService.newInlineEditor\n      });\n    this.mimeTypeService = options.mimeTypeService;\n    this._editorConfig =\n      options.editorConfig || StaticNotebook.defaultEditorConfig;\n    this._notebookConfig =\n      options.notebookConfig || StaticNotebook.defaultNotebookConfig;\n  }\n\n  /*\n   * The rendermime instance.\n   */\n  readonly rendermime: IRenderMimeRegistry;\n\n  /**\n   * The content factory used by the widget factory.\n   */\n  readonly contentFactory: NotebookPanel.IContentFactory;\n\n  /**\n   * The service used to look up mime types.\n   */\n  readonly mimeTypeService: IEditorMimeTypeService;\n\n  /**\n   * A configuration object for cell editor settings.\n   */\n  get editorConfig(): StaticNotebook.IEditorConfig {\n    return this._editorConfig;\n  }\n  set editorConfig(value: StaticNotebook.IEditorConfig) {\n    this._editorConfig = value;\n  }\n\n  /**\n   * A configuration object for notebook settings.\n   */\n  get notebookConfig(): StaticNotebook.INotebookConfig {\n    return this._notebookConfig;\n  }\n  set notebookConfig(value: StaticNotebook.INotebookConfig) {\n    this._notebookConfig = value;\n  }\n\n  protected createNewWidget(\n    context: DocumentRegistry.IContext<INotebookModel>,\n    source?: MercuryWidget\n  ): MercuryWidget {\n    const options = {\n      context: context,\n      rendermime: source\n        ? source.content.rendermime\n        : this.rendermime.clone({ resolver: context.urlResolver }),\n      contentFactory: this.contentFactory,\n      mimeTypeService: this.mimeTypeService,\n      editorConfig: source ? source.content.editorConfig : this._editorConfig,\n      notebookConfig: source\n        ? source.content.notebookConfig\n        : this._notebookConfig\n    };\n    return new MercuryWidget(context, new MercuryPanel(options));\n  }\n\n  private _editorConfig: StaticNotebook.IEditorConfig;\n  private _notebookConfig: StaticNotebook.INotebookConfig;\n}\n\nexport namespace MercuryWidgetFactory {\n  export interface IOptions<T extends MercuryWidget>\n    extends DocumentRegistry.IWidgetFactoryOptions<T> {\n    /*\n     * A rendermime instance.\n     */\n    rendermime: IRenderMimeRegistry;\n\n    /**\n     * A notebook panel content factory.\n     */\n    contentFactory: NotebookPanel.IContentFactory;\n\n    /**\n     * The service used to look up mime types.\n     */\n    mimeTypeService: IEditorMimeTypeService;\n\n    /**\n     * The service used to create default panel.\n     */\n    editorFactoryService: IEditorFactoryService;\n\n    /**\n     * The notebook cell editor configuration.\n     */\n    editorConfig?: StaticNotebook.IEditorConfig;\n\n    /**\n     * The notebook configuration.\n     */\n    notebookConfig?: StaticNotebook.INotebookConfig;\n    notebookPanel: NotebookPanel | null;\n  }\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  ILayoutRestorer\n} from '@jupyterlab/application';\n\nimport { NotebookPanel, StaticNotebook } from '@jupyterlab/notebook';\n\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\n\nimport { IEditorServices } from '@jupyterlab/codeeditor';\n\nimport { WidgetTracker } from '@jupyterlab/apputils';\n\nimport { IMainMenu } from '@jupyterlab/mainmenu';\n\nimport { MercuryWidgetFactory } from './factory';\n\nimport { IMercuryTracker, MercuryWidget } from './widget';\n\nimport { OpenMercuryButton } from './toolbar/button';\n\nexport const mercury: JupyterFrontEndPlugin<IMercuryTracker> = {\n  id: '@mljar:mercury-extension',\n  autoStart: true,\n  provides: IMercuryTracker,\n  requires: [\n    NotebookPanel.IContentFactory,\n    IMainMenu,\n    IEditorServices,\n    IRenderMimeRegistry\n  ],\n  optional: [ILayoutRestorer],\n  activate: (\n    app: JupyterFrontEnd,\n    contentFactory: NotebookPanel.IContentFactory,\n    mainMenu: IMainMenu,\n    editorServices: IEditorServices,\n    rendermime: IRenderMimeRegistry\n  ) => {\n    console.log('Mercury extension is active.');\n    const tracker = new WidgetTracker<MercuryWidget>({\n      namespace: '@mljar/mercury-widget-tracker'\n    });\n\n    const factory = new MercuryWidgetFactory({\n      name: 'Mercury',\n      fileTypes: ['notebook'],\n      modelName: 'notebook',\n      preferKernel: true,\n      canStartKernel: true,\n      rendermime: rendermime,\n      contentFactory,\n      editorConfig: StaticNotebook.defaultEditorConfig,\n      notebookConfig: StaticNotebook.defaultNotebookConfig,\n      mimeTypeService: editorServices.mimeTypeService,\n      editorFactoryService: editorServices.factoryService,\n      notebookPanel: null\n    });\n\n    factory.widgetCreated.connect((sender, widget) => {\n      widget.context.pathChanged.connect(() => {\n        void tracker.save(widget);\n      });\n\n      void tracker.add(widget);\n      widget.update();\n      app.commands.notifyCommandChanged();\n    });\n\n    app.docRegistry.addWidgetFactory(factory);\n    app.docRegistry.addWidgetExtension(\n      'Notebook',\n      new OpenMercuryButton(app.commands)\n    );\n\n    return tracker;\n  }\n};\n","import {\n  INotebookModel,\n  NotebookPanel,\n  StaticNotebook\n} from '@jupyterlab/notebook';\nimport { IEditorMimeTypeService } from '@jupyterlab/codeeditor';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { Panel } from '@lumino/widgets';\nimport { Signal } from '@lumino/signaling';\nimport { AppModel } from './app/model';\nimport { AppWidget } from './app/widget';\nimport { CellItemWidget } from './app/item/widget';\n\nexport class MercuryPanel extends Panel {\n  constructor(options: MercuryPanel.IOptions) {\n    super();\n    this.addClass('jp-Notebook');\n    this.addClass('jp-NotebookPanel-notebook');\n    this.addClass('mercury-panel');\n\n    this._context = options.context;\n    this.rendermime = options.rendermime;\n    this.contentFactory = options.contentFactory;\n    this.mimeTypeService = options.mimeTypeService;\n    this._editorConfig = options.editorConfig;\n    this._notebookConfig = options.notebookConfig;\n\n    const appModel = new AppModel({\n      context: this._context,\n      rendermime: this.rendermime,\n      contentFactory: this.contentFactory,\n      mimeTypeService: this.mimeTypeService,\n      editorConfig: this._editorConfig,\n      notebookConfig: this._notebookConfig\n    });\n\n    this._appWidget = new AppWidget(appModel);\n    this.addWidget(this._appWidget);\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    Signal.clearData(this);\n    super.dispose();\n  }\n\n  /**\n   * The rendermime instance for this context.\n   */\n  readonly rendermime: IRenderMimeRegistry;\n  /**\n   * A notebook panel content factory.\n   */\n  readonly contentFactory: NotebookPanel.IContentFactory;\n  /**\n   * The service used to look up mime types.\n   */\n  readonly mimeTypeService: IEditorMimeTypeService;\n  /**\n   * Getter for the notebook cell editor configuration.\n   */\n  get editorConfig(): StaticNotebook.IEditorConfig {\n    return this._editorConfig;\n  }\n  /**\n   * Setter for the notebook cell editor configuration.\n   *\n   * @param value - The `EditorConfig` of the notebook.\n   */\n  set editorConfig(value: StaticNotebook.IEditorConfig) {\n    this._editorConfig = value;\n  }\n\n  get notebookConfig(): StaticNotebook.INotebookConfig {\n    return this._notebookConfig;\n  }\n  set notebookConfig(value: StaticNotebook.INotebookConfig) {\n    this._notebookConfig = value;\n  }\n\n  get cellWidgets(): Array<CellItemWidget> {\n    return this._appWidget.cellWidgets;\n  }\n\n  private _appWidget: AppWidget;\n  private _context: DocumentRegistry.IContext<INotebookModel>;\n  private _editorConfig: StaticNotebook.IEditorConfig;\n  private _notebookConfig: StaticNotebook.INotebookConfig;\n}\n\nexport namespace MercuryPanel {\n  export interface IOptions {\n    /**\n     * The Notebook context.\n     */\n    context: DocumentRegistry.IContext<INotebookModel>;\n    /**\n     * The rendermime instance for this context.\n     */\n    rendermime: IRenderMimeRegistry;\n    /**\n     * A notebook panel content factory.\n     */\n    contentFactory: NotebookPanel.IContentFactory;\n    /**\n     * The service used to look up mime types.\n     */\n    mimeTypeService: IEditorMimeTypeService;\n    /**\n     * A config object for cell editors\n     */\n    editorConfig: StaticNotebook.IEditorConfig;\n    /**\n     * A config object for notebook widget\n     */\n    notebookConfig: StaticNotebook.INotebookConfig;\n  }\n}\n","import { ToolbarButton } from '@jupyterlab/apputils';\n\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport { NotebookPanel, INotebookModel } from '@jupyterlab/notebook';\n\nimport { CommandRegistry } from '@lumino/commands';\n\nimport { IDisposable } from '@lumino/disposable';\n\nimport { Widget } from '@lumino/widgets';\n\nimport { partyIcon } from '../../icons';\n\n/**\n * A WidgetExtension for Notebook's toolbar to open a `Mercury` widget.\n */\nexport class OpenMercuryButton\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel>\n{\n  /**\n   * Instantiate a new NotebookButton.\n   * @param commands The command registry.\n   */\n  constructor(commands: CommandRegistry) {\n    this._commands = commands;\n  }\n\n  /**\n   * Create a new extension object.\n   */\n  createNew(panel: NotebookPanel): IDisposable {\n    const button = new ToolbarButton({\n      tooltip: 'Open with Mercury',\n      icon: partyIcon,\n      onClick: () => {\n        this._commands\n          .execute('docmanager:open', {\n            path: panel.context.path,\n            factory: 'Mercury',\n            options: {\n              mode: 'split-right',\n              ref: panel.id\n            }\n          })\n          .then(widget => {\n            if (widget instanceof Widget) {\n              panel.content.disposed.connect(() => {\n                widget.dispose();\n              });\n            }\n          });\n      }\n    });\n    panel.toolbar.insertItem(0, 'open-mercury', button);\n    return button;\n  }\n\n  private _commands: CommandRegistry;\n}\n","import { IWidgetTracker } from '@jupyterlab/apputils';\n\nimport { DocumentWidget, DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport { INotebookModel } from '@jupyterlab/notebook';\n\nimport { Token } from '@lumino/coreutils';\n\nimport { MercuryPanel } from './panel';\n\nexport class MercuryWidget extends DocumentWidget<\n  MercuryPanel,\n  INotebookModel\n> {\n  constructor(\n    context: DocumentRegistry.IContext<INotebookModel>,\n    content: MercuryPanel\n  ) {\n    super({ context, content });\n    this.title.label = context.localPath;\n    this.title.closable = true;\n    this.addClass('jp-NotebookPanel');\n  }\n}\n\n/**\n * A class that tracks cell item widgets.\n */\nexport interface IMercuryTracker extends IWidgetTracker<MercuryWidget> {}\n\n/**\n * The Mercury tracker token.\n */\nexport const IMercuryTracker = new Token<IMercuryTracker>(\n  '@mljar:IMercuryTracker'\n);\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { IJupyterWidgetRegistry } from '@jupyter-widgets/base';\n\nimport {\n  registerWidgetManager,\n  WidgetRenderer\n} from '@jupyter-widgets/jupyterlab-manager';\n\nimport { MercuryPanel } from '../mercury/panel';\n\nimport { IMercuryTracker } from '../mercury/widget';\n\nfunction* widgetRenderers(\n  editor: MercuryPanel\n): IterableIterator<WidgetRenderer> {\n  for (const w of editor.cellWidgets) {\n    if (w instanceof WidgetRenderer) {\n      yield w;\n    }\n  }\n}\n\n/**\n * A plugin to add support for rendering Jupyter Widgets.\n */\nexport const widgets: JupyterFrontEndPlugin<void> = {\n  id: '@mljar/mercury-support-ipywidgets',\n  autoStart: true,\n  optional: [IMercuryTracker, IJupyterWidgetRegistry],\n  activate: (\n    app: JupyterFrontEnd,\n    mercuryTracker: IMercuryTracker | null,\n    widgetRegistry: IJupyterWidgetRegistry | null\n  ) => {\n    if (!widgetRegistry) {\n      return;\n    }\n    mercuryTracker?.forEach(widget => {\n      registerWidgetManager(\n        widget.context,\n        widget.content.rendermime,\n        widgetRenderers(widget.content)\n      );\n    });\n\n    mercuryTracker?.widgetAdded.connect((sender, widget) => {\n      registerWidgetManager(\n        widget.context,\n        widget.content.rendermime,\n        widgetRenderers(widget.content)\n      );\n    });\n  }\n};\n"],"names":[],"sourceRoot":""}